# provide/foundation/config/formatters.py
#
# SPDX-FileCopyrightText: Copyright (c) provide.io llc. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

"""Output formatters for configuration schema display.

This module provides various formatters for displaying configuration schemas
in different output formats: human-readable tables, JSON, YAML, and Markdown.
"""

from __future__ import annotations

from abc import ABC, abstractmethod
import json
from typing import Any

from provide.foundation.config.discovery import ConsolidatedSchema
from inspect import signature as _mutmut_signature
from typing import Annotated
from typing import Callable
from typing import ClassVar


MutantDict = Annotated[dict[str, Callable], "Mutant"]


def _mutmut_trampoline(orig, mutants, call_args, call_kwargs, self_arg=None):
    """Forward call to original or mutated function, depending on the environment"""
    import os

    mutant_under_test = os.environ["MUTANT_UNDER_TEST"]
    if mutant_under_test == "fail":
        from mutmut.__main__ import MutmutProgrammaticFailException

        raise MutmutProgrammaticFailException("Failed programmatically")
    elif mutant_under_test == "stats":
        from mutmut.__main__ import record_trampoline_hit

        record_trampoline_hit(orig.__module__ + "." + orig.__name__)
        result = orig(*call_args, **call_kwargs)
        return result
    prefix = orig.__module__ + "." + orig.__name__ + "__mutmut_"
    if not mutant_under_test.startswith(prefix):
        result = orig(*call_args, **call_kwargs)
        return result
    mutant_name = mutant_under_test.rpartition(".")[-1]
    if self_arg:
        # call to a class method where self is not bound
        result = mutants[mutant_name](self_arg, *call_args, **call_kwargs)
    else:
        result = mutants[mutant_name](*call_args, **call_kwargs)
    return result


class SchemaFormatter(ABC):
    """Abstract base class for schema formatters."""

    @abstractmethod
    def format(
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema for output.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Formatted schema string

        """


class HumanFormatter(SchemaFormatter):
    """Human-readable table format."""

    def xǁHumanFormatterǁformat__mutmut_orig(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_1(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = True,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_2(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = True,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_3(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = None
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_4(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append(None)
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_5(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("XXFOUNDATION CONFIGURATION SCHEMAXX")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_6(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("foundation configuration schema")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_7(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append(None)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_8(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" / 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_9(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("XX=XX" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_10(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 81)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_11(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append(None)

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_12(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("XXXX")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_13(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = None

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_14(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(None) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_15(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = None
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_16(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = None
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_17(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(None, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_18(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, None)
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_19(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get({})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_20(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(
                config_name,
            )
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_21(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = None
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_22(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get(None, "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_23(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", None)
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_24(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_25(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get(
                "category",
            )
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_26(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("XXcategoryXX", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_27(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("CATEGORY", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_28(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "XXcoreXX")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_29(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "CORE")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_30(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_31(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = None
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_32(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append(None)

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_33(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(None):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_34(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(None)
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_35(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.lower()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_36(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append(None)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_37(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" / 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_38(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("XX-XX" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_39(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 81)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_40(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append(None)

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_41(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("XXXX")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_42(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(None):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_43(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(None)
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_44(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = None
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_45(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(None, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_46(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, None)
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_47(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get({})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_48(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(
                    config_name,
                )
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_49(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = None
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_50(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get(None, "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_51(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", None).strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_52(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_53(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get(
                    "doc",
                ).strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_54(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("XXdocXX", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_55(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("DOC", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_56(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "XXXX").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_57(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = None
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_58(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split(None)[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_59(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("XX\nXX")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_60(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[1].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_61(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(None)
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_62(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append(None)

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_63(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("XXXX")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_64(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only or not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_65(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_66(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        break

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_67(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive or not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_68(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_69(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        break

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_70(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = None
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_71(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(None)
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_72(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(None)
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_73(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(None)

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_74(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = None
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_75(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "XXAnyXX"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_76(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_77(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "ANY"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_78(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = None
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_79(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(None, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_80(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, None, str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_81(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", None)
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_82(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr("__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_83(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_84(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(
                            field.field_type,
                            "__name__",
                        )
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_85(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "XX__name__XX", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_86(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__NAME__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_87(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(None))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_88(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(None)

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_89(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append(None)
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_90(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("XX      Required: YesXX")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_91(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      required: yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_92(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      REQUIRED: YES")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_93(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_94(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = None
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_95(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(None)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_96(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = None
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_97(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "XX***SENSITIVE***XX"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_98(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***sensitive***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_99(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(None)

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_100(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(None)

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_101(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(None)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_102(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append(None)

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_103(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("XXXX")

            output_lines.append("")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_104(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append(None)

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_105(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("XXXX")

        return "\n".join(output_lines)

    def xǁHumanFormatterǁformat__mutmut_106(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "\n".join(None)

    def xǁHumanFormatterǁformat__mutmut_107(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as human-readable tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Human-readable formatted string

        """
        output_lines = []
        output_lines.append("FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("=" * 80)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"{cat.upper()} CONFIGURATION")
            output_lines.append("-" * 80)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"  {config_name}")
                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    # Get first line of doc
                    first_line = doc.split("\n")[0].strip()
                    output_lines.append(f"    {first_line}")
                output_lines.append("")

                # Display fields
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Format field
                    field_lines = []
                    if field.env_var:
                        field_lines.append(f"    {field.env_var}")
                        field_lines.append(f"      Field: {field.name}")
                    else:
                        field_lines.append(f"    {field.name}")

                    # Type
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))
                    field_lines.append(f"      Type: {type_name}")

                    # Required/Default
                    if field.required:
                        field_lines.append("      Required: Yes")
                    elif field.default is not None:
                        default_str = str(field.default)
                        if field.sensitive:
                            default_str = "***SENSITIVE***"
                        field_lines.append(f"      Default: {default_str}")

                    # Description
                    if field.description:
                        field_lines.append(f"      Description: {field.description}")

                    output_lines.extend(field_lines)
                    output_lines.append("")

            output_lines.append("")

        return "XX\nXX".join(output_lines)

    xǁHumanFormatterǁformat__mutmut_mutants: ClassVar[MutantDict] = {
        "xǁHumanFormatterǁformat__mutmut_1": xǁHumanFormatterǁformat__mutmut_1,
        "xǁHumanFormatterǁformat__mutmut_2": xǁHumanFormatterǁformat__mutmut_2,
        "xǁHumanFormatterǁformat__mutmut_3": xǁHumanFormatterǁformat__mutmut_3,
        "xǁHumanFormatterǁformat__mutmut_4": xǁHumanFormatterǁformat__mutmut_4,
        "xǁHumanFormatterǁformat__mutmut_5": xǁHumanFormatterǁformat__mutmut_5,
        "xǁHumanFormatterǁformat__mutmut_6": xǁHumanFormatterǁformat__mutmut_6,
        "xǁHumanFormatterǁformat__mutmut_7": xǁHumanFormatterǁformat__mutmut_7,
        "xǁHumanFormatterǁformat__mutmut_8": xǁHumanFormatterǁformat__mutmut_8,
        "xǁHumanFormatterǁformat__mutmut_9": xǁHumanFormatterǁformat__mutmut_9,
        "xǁHumanFormatterǁformat__mutmut_10": xǁHumanFormatterǁformat__mutmut_10,
        "xǁHumanFormatterǁformat__mutmut_11": xǁHumanFormatterǁformat__mutmut_11,
        "xǁHumanFormatterǁformat__mutmut_12": xǁHumanFormatterǁformat__mutmut_12,
        "xǁHumanFormatterǁformat__mutmut_13": xǁHumanFormatterǁformat__mutmut_13,
        "xǁHumanFormatterǁformat__mutmut_14": xǁHumanFormatterǁformat__mutmut_14,
        "xǁHumanFormatterǁformat__mutmut_15": xǁHumanFormatterǁformat__mutmut_15,
        "xǁHumanFormatterǁformat__mutmut_16": xǁHumanFormatterǁformat__mutmut_16,
        "xǁHumanFormatterǁformat__mutmut_17": xǁHumanFormatterǁformat__mutmut_17,
        "xǁHumanFormatterǁformat__mutmut_18": xǁHumanFormatterǁformat__mutmut_18,
        "xǁHumanFormatterǁformat__mutmut_19": xǁHumanFormatterǁformat__mutmut_19,
        "xǁHumanFormatterǁformat__mutmut_20": xǁHumanFormatterǁformat__mutmut_20,
        "xǁHumanFormatterǁformat__mutmut_21": xǁHumanFormatterǁformat__mutmut_21,
        "xǁHumanFormatterǁformat__mutmut_22": xǁHumanFormatterǁformat__mutmut_22,
        "xǁHumanFormatterǁformat__mutmut_23": xǁHumanFormatterǁformat__mutmut_23,
        "xǁHumanFormatterǁformat__mutmut_24": xǁHumanFormatterǁformat__mutmut_24,
        "xǁHumanFormatterǁformat__mutmut_25": xǁHumanFormatterǁformat__mutmut_25,
        "xǁHumanFormatterǁformat__mutmut_26": xǁHumanFormatterǁformat__mutmut_26,
        "xǁHumanFormatterǁformat__mutmut_27": xǁHumanFormatterǁformat__mutmut_27,
        "xǁHumanFormatterǁformat__mutmut_28": xǁHumanFormatterǁformat__mutmut_28,
        "xǁHumanFormatterǁformat__mutmut_29": xǁHumanFormatterǁformat__mutmut_29,
        "xǁHumanFormatterǁformat__mutmut_30": xǁHumanFormatterǁformat__mutmut_30,
        "xǁHumanFormatterǁformat__mutmut_31": xǁHumanFormatterǁformat__mutmut_31,
        "xǁHumanFormatterǁformat__mutmut_32": xǁHumanFormatterǁformat__mutmut_32,
        "xǁHumanFormatterǁformat__mutmut_33": xǁHumanFormatterǁformat__mutmut_33,
        "xǁHumanFormatterǁformat__mutmut_34": xǁHumanFormatterǁformat__mutmut_34,
        "xǁHumanFormatterǁformat__mutmut_35": xǁHumanFormatterǁformat__mutmut_35,
        "xǁHumanFormatterǁformat__mutmut_36": xǁHumanFormatterǁformat__mutmut_36,
        "xǁHumanFormatterǁformat__mutmut_37": xǁHumanFormatterǁformat__mutmut_37,
        "xǁHumanFormatterǁformat__mutmut_38": xǁHumanFormatterǁformat__mutmut_38,
        "xǁHumanFormatterǁformat__mutmut_39": xǁHumanFormatterǁformat__mutmut_39,
        "xǁHumanFormatterǁformat__mutmut_40": xǁHumanFormatterǁformat__mutmut_40,
        "xǁHumanFormatterǁformat__mutmut_41": xǁHumanFormatterǁformat__mutmut_41,
        "xǁHumanFormatterǁformat__mutmut_42": xǁHumanFormatterǁformat__mutmut_42,
        "xǁHumanFormatterǁformat__mutmut_43": xǁHumanFormatterǁformat__mutmut_43,
        "xǁHumanFormatterǁformat__mutmut_44": xǁHumanFormatterǁformat__mutmut_44,
        "xǁHumanFormatterǁformat__mutmut_45": xǁHumanFormatterǁformat__mutmut_45,
        "xǁHumanFormatterǁformat__mutmut_46": xǁHumanFormatterǁformat__mutmut_46,
        "xǁHumanFormatterǁformat__mutmut_47": xǁHumanFormatterǁformat__mutmut_47,
        "xǁHumanFormatterǁformat__mutmut_48": xǁHumanFormatterǁformat__mutmut_48,
        "xǁHumanFormatterǁformat__mutmut_49": xǁHumanFormatterǁformat__mutmut_49,
        "xǁHumanFormatterǁformat__mutmut_50": xǁHumanFormatterǁformat__mutmut_50,
        "xǁHumanFormatterǁformat__mutmut_51": xǁHumanFormatterǁformat__mutmut_51,
        "xǁHumanFormatterǁformat__mutmut_52": xǁHumanFormatterǁformat__mutmut_52,
        "xǁHumanFormatterǁformat__mutmut_53": xǁHumanFormatterǁformat__mutmut_53,
        "xǁHumanFormatterǁformat__mutmut_54": xǁHumanFormatterǁformat__mutmut_54,
        "xǁHumanFormatterǁformat__mutmut_55": xǁHumanFormatterǁformat__mutmut_55,
        "xǁHumanFormatterǁformat__mutmut_56": xǁHumanFormatterǁformat__mutmut_56,
        "xǁHumanFormatterǁformat__mutmut_57": xǁHumanFormatterǁformat__mutmut_57,
        "xǁHumanFormatterǁformat__mutmut_58": xǁHumanFormatterǁformat__mutmut_58,
        "xǁHumanFormatterǁformat__mutmut_59": xǁHumanFormatterǁformat__mutmut_59,
        "xǁHumanFormatterǁformat__mutmut_60": xǁHumanFormatterǁformat__mutmut_60,
        "xǁHumanFormatterǁformat__mutmut_61": xǁHumanFormatterǁformat__mutmut_61,
        "xǁHumanFormatterǁformat__mutmut_62": xǁHumanFormatterǁformat__mutmut_62,
        "xǁHumanFormatterǁformat__mutmut_63": xǁHumanFormatterǁformat__mutmut_63,
        "xǁHumanFormatterǁformat__mutmut_64": xǁHumanFormatterǁformat__mutmut_64,
        "xǁHumanFormatterǁformat__mutmut_65": xǁHumanFormatterǁformat__mutmut_65,
        "xǁHumanFormatterǁformat__mutmut_66": xǁHumanFormatterǁformat__mutmut_66,
        "xǁHumanFormatterǁformat__mutmut_67": xǁHumanFormatterǁformat__mutmut_67,
        "xǁHumanFormatterǁformat__mutmut_68": xǁHumanFormatterǁformat__mutmut_68,
        "xǁHumanFormatterǁformat__mutmut_69": xǁHumanFormatterǁformat__mutmut_69,
        "xǁHumanFormatterǁformat__mutmut_70": xǁHumanFormatterǁformat__mutmut_70,
        "xǁHumanFormatterǁformat__mutmut_71": xǁHumanFormatterǁformat__mutmut_71,
        "xǁHumanFormatterǁformat__mutmut_72": xǁHumanFormatterǁformat__mutmut_72,
        "xǁHumanFormatterǁformat__mutmut_73": xǁHumanFormatterǁformat__mutmut_73,
        "xǁHumanFormatterǁformat__mutmut_74": xǁHumanFormatterǁformat__mutmut_74,
        "xǁHumanFormatterǁformat__mutmut_75": xǁHumanFormatterǁformat__mutmut_75,
        "xǁHumanFormatterǁformat__mutmut_76": xǁHumanFormatterǁformat__mutmut_76,
        "xǁHumanFormatterǁformat__mutmut_77": xǁHumanFormatterǁformat__mutmut_77,
        "xǁHumanFormatterǁformat__mutmut_78": xǁHumanFormatterǁformat__mutmut_78,
        "xǁHumanFormatterǁformat__mutmut_79": xǁHumanFormatterǁformat__mutmut_79,
        "xǁHumanFormatterǁformat__mutmut_80": xǁHumanFormatterǁformat__mutmut_80,
        "xǁHumanFormatterǁformat__mutmut_81": xǁHumanFormatterǁformat__mutmut_81,
        "xǁHumanFormatterǁformat__mutmut_82": xǁHumanFormatterǁformat__mutmut_82,
        "xǁHumanFormatterǁformat__mutmut_83": xǁHumanFormatterǁformat__mutmut_83,
        "xǁHumanFormatterǁformat__mutmut_84": xǁHumanFormatterǁformat__mutmut_84,
        "xǁHumanFormatterǁformat__mutmut_85": xǁHumanFormatterǁformat__mutmut_85,
        "xǁHumanFormatterǁformat__mutmut_86": xǁHumanFormatterǁformat__mutmut_86,
        "xǁHumanFormatterǁformat__mutmut_87": xǁHumanFormatterǁformat__mutmut_87,
        "xǁHumanFormatterǁformat__mutmut_88": xǁHumanFormatterǁformat__mutmut_88,
        "xǁHumanFormatterǁformat__mutmut_89": xǁHumanFormatterǁformat__mutmut_89,
        "xǁHumanFormatterǁformat__mutmut_90": xǁHumanFormatterǁformat__mutmut_90,
        "xǁHumanFormatterǁformat__mutmut_91": xǁHumanFormatterǁformat__mutmut_91,
        "xǁHumanFormatterǁformat__mutmut_92": xǁHumanFormatterǁformat__mutmut_92,
        "xǁHumanFormatterǁformat__mutmut_93": xǁHumanFormatterǁformat__mutmut_93,
        "xǁHumanFormatterǁformat__mutmut_94": xǁHumanFormatterǁformat__mutmut_94,
        "xǁHumanFormatterǁformat__mutmut_95": xǁHumanFormatterǁformat__mutmut_95,
        "xǁHumanFormatterǁformat__mutmut_96": xǁHumanFormatterǁformat__mutmut_96,
        "xǁHumanFormatterǁformat__mutmut_97": xǁHumanFormatterǁformat__mutmut_97,
        "xǁHumanFormatterǁformat__mutmut_98": xǁHumanFormatterǁformat__mutmut_98,
        "xǁHumanFormatterǁformat__mutmut_99": xǁHumanFormatterǁformat__mutmut_99,
        "xǁHumanFormatterǁformat__mutmut_100": xǁHumanFormatterǁformat__mutmut_100,
        "xǁHumanFormatterǁformat__mutmut_101": xǁHumanFormatterǁformat__mutmut_101,
        "xǁHumanFormatterǁformat__mutmut_102": xǁHumanFormatterǁformat__mutmut_102,
        "xǁHumanFormatterǁformat__mutmut_103": xǁHumanFormatterǁformat__mutmut_103,
        "xǁHumanFormatterǁformat__mutmut_104": xǁHumanFormatterǁformat__mutmut_104,
        "xǁHumanFormatterǁformat__mutmut_105": xǁHumanFormatterǁformat__mutmut_105,
        "xǁHumanFormatterǁformat__mutmut_106": xǁHumanFormatterǁformat__mutmut_106,
        "xǁHumanFormatterǁformat__mutmut_107": xǁHumanFormatterǁformat__mutmut_107,
    }

    def format(self, *args, **kwargs):
        result = _mutmut_trampoline(
            object.__getattribute__(self, "xǁHumanFormatterǁformat__mutmut_orig"),
            object.__getattribute__(self, "xǁHumanFormatterǁformat__mutmut_mutants"),
            args,
            kwargs,
            self,
        )
        return result

    format.__signature__ = _mutmut_signature(xǁHumanFormatterǁformat__mutmut_orig)
    xǁHumanFormatterǁformat__mutmut_orig.__name__ = "xǁHumanFormatterǁformat"


class JSONFormatter(SchemaFormatter):
    """Machine-readable JSON format."""

    def xǁJSONFormatterǁformat__mutmut_orig(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_1(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = True,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_2(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = True,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_3(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = None

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_4(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(None) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_5(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = None

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_6(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "XXversionXX": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_7(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "VERSION": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_8(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "XX1.0.0XX",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_9(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "XXconfigsXX": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_10(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "CONFIGS": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_11(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = None

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_12(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(None, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_13(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, None)

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_14(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get({})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_15(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(
                config_name,
            )

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_16(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = None

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_17(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "XXmoduleXX": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_18(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "MODULE": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_19(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get(None, ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_20(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", None),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_21(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get(""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_22(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get(
                    "module",
                ),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_23(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("XXmoduleXX", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_24(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("MODULE", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_25(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", "XXXX"),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_26(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "XXcategoryXX": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_27(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "CATEGORY": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_28(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get(None, "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_29(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", None),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_30(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_31(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get(
                    "category",
                ),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_32(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("XXcategoryXX", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_33(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("CATEGORY", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_34(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "XXcoreXX"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_35(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "CORE"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_36(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "XXfieldsXX": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_37(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "FIELDS": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_38(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only or not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_39(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_40(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    break

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_41(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive or not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_42(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_43(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    break

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_44(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = None
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_45(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "XXAnyXX"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_46(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_47(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "ANY"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_48(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = None

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_49(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(None, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_50(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, None, str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_51(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", None)

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_52(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr("__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_53(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_54(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(
                        field.field_type,
                        "__name__",
                    )

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_55(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "XX__name__XX", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_56(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__NAME__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_57(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(None))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_58(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = None

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_59(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "XXtypeXX": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_60(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "TYPE": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_61(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "XXrequiredXX": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_62(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "REQUIRED": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_63(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = None
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_64(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["XXenv_varXX"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_65(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["ENV_VAR"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_66(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_67(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = None
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_68(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["XXdefaultXX"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_69(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["DEFAULT"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_70(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "XX***SENSITIVE***XX"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_71(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***sensitive***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_72(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(None)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_73(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = None
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_74(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["XXdefaultXX"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_75(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["DEFAULT"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_76(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = None
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_77(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["XXdefaultXX"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_78(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["DEFAULT"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_79(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(None)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_80(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = None
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_81(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["XXdescriptionXX"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_82(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["DESCRIPTION"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_83(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = None

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_84(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["XXsensitiveXX"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_85(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["SENSITIVE"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_86(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = False

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_87(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = None

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_88(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["XXfieldsXX"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_89(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["FIELDS"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_90(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = None

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_91(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["XXconfigsXX"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_92(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["CONFIGS"][config_name] = config_data

        return json.dumps(output, indent=2)

    def xǁJSONFormatterǁformat__mutmut_93(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(None, indent=2)

    def xǁJSONFormatterǁformat__mutmut_94(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=None)

    def xǁJSONFormatterǁformat__mutmut_95(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(indent=2)

    def xǁJSONFormatterǁformat__mutmut_96(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(
            output,
        )

    def xǁJSONFormatterǁformat__mutmut_97(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as JSON.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            JSON formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output: dict[str, Any] = {
            "version": "1.0.0",
            "configs": {},
        }

        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})

            config_data: dict[str, Any] = {
                "module": meta.get("module", ""),
                "category": meta.get("category", "core"),
                "fields": {},
            }

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                # Build field data
                field_data: dict[str, Any] = {
                    "type": type_name,
                    "required": field.required,
                }

                if field.env_var:
                    field_data["env_var"] = field.env_var
                if field.default is not None:
                    if field.sensitive:
                        field_data["default"] = "***SENSITIVE***"
                    else:
                        # Handle non-serializable defaults (like Factory objects)
                        try:
                            json.dumps(field.default)
                            field_data["default"] = field.default
                        except (TypeError, ValueError):
                            field_data["default"] = str(field.default)
                if field.description:
                    field_data["description"] = field.description
                if field.sensitive:
                    field_data["sensitive"] = True

                config_data["fields"][field.name] = field_data

            output["configs"][config_name] = config_data

        return json.dumps(output, indent=3)

    xǁJSONFormatterǁformat__mutmut_mutants: ClassVar[MutantDict] = {
        "xǁJSONFormatterǁformat__mutmut_1": xǁJSONFormatterǁformat__mutmut_1,
        "xǁJSONFormatterǁformat__mutmut_2": xǁJSONFormatterǁformat__mutmut_2,
        "xǁJSONFormatterǁformat__mutmut_3": xǁJSONFormatterǁformat__mutmut_3,
        "xǁJSONFormatterǁformat__mutmut_4": xǁJSONFormatterǁformat__mutmut_4,
        "xǁJSONFormatterǁformat__mutmut_5": xǁJSONFormatterǁformat__mutmut_5,
        "xǁJSONFormatterǁformat__mutmut_6": xǁJSONFormatterǁformat__mutmut_6,
        "xǁJSONFormatterǁformat__mutmut_7": xǁJSONFormatterǁformat__mutmut_7,
        "xǁJSONFormatterǁformat__mutmut_8": xǁJSONFormatterǁformat__mutmut_8,
        "xǁJSONFormatterǁformat__mutmut_9": xǁJSONFormatterǁformat__mutmut_9,
        "xǁJSONFormatterǁformat__mutmut_10": xǁJSONFormatterǁformat__mutmut_10,
        "xǁJSONFormatterǁformat__mutmut_11": xǁJSONFormatterǁformat__mutmut_11,
        "xǁJSONFormatterǁformat__mutmut_12": xǁJSONFormatterǁformat__mutmut_12,
        "xǁJSONFormatterǁformat__mutmut_13": xǁJSONFormatterǁformat__mutmut_13,
        "xǁJSONFormatterǁformat__mutmut_14": xǁJSONFormatterǁformat__mutmut_14,
        "xǁJSONFormatterǁformat__mutmut_15": xǁJSONFormatterǁformat__mutmut_15,
        "xǁJSONFormatterǁformat__mutmut_16": xǁJSONFormatterǁformat__mutmut_16,
        "xǁJSONFormatterǁformat__mutmut_17": xǁJSONFormatterǁformat__mutmut_17,
        "xǁJSONFormatterǁformat__mutmut_18": xǁJSONFormatterǁformat__mutmut_18,
        "xǁJSONFormatterǁformat__mutmut_19": xǁJSONFormatterǁformat__mutmut_19,
        "xǁJSONFormatterǁformat__mutmut_20": xǁJSONFormatterǁformat__mutmut_20,
        "xǁJSONFormatterǁformat__mutmut_21": xǁJSONFormatterǁformat__mutmut_21,
        "xǁJSONFormatterǁformat__mutmut_22": xǁJSONFormatterǁformat__mutmut_22,
        "xǁJSONFormatterǁformat__mutmut_23": xǁJSONFormatterǁformat__mutmut_23,
        "xǁJSONFormatterǁformat__mutmut_24": xǁJSONFormatterǁformat__mutmut_24,
        "xǁJSONFormatterǁformat__mutmut_25": xǁJSONFormatterǁformat__mutmut_25,
        "xǁJSONFormatterǁformat__mutmut_26": xǁJSONFormatterǁformat__mutmut_26,
        "xǁJSONFormatterǁformat__mutmut_27": xǁJSONFormatterǁformat__mutmut_27,
        "xǁJSONFormatterǁformat__mutmut_28": xǁJSONFormatterǁformat__mutmut_28,
        "xǁJSONFormatterǁformat__mutmut_29": xǁJSONFormatterǁformat__mutmut_29,
        "xǁJSONFormatterǁformat__mutmut_30": xǁJSONFormatterǁformat__mutmut_30,
        "xǁJSONFormatterǁformat__mutmut_31": xǁJSONFormatterǁformat__mutmut_31,
        "xǁJSONFormatterǁformat__mutmut_32": xǁJSONFormatterǁformat__mutmut_32,
        "xǁJSONFormatterǁformat__mutmut_33": xǁJSONFormatterǁformat__mutmut_33,
        "xǁJSONFormatterǁformat__mutmut_34": xǁJSONFormatterǁformat__mutmut_34,
        "xǁJSONFormatterǁformat__mutmut_35": xǁJSONFormatterǁformat__mutmut_35,
        "xǁJSONFormatterǁformat__mutmut_36": xǁJSONFormatterǁformat__mutmut_36,
        "xǁJSONFormatterǁformat__mutmut_37": xǁJSONFormatterǁformat__mutmut_37,
        "xǁJSONFormatterǁformat__mutmut_38": xǁJSONFormatterǁformat__mutmut_38,
        "xǁJSONFormatterǁformat__mutmut_39": xǁJSONFormatterǁformat__mutmut_39,
        "xǁJSONFormatterǁformat__mutmut_40": xǁJSONFormatterǁformat__mutmut_40,
        "xǁJSONFormatterǁformat__mutmut_41": xǁJSONFormatterǁformat__mutmut_41,
        "xǁJSONFormatterǁformat__mutmut_42": xǁJSONFormatterǁformat__mutmut_42,
        "xǁJSONFormatterǁformat__mutmut_43": xǁJSONFormatterǁformat__mutmut_43,
        "xǁJSONFormatterǁformat__mutmut_44": xǁJSONFormatterǁformat__mutmut_44,
        "xǁJSONFormatterǁformat__mutmut_45": xǁJSONFormatterǁformat__mutmut_45,
        "xǁJSONFormatterǁformat__mutmut_46": xǁJSONFormatterǁformat__mutmut_46,
        "xǁJSONFormatterǁformat__mutmut_47": xǁJSONFormatterǁformat__mutmut_47,
        "xǁJSONFormatterǁformat__mutmut_48": xǁJSONFormatterǁformat__mutmut_48,
        "xǁJSONFormatterǁformat__mutmut_49": xǁJSONFormatterǁformat__mutmut_49,
        "xǁJSONFormatterǁformat__mutmut_50": xǁJSONFormatterǁformat__mutmut_50,
        "xǁJSONFormatterǁformat__mutmut_51": xǁJSONFormatterǁformat__mutmut_51,
        "xǁJSONFormatterǁformat__mutmut_52": xǁJSONFormatterǁformat__mutmut_52,
        "xǁJSONFormatterǁformat__mutmut_53": xǁJSONFormatterǁformat__mutmut_53,
        "xǁJSONFormatterǁformat__mutmut_54": xǁJSONFormatterǁformat__mutmut_54,
        "xǁJSONFormatterǁformat__mutmut_55": xǁJSONFormatterǁformat__mutmut_55,
        "xǁJSONFormatterǁformat__mutmut_56": xǁJSONFormatterǁformat__mutmut_56,
        "xǁJSONFormatterǁformat__mutmut_57": xǁJSONFormatterǁformat__mutmut_57,
        "xǁJSONFormatterǁformat__mutmut_58": xǁJSONFormatterǁformat__mutmut_58,
        "xǁJSONFormatterǁformat__mutmut_59": xǁJSONFormatterǁformat__mutmut_59,
        "xǁJSONFormatterǁformat__mutmut_60": xǁJSONFormatterǁformat__mutmut_60,
        "xǁJSONFormatterǁformat__mutmut_61": xǁJSONFormatterǁformat__mutmut_61,
        "xǁJSONFormatterǁformat__mutmut_62": xǁJSONFormatterǁformat__mutmut_62,
        "xǁJSONFormatterǁformat__mutmut_63": xǁJSONFormatterǁformat__mutmut_63,
        "xǁJSONFormatterǁformat__mutmut_64": xǁJSONFormatterǁformat__mutmut_64,
        "xǁJSONFormatterǁformat__mutmut_65": xǁJSONFormatterǁformat__mutmut_65,
        "xǁJSONFormatterǁformat__mutmut_66": xǁJSONFormatterǁformat__mutmut_66,
        "xǁJSONFormatterǁformat__mutmut_67": xǁJSONFormatterǁformat__mutmut_67,
        "xǁJSONFormatterǁformat__mutmut_68": xǁJSONFormatterǁformat__mutmut_68,
        "xǁJSONFormatterǁformat__mutmut_69": xǁJSONFormatterǁformat__mutmut_69,
        "xǁJSONFormatterǁformat__mutmut_70": xǁJSONFormatterǁformat__mutmut_70,
        "xǁJSONFormatterǁformat__mutmut_71": xǁJSONFormatterǁformat__mutmut_71,
        "xǁJSONFormatterǁformat__mutmut_72": xǁJSONFormatterǁformat__mutmut_72,
        "xǁJSONFormatterǁformat__mutmut_73": xǁJSONFormatterǁformat__mutmut_73,
        "xǁJSONFormatterǁformat__mutmut_74": xǁJSONFormatterǁformat__mutmut_74,
        "xǁJSONFormatterǁformat__mutmut_75": xǁJSONFormatterǁformat__mutmut_75,
        "xǁJSONFormatterǁformat__mutmut_76": xǁJSONFormatterǁformat__mutmut_76,
        "xǁJSONFormatterǁformat__mutmut_77": xǁJSONFormatterǁformat__mutmut_77,
        "xǁJSONFormatterǁformat__mutmut_78": xǁJSONFormatterǁformat__mutmut_78,
        "xǁJSONFormatterǁformat__mutmut_79": xǁJSONFormatterǁformat__mutmut_79,
        "xǁJSONFormatterǁformat__mutmut_80": xǁJSONFormatterǁformat__mutmut_80,
        "xǁJSONFormatterǁformat__mutmut_81": xǁJSONFormatterǁformat__mutmut_81,
        "xǁJSONFormatterǁformat__mutmut_82": xǁJSONFormatterǁformat__mutmut_82,
        "xǁJSONFormatterǁformat__mutmut_83": xǁJSONFormatterǁformat__mutmut_83,
        "xǁJSONFormatterǁformat__mutmut_84": xǁJSONFormatterǁformat__mutmut_84,
        "xǁJSONFormatterǁformat__mutmut_85": xǁJSONFormatterǁformat__mutmut_85,
        "xǁJSONFormatterǁformat__mutmut_86": xǁJSONFormatterǁformat__mutmut_86,
        "xǁJSONFormatterǁformat__mutmut_87": xǁJSONFormatterǁformat__mutmut_87,
        "xǁJSONFormatterǁformat__mutmut_88": xǁJSONFormatterǁformat__mutmut_88,
        "xǁJSONFormatterǁformat__mutmut_89": xǁJSONFormatterǁformat__mutmut_89,
        "xǁJSONFormatterǁformat__mutmut_90": xǁJSONFormatterǁformat__mutmut_90,
        "xǁJSONFormatterǁformat__mutmut_91": xǁJSONFormatterǁformat__mutmut_91,
        "xǁJSONFormatterǁformat__mutmut_92": xǁJSONFormatterǁformat__mutmut_92,
        "xǁJSONFormatterǁformat__mutmut_93": xǁJSONFormatterǁformat__mutmut_93,
        "xǁJSONFormatterǁformat__mutmut_94": xǁJSONFormatterǁformat__mutmut_94,
        "xǁJSONFormatterǁformat__mutmut_95": xǁJSONFormatterǁformat__mutmut_95,
        "xǁJSONFormatterǁformat__mutmut_96": xǁJSONFormatterǁformat__mutmut_96,
        "xǁJSONFormatterǁformat__mutmut_97": xǁJSONFormatterǁformat__mutmut_97,
    }

    def format(self, *args, **kwargs):
        result = _mutmut_trampoline(
            object.__getattribute__(self, "xǁJSONFormatterǁformat__mutmut_orig"),
            object.__getattribute__(self, "xǁJSONFormatterǁformat__mutmut_mutants"),
            args,
            kwargs,
            self,
        )
        return result

    format.__signature__ = _mutmut_signature(xǁJSONFormatterǁformat__mutmut_orig)
    xǁJSONFormatterǁformat__mutmut_orig.__name__ = "xǁJSONFormatterǁformat"


class YAMLFormatter(SchemaFormatter):
    """YAML format for configuration files."""

    def xǁYAMLFormatterǁformat__mutmut_orig(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_1(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = True,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_2(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = True,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_3(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = None

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_4(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(None) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_5(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = None
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_6(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append(None)
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_7(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("XX# Foundation Configuration SchemaXX")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_8(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# foundation configuration schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_9(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_10(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append(None)
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_11(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("XXversion: '1.0.0'XX")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_12(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("VERSION: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_13(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append(None)
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_14(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("XXXX")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_15(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append(None)

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_16(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("XXconfigs:XX")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_17(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("CONFIGS:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_18(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(None):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_19(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = None

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_20(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(None, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_21(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, None)

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_22(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get({})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_23(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(
                config_name,
            )

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_24(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(None)
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_25(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(None)
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_26(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get(None, '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_27(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', None)}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_28(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_29(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_30(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('XXmoduleXX', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_31(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('MODULE', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_32(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', 'XXXX')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_33(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(None)
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_34(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get(None, 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_35(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', None)}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_36(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_37(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_38(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('XXcategoryXX', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_39(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('CATEGORY', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_40(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'XXcoreXX')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_41(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'CORE')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_42(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append(None)

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_43(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("XX    fields:XX")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_44(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    FIELDS:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_45(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only or not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_46(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_47(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    break

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_48(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive or not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_49(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_50(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    break

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_51(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = None
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_52(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "XXAnyXX"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_53(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_54(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "ANY"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_55(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = None

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_56(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(None, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_57(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, None, str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_58(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", None)

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_59(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr("__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_60(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_61(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(
                        field.field_type,
                        "__name__",
                    )

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_62(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "XX__name__XX", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_63(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__NAME__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_64(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(None))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_65(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(None)
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_66(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(None)
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_67(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(None)

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_68(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).upper()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_69(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(None).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_70(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(None)
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_71(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_72(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append(None)
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_73(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("XX        default: '***SENSITIVE***'XX")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_74(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***sensitive***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_75(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        DEFAULT: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_76(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(None)
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_77(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(None)
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_78(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append(None)

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_79(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("XX        sensitive: trueXX")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_80(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        SENSITIVE: TRUE")

        output_lines.append("")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_81(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append(None)
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_82(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("XXXX")
        return "\n".join(output_lines)

    def xǁYAMLFormatterǁformat__mutmut_83(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "\n".join(None)

    def xǁYAMLFormatterǁformat__mutmut_84(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as YAML.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            YAML formatted string

        """
        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("version: '1.0.0'")
        output_lines.append("")
        output_lines.append("configs:")

        for config_name, config_schema in sorted(schemas_to_display.items()):
            meta = schema.metadata.get(config_name, {})

            output_lines.append(f"  {config_name}:")
            output_lines.append(f"    module: {meta.get('module', '')}")
            output_lines.append(f"    category: {meta.get('category', 'core')}")
            output_lines.append("    fields:")

            for field in config_schema.fields:
                # Skip if env_only and no env var
                if env_only and not field.env_var:
                    continue

                # Skip sensitive unless requested
                if field.sensitive and not show_sensitive:
                    continue

                # Get type name
                type_name = "Any"
                if field.field_type:
                    type_name = getattr(field.field_type, "__name__", str(field.field_type))

                output_lines.append(f"      {field.name}:")
                output_lines.append(f"        type: {type_name}")
                output_lines.append(f"        required: {str(field.required).lower()}")

                if field.env_var:
                    output_lines.append(f"        env_var: {field.env_var}")
                if field.default is not None:
                    if field.sensitive:
                        output_lines.append("        default: '***SENSITIVE***'")
                    else:
                        output_lines.append(f"        default: {field.default}")
                if field.description:
                    output_lines.append(f"        description: '{field.description}'")
                if field.sensitive:
                    output_lines.append("        sensitive: true")

        output_lines.append("")
        return "XX\nXX".join(output_lines)

    xǁYAMLFormatterǁformat__mutmut_mutants: ClassVar[MutantDict] = {
        "xǁYAMLFormatterǁformat__mutmut_1": xǁYAMLFormatterǁformat__mutmut_1,
        "xǁYAMLFormatterǁformat__mutmut_2": xǁYAMLFormatterǁformat__mutmut_2,
        "xǁYAMLFormatterǁformat__mutmut_3": xǁYAMLFormatterǁformat__mutmut_3,
        "xǁYAMLFormatterǁformat__mutmut_4": xǁYAMLFormatterǁformat__mutmut_4,
        "xǁYAMLFormatterǁformat__mutmut_5": xǁYAMLFormatterǁformat__mutmut_5,
        "xǁYAMLFormatterǁformat__mutmut_6": xǁYAMLFormatterǁformat__mutmut_6,
        "xǁYAMLFormatterǁformat__mutmut_7": xǁYAMLFormatterǁformat__mutmut_7,
        "xǁYAMLFormatterǁformat__mutmut_8": xǁYAMLFormatterǁformat__mutmut_8,
        "xǁYAMLFormatterǁformat__mutmut_9": xǁYAMLFormatterǁformat__mutmut_9,
        "xǁYAMLFormatterǁformat__mutmut_10": xǁYAMLFormatterǁformat__mutmut_10,
        "xǁYAMLFormatterǁformat__mutmut_11": xǁYAMLFormatterǁformat__mutmut_11,
        "xǁYAMLFormatterǁformat__mutmut_12": xǁYAMLFormatterǁformat__mutmut_12,
        "xǁYAMLFormatterǁformat__mutmut_13": xǁYAMLFormatterǁformat__mutmut_13,
        "xǁYAMLFormatterǁformat__mutmut_14": xǁYAMLFormatterǁformat__mutmut_14,
        "xǁYAMLFormatterǁformat__mutmut_15": xǁYAMLFormatterǁformat__mutmut_15,
        "xǁYAMLFormatterǁformat__mutmut_16": xǁYAMLFormatterǁformat__mutmut_16,
        "xǁYAMLFormatterǁformat__mutmut_17": xǁYAMLFormatterǁformat__mutmut_17,
        "xǁYAMLFormatterǁformat__mutmut_18": xǁYAMLFormatterǁformat__mutmut_18,
        "xǁYAMLFormatterǁformat__mutmut_19": xǁYAMLFormatterǁformat__mutmut_19,
        "xǁYAMLFormatterǁformat__mutmut_20": xǁYAMLFormatterǁformat__mutmut_20,
        "xǁYAMLFormatterǁformat__mutmut_21": xǁYAMLFormatterǁformat__mutmut_21,
        "xǁYAMLFormatterǁformat__mutmut_22": xǁYAMLFormatterǁformat__mutmut_22,
        "xǁYAMLFormatterǁformat__mutmut_23": xǁYAMLFormatterǁformat__mutmut_23,
        "xǁYAMLFormatterǁformat__mutmut_24": xǁYAMLFormatterǁformat__mutmut_24,
        "xǁYAMLFormatterǁformat__mutmut_25": xǁYAMLFormatterǁformat__mutmut_25,
        "xǁYAMLFormatterǁformat__mutmut_26": xǁYAMLFormatterǁformat__mutmut_26,
        "xǁYAMLFormatterǁformat__mutmut_27": xǁYAMLFormatterǁformat__mutmut_27,
        "xǁYAMLFormatterǁformat__mutmut_28": xǁYAMLFormatterǁformat__mutmut_28,
        "xǁYAMLFormatterǁformat__mutmut_29": xǁYAMLFormatterǁformat__mutmut_29,
        "xǁYAMLFormatterǁformat__mutmut_30": xǁYAMLFormatterǁformat__mutmut_30,
        "xǁYAMLFormatterǁformat__mutmut_31": xǁYAMLFormatterǁformat__mutmut_31,
        "xǁYAMLFormatterǁformat__mutmut_32": xǁYAMLFormatterǁformat__mutmut_32,
        "xǁYAMLFormatterǁformat__mutmut_33": xǁYAMLFormatterǁformat__mutmut_33,
        "xǁYAMLFormatterǁformat__mutmut_34": xǁYAMLFormatterǁformat__mutmut_34,
        "xǁYAMLFormatterǁformat__mutmut_35": xǁYAMLFormatterǁformat__mutmut_35,
        "xǁYAMLFormatterǁformat__mutmut_36": xǁYAMLFormatterǁformat__mutmut_36,
        "xǁYAMLFormatterǁformat__mutmut_37": xǁYAMLFormatterǁformat__mutmut_37,
        "xǁYAMLFormatterǁformat__mutmut_38": xǁYAMLFormatterǁformat__mutmut_38,
        "xǁYAMLFormatterǁformat__mutmut_39": xǁYAMLFormatterǁformat__mutmut_39,
        "xǁYAMLFormatterǁformat__mutmut_40": xǁYAMLFormatterǁformat__mutmut_40,
        "xǁYAMLFormatterǁformat__mutmut_41": xǁYAMLFormatterǁformat__mutmut_41,
        "xǁYAMLFormatterǁformat__mutmut_42": xǁYAMLFormatterǁformat__mutmut_42,
        "xǁYAMLFormatterǁformat__mutmut_43": xǁYAMLFormatterǁformat__mutmut_43,
        "xǁYAMLFormatterǁformat__mutmut_44": xǁYAMLFormatterǁformat__mutmut_44,
        "xǁYAMLFormatterǁformat__mutmut_45": xǁYAMLFormatterǁformat__mutmut_45,
        "xǁYAMLFormatterǁformat__mutmut_46": xǁYAMLFormatterǁformat__mutmut_46,
        "xǁYAMLFormatterǁformat__mutmut_47": xǁYAMLFormatterǁformat__mutmut_47,
        "xǁYAMLFormatterǁformat__mutmut_48": xǁYAMLFormatterǁformat__mutmut_48,
        "xǁYAMLFormatterǁformat__mutmut_49": xǁYAMLFormatterǁformat__mutmut_49,
        "xǁYAMLFormatterǁformat__mutmut_50": xǁYAMLFormatterǁformat__mutmut_50,
        "xǁYAMLFormatterǁformat__mutmut_51": xǁYAMLFormatterǁformat__mutmut_51,
        "xǁYAMLFormatterǁformat__mutmut_52": xǁYAMLFormatterǁformat__mutmut_52,
        "xǁYAMLFormatterǁformat__mutmut_53": xǁYAMLFormatterǁformat__mutmut_53,
        "xǁYAMLFormatterǁformat__mutmut_54": xǁYAMLFormatterǁformat__mutmut_54,
        "xǁYAMLFormatterǁformat__mutmut_55": xǁYAMLFormatterǁformat__mutmut_55,
        "xǁYAMLFormatterǁformat__mutmut_56": xǁYAMLFormatterǁformat__mutmut_56,
        "xǁYAMLFormatterǁformat__mutmut_57": xǁYAMLFormatterǁformat__mutmut_57,
        "xǁYAMLFormatterǁformat__mutmut_58": xǁYAMLFormatterǁformat__mutmut_58,
        "xǁYAMLFormatterǁformat__mutmut_59": xǁYAMLFormatterǁformat__mutmut_59,
        "xǁYAMLFormatterǁformat__mutmut_60": xǁYAMLFormatterǁformat__mutmut_60,
        "xǁYAMLFormatterǁformat__mutmut_61": xǁYAMLFormatterǁformat__mutmut_61,
        "xǁYAMLFormatterǁformat__mutmut_62": xǁYAMLFormatterǁformat__mutmut_62,
        "xǁYAMLFormatterǁformat__mutmut_63": xǁYAMLFormatterǁformat__mutmut_63,
        "xǁYAMLFormatterǁformat__mutmut_64": xǁYAMLFormatterǁformat__mutmut_64,
        "xǁYAMLFormatterǁformat__mutmut_65": xǁYAMLFormatterǁformat__mutmut_65,
        "xǁYAMLFormatterǁformat__mutmut_66": xǁYAMLFormatterǁformat__mutmut_66,
        "xǁYAMLFormatterǁformat__mutmut_67": xǁYAMLFormatterǁformat__mutmut_67,
        "xǁYAMLFormatterǁformat__mutmut_68": xǁYAMLFormatterǁformat__mutmut_68,
        "xǁYAMLFormatterǁformat__mutmut_69": xǁYAMLFormatterǁformat__mutmut_69,
        "xǁYAMLFormatterǁformat__mutmut_70": xǁYAMLFormatterǁformat__mutmut_70,
        "xǁYAMLFormatterǁformat__mutmut_71": xǁYAMLFormatterǁformat__mutmut_71,
        "xǁYAMLFormatterǁformat__mutmut_72": xǁYAMLFormatterǁformat__mutmut_72,
        "xǁYAMLFormatterǁformat__mutmut_73": xǁYAMLFormatterǁformat__mutmut_73,
        "xǁYAMLFormatterǁformat__mutmut_74": xǁYAMLFormatterǁformat__mutmut_74,
        "xǁYAMLFormatterǁformat__mutmut_75": xǁYAMLFormatterǁformat__mutmut_75,
        "xǁYAMLFormatterǁformat__mutmut_76": xǁYAMLFormatterǁformat__mutmut_76,
        "xǁYAMLFormatterǁformat__mutmut_77": xǁYAMLFormatterǁformat__mutmut_77,
        "xǁYAMLFormatterǁformat__mutmut_78": xǁYAMLFormatterǁformat__mutmut_78,
        "xǁYAMLFormatterǁformat__mutmut_79": xǁYAMLFormatterǁformat__mutmut_79,
        "xǁYAMLFormatterǁformat__mutmut_80": xǁYAMLFormatterǁformat__mutmut_80,
        "xǁYAMLFormatterǁformat__mutmut_81": xǁYAMLFormatterǁformat__mutmut_81,
        "xǁYAMLFormatterǁformat__mutmut_82": xǁYAMLFormatterǁformat__mutmut_82,
        "xǁYAMLFormatterǁformat__mutmut_83": xǁYAMLFormatterǁformat__mutmut_83,
        "xǁYAMLFormatterǁformat__mutmut_84": xǁYAMLFormatterǁformat__mutmut_84,
    }

    def format(self, *args, **kwargs):
        result = _mutmut_trampoline(
            object.__getattribute__(self, "xǁYAMLFormatterǁformat__mutmut_orig"),
            object.__getattribute__(self, "xǁYAMLFormatterǁformat__mutmut_mutants"),
            args,
            kwargs,
            self,
        )
        return result

    format.__signature__ = _mutmut_signature(xǁYAMLFormatterǁformat__mutmut_orig)
    xǁYAMLFormatterǁformat__mutmut_orig.__name__ = "xǁYAMLFormatterǁformat"


class MarkdownFormatter(SchemaFormatter):
    """Markdown tables for documentation."""

    def xǁMarkdownFormatterǁformat__mutmut_orig(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_1(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = True,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_2(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = True,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_3(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = None
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_4(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append(None)
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_5(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("XX# Foundation Configuration SchemaXX")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_6(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# foundation configuration schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_7(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# FOUNDATION CONFIGURATION SCHEMA")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_8(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append(None)

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_9(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("XXXX")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_10(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = None

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_11(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(None) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_12(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = None
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_13(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = None
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_14(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(None, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_15(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, None)
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_16(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get({})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_17(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(
                config_name,
            )
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_18(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = None
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_19(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get(None, "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_20(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", None)
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_21(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_22(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get(
                "category",
            )
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_23(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("XXcategoryXX", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_24(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("CATEGORY", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_25(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "XXcoreXX")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_26(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "CORE")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_27(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_28(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = None
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_29(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append(None)

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_30(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(None):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_31(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(None)
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_32(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append(None)

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_33(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("XXXX")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_34(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(None):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_35(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(None)
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_36(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append(None)

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_37(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("XXXX")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_38(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = None
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_39(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(None, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_40(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, None)
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_41(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get({})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_42(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(
                    config_name,
                )
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_43(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = None
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_44(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get(None, "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_45(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", None).strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_46(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_47(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get(
                    "doc",
                ).strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_48(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("XXdocXX", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_49(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("DOC", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_50(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "XXXX").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_51(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(None)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_52(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append(None)

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_53(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("XXXX")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_54(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append(None)
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_55(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append(
                        "XX| Environment Variable | Type | Required | Default | Description |XX"
                    )
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_56(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| environment variable | type | required | default | description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_57(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| ENVIRONMENT VARIABLE | TYPE | REQUIRED | DEFAULT | DESCRIPTION |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_58(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append(None)
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_59(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append(
                        "XX|---------------------|------|----------|---------|-------------|XX"
                    )
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_60(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append(None)
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_61(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("XX| Field | Type | Required | Default | Description |XX")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_62(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| field | type | required | default | description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_63(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| FIELD | TYPE | REQUIRED | DEFAULT | DESCRIPTION |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_64(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append(None)

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_65(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("XX|-------|------|----------|---------|-------------|XX")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_66(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only or not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_67(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_68(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        break

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_69(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive or not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_70(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_71(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        break

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_72(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = None
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_73(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "XXAnyXX"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_74(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_75(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "ANY"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_76(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = None

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_77(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(None, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_78(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, None, str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_79(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", None)

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_80(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr("__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_81(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_82(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(
                            field.field_type,
                            "__name__",
                        )

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_83(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "XX__name__XX", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_84(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__NAME__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_85(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(None))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_86(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = None

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_87(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only or field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_88(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = None
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_89(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "XXYesXX" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_90(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_91(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "YES" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_92(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "XXNoXX"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_93(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "no"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_94(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "NO"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_95(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = None
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_96(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = "XXXX"
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_97(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_98(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = None

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_99(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "XX***SENSITIVE***XX" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_100(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***sensitive***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_101(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(None)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_102(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = None

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_103(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description and ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_104(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or "XXXX"

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_105(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(None)

                output_lines.append("")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_106(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append(None)

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_107(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("XXXX")

        return "\n".join(output_lines)

    def xǁMarkdownFormatterǁformat__mutmut_108(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "\n".join(None)

    def xǁMarkdownFormatterǁformat__mutmut_109(  # noqa: C901
        self,
        schema: ConsolidatedSchema,
        env_only: bool = False,
        show_sensitive: bool = False,
        category: str | None = None,
    ) -> str:
        """Format schema as Markdown tables.

        Args:
            schema: Consolidated schema to format
            env_only: Show only environment variables
            show_sensitive: Include sensitive fields
            category: Filter by category

        Returns:
            Markdown formatted string

        """
        output_lines = []
        output_lines.append("# Foundation Configuration Schema")
        output_lines.append("")

        # Filter schemas if category specified
        schemas_to_display = schema.get_by_category(category) if category else schema.schemas

        # Group by category
        by_category: dict[str, list[tuple[str, Any]]] = {}
        for config_name, config_schema in schemas_to_display.items():
            meta = schema.metadata.get(config_name, {})
            cat = meta.get("category", "core")
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append((config_name, config_schema))

        # Display each category
        for cat in sorted(by_category.keys()):
            output_lines.append(f"## {cat.capitalize()} Configuration")
            output_lines.append("")

            for config_name, config_schema in sorted(by_category[cat]):
                output_lines.append(f"### {config_name}")
                output_lines.append("")

                meta = schema.metadata.get(config_name, {})
                doc = meta.get("doc", "").strip()
                if doc:
                    output_lines.append(doc)
                    output_lines.append("")

                # Table header
                if env_only:
                    output_lines.append("| Environment Variable | Type | Required | Default | Description |")
                    output_lines.append("|---------------------|------|----------|---------|-------------|")
                else:
                    output_lines.append("| Field | Type | Required | Default | Description |")
                    output_lines.append("|-------|------|----------|---------|-------------|")

                # Table rows
                for field in config_schema.fields:
                    # Skip if env_only and no env var
                    if env_only and not field.env_var:
                        continue

                    # Skip sensitive unless requested
                    if field.sensitive and not show_sensitive:
                        continue

                    # Get type name
                    type_name = "Any"
                    if field.field_type:
                        type_name = getattr(field.field_type, "__name__", str(field.field_type))

                    # Field name or env var
                    name = field.env_var if env_only and field.env_var else field.name

                    # Required/Default
                    required = "Yes" if field.required else "No"
                    default = ""
                    if field.default is not None:
                        default = "***SENSITIVE***" if field.sensitive else str(field.default)

                    # Description
                    desc = field.description or ""

                    output_lines.append(f"| {name} | {type_name} | {required} | {default} | {desc} |")

                output_lines.append("")

        return "XX\nXX".join(output_lines)

    xǁMarkdownFormatterǁformat__mutmut_mutants: ClassVar[MutantDict] = {
        "xǁMarkdownFormatterǁformat__mutmut_1": xǁMarkdownFormatterǁformat__mutmut_1,
        "xǁMarkdownFormatterǁformat__mutmut_2": xǁMarkdownFormatterǁformat__mutmut_2,
        "xǁMarkdownFormatterǁformat__mutmut_3": xǁMarkdownFormatterǁformat__mutmut_3,
        "xǁMarkdownFormatterǁformat__mutmut_4": xǁMarkdownFormatterǁformat__mutmut_4,
        "xǁMarkdownFormatterǁformat__mutmut_5": xǁMarkdownFormatterǁformat__mutmut_5,
        "xǁMarkdownFormatterǁformat__mutmut_6": xǁMarkdownFormatterǁformat__mutmut_6,
        "xǁMarkdownFormatterǁformat__mutmut_7": xǁMarkdownFormatterǁformat__mutmut_7,
        "xǁMarkdownFormatterǁformat__mutmut_8": xǁMarkdownFormatterǁformat__mutmut_8,
        "xǁMarkdownFormatterǁformat__mutmut_9": xǁMarkdownFormatterǁformat__mutmut_9,
        "xǁMarkdownFormatterǁformat__mutmut_10": xǁMarkdownFormatterǁformat__mutmut_10,
        "xǁMarkdownFormatterǁformat__mutmut_11": xǁMarkdownFormatterǁformat__mutmut_11,
        "xǁMarkdownFormatterǁformat__mutmut_12": xǁMarkdownFormatterǁformat__mutmut_12,
        "xǁMarkdownFormatterǁformat__mutmut_13": xǁMarkdownFormatterǁformat__mutmut_13,
        "xǁMarkdownFormatterǁformat__mutmut_14": xǁMarkdownFormatterǁformat__mutmut_14,
        "xǁMarkdownFormatterǁformat__mutmut_15": xǁMarkdownFormatterǁformat__mutmut_15,
        "xǁMarkdownFormatterǁformat__mutmut_16": xǁMarkdownFormatterǁformat__mutmut_16,
        "xǁMarkdownFormatterǁformat__mutmut_17": xǁMarkdownFormatterǁformat__mutmut_17,
        "xǁMarkdownFormatterǁformat__mutmut_18": xǁMarkdownFormatterǁformat__mutmut_18,
        "xǁMarkdownFormatterǁformat__mutmut_19": xǁMarkdownFormatterǁformat__mutmut_19,
        "xǁMarkdownFormatterǁformat__mutmut_20": xǁMarkdownFormatterǁformat__mutmut_20,
        "xǁMarkdownFormatterǁformat__mutmut_21": xǁMarkdownFormatterǁformat__mutmut_21,
        "xǁMarkdownFormatterǁformat__mutmut_22": xǁMarkdownFormatterǁformat__mutmut_22,
        "xǁMarkdownFormatterǁformat__mutmut_23": xǁMarkdownFormatterǁformat__mutmut_23,
        "xǁMarkdownFormatterǁformat__mutmut_24": xǁMarkdownFormatterǁformat__mutmut_24,
        "xǁMarkdownFormatterǁformat__mutmut_25": xǁMarkdownFormatterǁformat__mutmut_25,
        "xǁMarkdownFormatterǁformat__mutmut_26": xǁMarkdownFormatterǁformat__mutmut_26,
        "xǁMarkdownFormatterǁformat__mutmut_27": xǁMarkdownFormatterǁformat__mutmut_27,
        "xǁMarkdownFormatterǁformat__mutmut_28": xǁMarkdownFormatterǁformat__mutmut_28,
        "xǁMarkdownFormatterǁformat__mutmut_29": xǁMarkdownFormatterǁformat__mutmut_29,
        "xǁMarkdownFormatterǁformat__mutmut_30": xǁMarkdownFormatterǁformat__mutmut_30,
        "xǁMarkdownFormatterǁformat__mutmut_31": xǁMarkdownFormatterǁformat__mutmut_31,
        "xǁMarkdownFormatterǁformat__mutmut_32": xǁMarkdownFormatterǁformat__mutmut_32,
        "xǁMarkdownFormatterǁformat__mutmut_33": xǁMarkdownFormatterǁformat__mutmut_33,
        "xǁMarkdownFormatterǁformat__mutmut_34": xǁMarkdownFormatterǁformat__mutmut_34,
        "xǁMarkdownFormatterǁformat__mutmut_35": xǁMarkdownFormatterǁformat__mutmut_35,
        "xǁMarkdownFormatterǁformat__mutmut_36": xǁMarkdownFormatterǁformat__mutmut_36,
        "xǁMarkdownFormatterǁformat__mutmut_37": xǁMarkdownFormatterǁformat__mutmut_37,
        "xǁMarkdownFormatterǁformat__mutmut_38": xǁMarkdownFormatterǁformat__mutmut_38,
        "xǁMarkdownFormatterǁformat__mutmut_39": xǁMarkdownFormatterǁformat__mutmut_39,
        "xǁMarkdownFormatterǁformat__mutmut_40": xǁMarkdownFormatterǁformat__mutmut_40,
        "xǁMarkdownFormatterǁformat__mutmut_41": xǁMarkdownFormatterǁformat__mutmut_41,
        "xǁMarkdownFormatterǁformat__mutmut_42": xǁMarkdownFormatterǁformat__mutmut_42,
        "xǁMarkdownFormatterǁformat__mutmut_43": xǁMarkdownFormatterǁformat__mutmut_43,
        "xǁMarkdownFormatterǁformat__mutmut_44": xǁMarkdownFormatterǁformat__mutmut_44,
        "xǁMarkdownFormatterǁformat__mutmut_45": xǁMarkdownFormatterǁformat__mutmut_45,
        "xǁMarkdownFormatterǁformat__mutmut_46": xǁMarkdownFormatterǁformat__mutmut_46,
        "xǁMarkdownFormatterǁformat__mutmut_47": xǁMarkdownFormatterǁformat__mutmut_47,
        "xǁMarkdownFormatterǁformat__mutmut_48": xǁMarkdownFormatterǁformat__mutmut_48,
        "xǁMarkdownFormatterǁformat__mutmut_49": xǁMarkdownFormatterǁformat__mutmut_49,
        "xǁMarkdownFormatterǁformat__mutmut_50": xǁMarkdownFormatterǁformat__mutmut_50,
        "xǁMarkdownFormatterǁformat__mutmut_51": xǁMarkdownFormatterǁformat__mutmut_51,
        "xǁMarkdownFormatterǁformat__mutmut_52": xǁMarkdownFormatterǁformat__mutmut_52,
        "xǁMarkdownFormatterǁformat__mutmut_53": xǁMarkdownFormatterǁformat__mutmut_53,
        "xǁMarkdownFormatterǁformat__mutmut_54": xǁMarkdownFormatterǁformat__mutmut_54,
        "xǁMarkdownFormatterǁformat__mutmut_55": xǁMarkdownFormatterǁformat__mutmut_55,
        "xǁMarkdownFormatterǁformat__mutmut_56": xǁMarkdownFormatterǁformat__mutmut_56,
        "xǁMarkdownFormatterǁformat__mutmut_57": xǁMarkdownFormatterǁformat__mutmut_57,
        "xǁMarkdownFormatterǁformat__mutmut_58": xǁMarkdownFormatterǁformat__mutmut_58,
        "xǁMarkdownFormatterǁformat__mutmut_59": xǁMarkdownFormatterǁformat__mutmut_59,
        "xǁMarkdownFormatterǁformat__mutmut_60": xǁMarkdownFormatterǁformat__mutmut_60,
        "xǁMarkdownFormatterǁformat__mutmut_61": xǁMarkdownFormatterǁformat__mutmut_61,
        "xǁMarkdownFormatterǁformat__mutmut_62": xǁMarkdownFormatterǁformat__mutmut_62,
        "xǁMarkdownFormatterǁformat__mutmut_63": xǁMarkdownFormatterǁformat__mutmut_63,
        "xǁMarkdownFormatterǁformat__mutmut_64": xǁMarkdownFormatterǁformat__mutmut_64,
        "xǁMarkdownFormatterǁformat__mutmut_65": xǁMarkdownFormatterǁformat__mutmut_65,
        "xǁMarkdownFormatterǁformat__mutmut_66": xǁMarkdownFormatterǁformat__mutmut_66,
        "xǁMarkdownFormatterǁformat__mutmut_67": xǁMarkdownFormatterǁformat__mutmut_67,
        "xǁMarkdownFormatterǁformat__mutmut_68": xǁMarkdownFormatterǁformat__mutmut_68,
        "xǁMarkdownFormatterǁformat__mutmut_69": xǁMarkdownFormatterǁformat__mutmut_69,
        "xǁMarkdownFormatterǁformat__mutmut_70": xǁMarkdownFormatterǁformat__mutmut_70,
        "xǁMarkdownFormatterǁformat__mutmut_71": xǁMarkdownFormatterǁformat__mutmut_71,
        "xǁMarkdownFormatterǁformat__mutmut_72": xǁMarkdownFormatterǁformat__mutmut_72,
        "xǁMarkdownFormatterǁformat__mutmut_73": xǁMarkdownFormatterǁformat__mutmut_73,
        "xǁMarkdownFormatterǁformat__mutmut_74": xǁMarkdownFormatterǁformat__mutmut_74,
        "xǁMarkdownFormatterǁformat__mutmut_75": xǁMarkdownFormatterǁformat__mutmut_75,
        "xǁMarkdownFormatterǁformat__mutmut_76": xǁMarkdownFormatterǁformat__mutmut_76,
        "xǁMarkdownFormatterǁformat__mutmut_77": xǁMarkdownFormatterǁformat__mutmut_77,
        "xǁMarkdownFormatterǁformat__mutmut_78": xǁMarkdownFormatterǁformat__mutmut_78,
        "xǁMarkdownFormatterǁformat__mutmut_79": xǁMarkdownFormatterǁformat__mutmut_79,
        "xǁMarkdownFormatterǁformat__mutmut_80": xǁMarkdownFormatterǁformat__mutmut_80,
        "xǁMarkdownFormatterǁformat__mutmut_81": xǁMarkdownFormatterǁformat__mutmut_81,
        "xǁMarkdownFormatterǁformat__mutmut_82": xǁMarkdownFormatterǁformat__mutmut_82,
        "xǁMarkdownFormatterǁformat__mutmut_83": xǁMarkdownFormatterǁformat__mutmut_83,
        "xǁMarkdownFormatterǁformat__mutmut_84": xǁMarkdownFormatterǁformat__mutmut_84,
        "xǁMarkdownFormatterǁformat__mutmut_85": xǁMarkdownFormatterǁformat__mutmut_85,
        "xǁMarkdownFormatterǁformat__mutmut_86": xǁMarkdownFormatterǁformat__mutmut_86,
        "xǁMarkdownFormatterǁformat__mutmut_87": xǁMarkdownFormatterǁformat__mutmut_87,
        "xǁMarkdownFormatterǁformat__mutmut_88": xǁMarkdownFormatterǁformat__mutmut_88,
        "xǁMarkdownFormatterǁformat__mutmut_89": xǁMarkdownFormatterǁformat__mutmut_89,
        "xǁMarkdownFormatterǁformat__mutmut_90": xǁMarkdownFormatterǁformat__mutmut_90,
        "xǁMarkdownFormatterǁformat__mutmut_91": xǁMarkdownFormatterǁformat__mutmut_91,
        "xǁMarkdownFormatterǁformat__mutmut_92": xǁMarkdownFormatterǁformat__mutmut_92,
        "xǁMarkdownFormatterǁformat__mutmut_93": xǁMarkdownFormatterǁformat__mutmut_93,
        "xǁMarkdownFormatterǁformat__mutmut_94": xǁMarkdownFormatterǁformat__mutmut_94,
        "xǁMarkdownFormatterǁformat__mutmut_95": xǁMarkdownFormatterǁformat__mutmut_95,
        "xǁMarkdownFormatterǁformat__mutmut_96": xǁMarkdownFormatterǁformat__mutmut_96,
        "xǁMarkdownFormatterǁformat__mutmut_97": xǁMarkdownFormatterǁformat__mutmut_97,
        "xǁMarkdownFormatterǁformat__mutmut_98": xǁMarkdownFormatterǁformat__mutmut_98,
        "xǁMarkdownFormatterǁformat__mutmut_99": xǁMarkdownFormatterǁformat__mutmut_99,
        "xǁMarkdownFormatterǁformat__mutmut_100": xǁMarkdownFormatterǁformat__mutmut_100,
        "xǁMarkdownFormatterǁformat__mutmut_101": xǁMarkdownFormatterǁformat__mutmut_101,
        "xǁMarkdownFormatterǁformat__mutmut_102": xǁMarkdownFormatterǁformat__mutmut_102,
        "xǁMarkdownFormatterǁformat__mutmut_103": xǁMarkdownFormatterǁformat__mutmut_103,
        "xǁMarkdownFormatterǁformat__mutmut_104": xǁMarkdownFormatterǁformat__mutmut_104,
        "xǁMarkdownFormatterǁformat__mutmut_105": xǁMarkdownFormatterǁformat__mutmut_105,
        "xǁMarkdownFormatterǁformat__mutmut_106": xǁMarkdownFormatterǁformat__mutmut_106,
        "xǁMarkdownFormatterǁformat__mutmut_107": xǁMarkdownFormatterǁformat__mutmut_107,
        "xǁMarkdownFormatterǁformat__mutmut_108": xǁMarkdownFormatterǁformat__mutmut_108,
        "xǁMarkdownFormatterǁformat__mutmut_109": xǁMarkdownFormatterǁformat__mutmut_109,
    }

    def format(self, *args, **kwargs):
        result = _mutmut_trampoline(
            object.__getattribute__(self, "xǁMarkdownFormatterǁformat__mutmut_orig"),
            object.__getattribute__(self, "xǁMarkdownFormatterǁformat__mutmut_mutants"),
            args,
            kwargs,
            self,
        )
        return result

    format.__signature__ = _mutmut_signature(xǁMarkdownFormatterǁformat__mutmut_orig)
    xǁMarkdownFormatterǁformat__mutmut_orig.__name__ = "xǁMarkdownFormatterǁformat"


def x_get_formatter__mutmut_orig(format_name: str) -> SchemaFormatter:
    """Get formatter by name.

    Args:
        format_name: Name of formatter (human, json, yaml, markdown)

    Returns:
        Formatter instance

    Raises:
        ValueError: If format name is unknown

    """
    formatters: dict[str, SchemaFormatter] = {
        "human": HumanFormatter(),
        "json": JSONFormatter(),
        "yaml": YAMLFormatter(),
        "markdown": MarkdownFormatter(),
    }

    formatter = formatters.get(format_name)
    if not formatter:
        raise ValueError(f"Unknown format: {format_name}. Must be one of: {', '.join(formatters.keys())}")

    return formatter


def x_get_formatter__mutmut_1(format_name: str) -> SchemaFormatter:
    """Get formatter by name.

    Args:
        format_name: Name of formatter (human, json, yaml, markdown)

    Returns:
        Formatter instance

    Raises:
        ValueError: If format name is unknown

    """
    formatters: dict[str, SchemaFormatter] = None

    formatter = formatters.get(format_name)
    if not formatter:
        raise ValueError(f"Unknown format: {format_name}. Must be one of: {', '.join(formatters.keys())}")

    return formatter


def x_get_formatter__mutmut_2(format_name: str) -> SchemaFormatter:
    """Get formatter by name.

    Args:
        format_name: Name of formatter (human, json, yaml, markdown)

    Returns:
        Formatter instance

    Raises:
        ValueError: If format name is unknown

    """
    formatters: dict[str, SchemaFormatter] = {
        "XXhumanXX": HumanFormatter(),
        "json": JSONFormatter(),
        "yaml": YAMLFormatter(),
        "markdown": MarkdownFormatter(),
    }

    formatter = formatters.get(format_name)
    if not formatter:
        raise ValueError(f"Unknown format: {format_name}. Must be one of: {', '.join(formatters.keys())}")

    return formatter


def x_get_formatter__mutmut_3(format_name: str) -> SchemaFormatter:
    """Get formatter by name.

    Args:
        format_name: Name of formatter (human, json, yaml, markdown)

    Returns:
        Formatter instance

    Raises:
        ValueError: If format name is unknown

    """
    formatters: dict[str, SchemaFormatter] = {
        "HUMAN": HumanFormatter(),
        "json": JSONFormatter(),
        "yaml": YAMLFormatter(),
        "markdown": MarkdownFormatter(),
    }

    formatter = formatters.get(format_name)
    if not formatter:
        raise ValueError(f"Unknown format: {format_name}. Must be one of: {', '.join(formatters.keys())}")

    return formatter


def x_get_formatter__mutmut_4(format_name: str) -> SchemaFormatter:
    """Get formatter by name.

    Args:
        format_name: Name of formatter (human, json, yaml, markdown)

    Returns:
        Formatter instance

    Raises:
        ValueError: If format name is unknown

    """
    formatters: dict[str, SchemaFormatter] = {
        "human": HumanFormatter(),
        "XXjsonXX": JSONFormatter(),
        "yaml": YAMLFormatter(),
        "markdown": MarkdownFormatter(),
    }

    formatter = formatters.get(format_name)
    if not formatter:
        raise ValueError(f"Unknown format: {format_name}. Must be one of: {', '.join(formatters.keys())}")

    return formatter


def x_get_formatter__mutmut_5(format_name: str) -> SchemaFormatter:
    """Get formatter by name.

    Args:
        format_name: Name of formatter (human, json, yaml, markdown)

    Returns:
        Formatter instance

    Raises:
        ValueError: If format name is unknown

    """
    formatters: dict[str, SchemaFormatter] = {
        "human": HumanFormatter(),
        "JSON": JSONFormatter(),
        "yaml": YAMLFormatter(),
        "markdown": MarkdownFormatter(),
    }

    formatter = formatters.get(format_name)
    if not formatter:
        raise ValueError(f"Unknown format: {format_name}. Must be one of: {', '.join(formatters.keys())}")

    return formatter


def x_get_formatter__mutmut_6(format_name: str) -> SchemaFormatter:
    """Get formatter by name.

    Args:
        format_name: Name of formatter (human, json, yaml, markdown)

    Returns:
        Formatter instance

    Raises:
        ValueError: If format name is unknown

    """
    formatters: dict[str, SchemaFormatter] = {
        "human": HumanFormatter(),
        "json": JSONFormatter(),
        "XXyamlXX": YAMLFormatter(),
        "markdown": MarkdownFormatter(),
    }

    formatter = formatters.get(format_name)
    if not formatter:
        raise ValueError(f"Unknown format: {format_name}. Must be one of: {', '.join(formatters.keys())}")

    return formatter


def x_get_formatter__mutmut_7(format_name: str) -> SchemaFormatter:
    """Get formatter by name.

    Args:
        format_name: Name of formatter (human, json, yaml, markdown)

    Returns:
        Formatter instance

    Raises:
        ValueError: If format name is unknown

    """
    formatters: dict[str, SchemaFormatter] = {
        "human": HumanFormatter(),
        "json": JSONFormatter(),
        "YAML": YAMLFormatter(),
        "markdown": MarkdownFormatter(),
    }

    formatter = formatters.get(format_name)
    if not formatter:
        raise ValueError(f"Unknown format: {format_name}. Must be one of: {', '.join(formatters.keys())}")

    return formatter


def x_get_formatter__mutmut_8(format_name: str) -> SchemaFormatter:
    """Get formatter by name.

    Args:
        format_name: Name of formatter (human, json, yaml, markdown)

    Returns:
        Formatter instance

    Raises:
        ValueError: If format name is unknown

    """
    formatters: dict[str, SchemaFormatter] = {
        "human": HumanFormatter(),
        "json": JSONFormatter(),
        "yaml": YAMLFormatter(),
        "XXmarkdownXX": MarkdownFormatter(),
    }

    formatter = formatters.get(format_name)
    if not formatter:
        raise ValueError(f"Unknown format: {format_name}. Must be one of: {', '.join(formatters.keys())}")

    return formatter


def x_get_formatter__mutmut_9(format_name: str) -> SchemaFormatter:
    """Get formatter by name.

    Args:
        format_name: Name of formatter (human, json, yaml, markdown)

    Returns:
        Formatter instance

    Raises:
        ValueError: If format name is unknown

    """
    formatters: dict[str, SchemaFormatter] = {
        "human": HumanFormatter(),
        "json": JSONFormatter(),
        "yaml": YAMLFormatter(),
        "MARKDOWN": MarkdownFormatter(),
    }

    formatter = formatters.get(format_name)
    if not formatter:
        raise ValueError(f"Unknown format: {format_name}. Must be one of: {', '.join(formatters.keys())}")

    return formatter


def x_get_formatter__mutmut_10(format_name: str) -> SchemaFormatter:
    """Get formatter by name.

    Args:
        format_name: Name of formatter (human, json, yaml, markdown)

    Returns:
        Formatter instance

    Raises:
        ValueError: If format name is unknown

    """
    formatters: dict[str, SchemaFormatter] = {
        "human": HumanFormatter(),
        "json": JSONFormatter(),
        "yaml": YAMLFormatter(),
        "markdown": MarkdownFormatter(),
    }

    formatter = None
    if not formatter:
        raise ValueError(f"Unknown format: {format_name}. Must be one of: {', '.join(formatters.keys())}")

    return formatter


def x_get_formatter__mutmut_11(format_name: str) -> SchemaFormatter:
    """Get formatter by name.

    Args:
        format_name: Name of formatter (human, json, yaml, markdown)

    Returns:
        Formatter instance

    Raises:
        ValueError: If format name is unknown

    """
    formatters: dict[str, SchemaFormatter] = {
        "human": HumanFormatter(),
        "json": JSONFormatter(),
        "yaml": YAMLFormatter(),
        "markdown": MarkdownFormatter(),
    }

    formatter = formatters.get(None)
    if not formatter:
        raise ValueError(f"Unknown format: {format_name}. Must be one of: {', '.join(formatters.keys())}")

    return formatter


def x_get_formatter__mutmut_12(format_name: str) -> SchemaFormatter:
    """Get formatter by name.

    Args:
        format_name: Name of formatter (human, json, yaml, markdown)

    Returns:
        Formatter instance

    Raises:
        ValueError: If format name is unknown

    """
    formatters: dict[str, SchemaFormatter] = {
        "human": HumanFormatter(),
        "json": JSONFormatter(),
        "yaml": YAMLFormatter(),
        "markdown": MarkdownFormatter(),
    }

    formatter = formatters.get(format_name)
    if formatter:
        raise ValueError(f"Unknown format: {format_name}. Must be one of: {', '.join(formatters.keys())}")

    return formatter


def x_get_formatter__mutmut_13(format_name: str) -> SchemaFormatter:
    """Get formatter by name.

    Args:
        format_name: Name of formatter (human, json, yaml, markdown)

    Returns:
        Formatter instance

    Raises:
        ValueError: If format name is unknown

    """
    formatters: dict[str, SchemaFormatter] = {
        "human": HumanFormatter(),
        "json": JSONFormatter(),
        "yaml": YAMLFormatter(),
        "markdown": MarkdownFormatter(),
    }

    formatter = formatters.get(format_name)
    if not formatter:
        raise ValueError(None)

    return formatter


def x_get_formatter__mutmut_14(format_name: str) -> SchemaFormatter:
    """Get formatter by name.

    Args:
        format_name: Name of formatter (human, json, yaml, markdown)

    Returns:
        Formatter instance

    Raises:
        ValueError: If format name is unknown

    """
    formatters: dict[str, SchemaFormatter] = {
        "human": HumanFormatter(),
        "json": JSONFormatter(),
        "yaml": YAMLFormatter(),
        "markdown": MarkdownFormatter(),
    }

    formatter = formatters.get(format_name)
    if not formatter:
        raise ValueError(f"Unknown format: {format_name}. Must be one of: {', '.join(None)}")

    return formatter


def x_get_formatter__mutmut_15(format_name: str) -> SchemaFormatter:
    """Get formatter by name.

    Args:
        format_name: Name of formatter (human, json, yaml, markdown)

    Returns:
        Formatter instance

    Raises:
        ValueError: If format name is unknown

    """
    formatters: dict[str, SchemaFormatter] = {
        "human": HumanFormatter(),
        "json": JSONFormatter(),
        "yaml": YAMLFormatter(),
        "markdown": MarkdownFormatter(),
    }

    formatter = formatters.get(format_name)
    if not formatter:
        raise ValueError(f"Unknown format: {format_name}. Must be one of: {'XX, XX'.join(formatters.keys())}")

    return formatter


x_get_formatter__mutmut_mutants: ClassVar[MutantDict] = {
    "x_get_formatter__mutmut_1": x_get_formatter__mutmut_1,
    "x_get_formatter__mutmut_2": x_get_formatter__mutmut_2,
    "x_get_formatter__mutmut_3": x_get_formatter__mutmut_3,
    "x_get_formatter__mutmut_4": x_get_formatter__mutmut_4,
    "x_get_formatter__mutmut_5": x_get_formatter__mutmut_5,
    "x_get_formatter__mutmut_6": x_get_formatter__mutmut_6,
    "x_get_formatter__mutmut_7": x_get_formatter__mutmut_7,
    "x_get_formatter__mutmut_8": x_get_formatter__mutmut_8,
    "x_get_formatter__mutmut_9": x_get_formatter__mutmut_9,
    "x_get_formatter__mutmut_10": x_get_formatter__mutmut_10,
    "x_get_formatter__mutmut_11": x_get_formatter__mutmut_11,
    "x_get_formatter__mutmut_12": x_get_formatter__mutmut_12,
    "x_get_formatter__mutmut_13": x_get_formatter__mutmut_13,
    "x_get_formatter__mutmut_14": x_get_formatter__mutmut_14,
    "x_get_formatter__mutmut_15": x_get_formatter__mutmut_15,
}


def get_formatter(*args, **kwargs):
    result = _mutmut_trampoline(x_get_formatter__mutmut_orig, x_get_formatter__mutmut_mutants, args, kwargs)
    return result


get_formatter.__signature__ = _mutmut_signature(x_get_formatter__mutmut_orig)
x_get_formatter__mutmut_orig.__name__ = "x_get_formatter"


# <3 🧱🤝⚙️🪄
