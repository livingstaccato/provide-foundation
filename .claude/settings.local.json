{
  "permissions": {
    "allow": [
      "Bash(PYTHONPATH=src .venv/bin/ruff format /Users/tim/code/gh/provide-io/provide-testkit/src/provide/testkit/streams.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes /Users/tim/code/gh/provide-io/provide-testkit/src/provide/testkit/streams.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/integration/test_integration_coverage_100.py::test_log_file_redirection -xvs --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_config_sync_simple.py::TestSyncModuleCoverage::test_load_config_from_env_parameters -xvs)",
      "Bash(PYTHONPATH=src python:*)",
      "Bash(PYTHONPATH=src grep -n -A 50 \"async def from_env_async\" /Users/tim/code/gh/provide-io/provide-foundation/src/provide/foundation/config/env.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/config/env.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/config/env.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/config/env.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_config_sync_simple.py::TestSyncModuleCoverage::test_load_config_from_env_parameters tests/integration/test_integration_coverage_100.py::test_log_file_redirection -v)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/streams/core.py src/provide/foundation/streams/file.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/streams/core.py src/provide/foundation/streams/file.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/streams/core.py src/provide/foundation/streams/file.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/integration/test_integration_coverage_100.py::test_log_file_redirection -v)",
      "Bash(PYTHONPATH=src grep -n \"is_in_click_testing\" src/provide/foundation/streams/file.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/integration/test_integration_coverage_100.py::test_log_file_redirection -v -s)",
      "Bash(PYTHONPATH=src grep -r \"configure_file_logging\" src/provide/foundation/ --include=\"*.py\")",
      "Bash(PYTHONPATH=src grep -n -A 10 -B 5 \"configure_file_logging\" src/provide/foundation/logger/setup/coordinator.py)",
      "Bash(PYTHONPATH=src grep -n -A 15 \"def configure_structlog_output\" src/provide/foundation/logger/setup/)",
      "Bash(PYTHONPATH=src grep -r -n -A 15 \"def configure_structlog_output\" src/provide/foundation/logger/setup/)",
      "Bash(PYTHONPATH=src grep -r -n -A 10 \"def apply_structlog_configuration\" src/provide/foundation/logger/setup/)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/streams/file.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/streams/file.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/streams/file.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/streams/ --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_config_env.py::TestRuntimeConfigClass::test_from_env_with_prefix -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_config_env.py::TestRuntimeConfigClass -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/ --tb=short -q --maxfail=5)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_config_sync_simple.py::TestSyncModuleCoverage::test_load_config_from_env_parameters -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_config_env.py::TestRuntimeConfigClass -v)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/config/test_config_sync_simple.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes tests/config/test_config_sync_simple.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_config_env.py tests/config/test_config_sync_simple.py::TestSyncModuleCoverage::test_load_config_from_env_parameters --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/integration/test_integration_core.py::test_configuration_from_environment -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/integration/test_integration_core.py::test_explicit_configuration_override tests/integration/test_integration_core.py::test_foundation_testbed_integration tests/integration/test_integration_coverage_100.py::test_log_level_case_insensitivity tests/integration/test_integration_coverage_100.py::test_no_color_env_var --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/integration/test_integration_coverage_100.py::test_shutdown_and_reinit tests/integration/test_integration_coverage_100.py::test_json_formatter_from_env tests/logger/test_logger_production_compliance.py::TestProductionReadinessScenarios::test_high_throughput_scenario --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/logger/test_logger_production_compliance.py::TestProductionReadinessScenarios::test_high_throughput_scenario tests/integration/test_integration_core.py::test_configuration_from_environment tests/integration/test_integration_core.py::test_explicit_configuration_override tests/integration/test_integration_core.py::test_foundation_testbed_integration tests/integration/test_integration_coverage_100.py::test_log_level_case_insensitivity tests/integration/test_integration_coverage_100.py::test_shutdown_and_reinit tests/integration/test_integration_coverage_100.py::test_json_formatter_from_env tests/integration/test_integration_coverage_100.py::test_no_color_env_var -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/integration/test_integration_core.py::test_foundation_testbed_integration -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/logger/test_logger_production_compliance.py::TestProductionReadinessScenarios::test_high_throughput_scenario tests/integration/test_integration_core.py::test_configuration_from_environment tests/integration/test_integration_core.py::test_explicit_configuration_override tests/integration/test_integration_core.py::test_foundation_testbed_integration tests/integration/test_integration_coverage_100.py::test_log_level_case_insensitivity tests/integration/test_integration_coverage_100.py::test_shutdown_and_reinit tests/integration/test_integration_coverage_100.py::test_json_formatter_from_env tests/integration/test_integration_coverage_100.py::test_no_color_env_var --tb=short -q)",
      "Read(//private/tmp/**)",
      "Bash(env)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/integration/test_integration_core.py::test_basic_initialization_and_logging -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/integration/test_integration_core.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes tests/integration/test_integration_core.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/integration/test_integration_core.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_config_env.py -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_config_loader.py -v)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check tests/config/test_config_loader.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/ --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/python:*)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_config_manager_coverage.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_config_manager_coverage.py -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/ -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/config/ tests/config/)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/config/)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/config/ tests/config/)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/config/ --ignore-missing-imports)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/config/)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/config/)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_schema_field.py::TestSchemaFieldEdgeCases::test_validate_complex_nested_validation -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_schema_simple_coverage.py::TestValidators::test_validate_url_accessible tests/config/test_schema_validators.py::TestBuiltinValidators::test_validate_url_accessible tests/config/test_schema_config.py::TestConfigSchemaComprehensive::test_validate_all_required_fields_present -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_schema_simple_coverage.py::TestValidators::test_validate_url_accessible tests/config/test_schema_validators.py::TestBuiltinValidators::test_validate_url_accessible tests/config/test_schema_config.py -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_schema_field.py::TestSchemaFieldComprehensive::test_validate_sync_validator_fail_2 -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_schema_field.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_config_env.py tests/config/test_config_manager_coverage.py -q --tb=line)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_schema*.py -q)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/config/test_schema_field.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/config/defaults.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/resilience/retry.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/resilience/retry.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/crypto/certificates/certificate.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/tracer/spans.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/tracer/spans.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/transport/middleware.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/transport/middleware.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/state/_internal/transitions.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/state/_internal/transitions.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/conftest.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/config/defaults.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/ -q --tb=short --maxfail=5)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/crypto/certificates/generator.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/crypto/certificates/generator.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/crypto/certificates/generator.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/logger/types.py src/provide/foundation/config/types.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/crypto/ -v --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/ -v --tb=short -q --maxfail=5)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/logger/types.py src/provide/foundation/config/types.py src/provide/foundation/crypto/certificates/generator.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_rate_limiting.py::TestTokenBucketRateLimiter::test_extreme_time_precision -xvs --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_rate_limiting.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_rate_limiting.py::TestTokenBucketRateLimiter::test_extreme_time_precision -n auto --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/ -n auto --tb=short --maxfail=1)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_rate_limiting.py::TestTokenBucketRateLimiter::test_extreme_time_precision tests/config/ tests/integration/ -n auto --tb=short --maxfail=1)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/ -k \"concurrency or timing or precision or thread\" --collect-only -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_rate_limiting.py::TestTokenBucketRateLimiter::test_extreme_time_precision tests/concurrency/ tests/hub/test_hub_thread_safety.py tests/logger/ratelimit/ tests/utils/test_utils_timing.py -n auto --tb=short --maxfail=1)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes /Users/tim/code/gh/provide-io/provide-foundation/src/provide/foundation/hub/foundation.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/process/test_process_runner_coverage.py::TestProcessRunnerCoverage::test_stream_command_timeout_handling -xvs --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/config/test_config_loader.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes tests/config/test_config_loader.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/config/test_config_loader.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_config_loader.py::TestFileConfigLoader::test_load_resilient_decorator -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_config_loader.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_config_loader.py::TestMultiSourceLoader::test_load_merge_sources -v)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/crypto/test_crypto_stubs.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes tests/crypto/test_crypto_stubs.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/crypto/test_crypto_stubs.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/crypto/test_crypto_stubs.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/file/test_file_operations.py -v)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/file/test_file_operations.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes tests/file/test_file_operations.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/file/test_file_operations.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/file/test_file_operations.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/transport/test_middleware_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes tests/transport/test_middleware_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/transport/test_middleware_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/transport/test_middleware_coverage.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/state/test_transitions_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes tests/state/test_transitions_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/state/test_transitions_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/state/test_transitions_coverage.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/state/test_transitions_coverage.py::TestCircuitBreakerStateMachineEdgeCases::test_transitions_from_all_states_to_reset -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/resilience/test_retry_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes tests/resilience/test_retry_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/resilience/test_retry_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/resilience/test_retry_coverage.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/resilience/test_retry_coverage.py::TestRetryPolicyEdgeCases::test_unknown_backoff_strategy_fallback -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest -x --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/crypto/ -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/crypto/ -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest --cov=src/provide/foundation --cov-report=term-missing --cov-report=html -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest --cov=src/provide/foundation --cov-report=term-missing --tb=no -x --maxfail=1 tests/config/ tests/file/ tests/transport/ tests/state/ tests/resilience/ -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/archive/test_operations.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_formatting_coverage.py -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_formatting_coverage.py -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_parsing_coverage.py -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_parsing_coverage.py -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_timing_coverage.py -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_rate_limiting_coverage.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_rate_limiting_coverage.py -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/ --cov=src/provide/foundation/utils --cov-report=term-missing -q --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/resilience/test_retry_coverage.py tests/file/test_file_operations.py tests/transport/test_middleware_coverage.py --cov=src/provide/foundation --cov-report=term-missing -q --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_formatting_coverage.py tests/utils/test_parsing_coverage.py tests/utils/test_timing_coverage.py tests/utils/test_rate_limiting_coverage.py --cov=src/provide/foundation/utils --cov-report=term-missing -v)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/utils/test_deps_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes tests/utils/test_deps_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/utils/test_deps_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_deps_coverage.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_deps_coverage.py::TestCheckClick::test_check_click_version_exception -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_deps_coverage.py::TestCheckOpenTelemetry -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_deps_coverage.py -q --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_deps_coverage.py --cov=src/provide/foundation/utils/deps --cov-report=term-missing -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_deps_coverage.py tests/utils/test_formatting_coverage.py tests/utils/test_parsing_coverage.py tests/utils/test_timing_coverage.py tests/utils/test_rate_limiting_coverage.py --cov=src/provide/foundation/utils --cov-report=term-missing -q --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_streams_coverage.py --cov=src/provide/foundation/utils/streams --cov-report=term-missing -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_deps_coverage.py tests/utils/test_formatting_coverage.py tests/utils/test_parsing_coverage.py tests/utils/test_timing_coverage.py tests/utils/test_rate_limiting_coverage.py tests/utils/test_streams_coverage.py --cov=src/provide/foundation/utils --cov-report=term-missing -q --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest --cov=src/provide/foundation --cov-report=term-missing --cov-report=html -q --maxfail=5 tests/config/ tests/file/ tests/transport/ tests/state/ tests/resilience/ tests/utils/test_deps_coverage.py tests/utils/test_formatting_coverage.py tests/utils/test_parsing_coverage.py tests/utils/test_timing_coverage.py tests/utils/test_rate_limiting_coverage.py tests/utils/test_streams_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_utils_deps_coverage.py -q --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_utils_deps_coverage.py tests/utils/test_formatting_coverage.py tests/utils/test_parsing_coverage.py tests/utils/test_timing_coverage.py tests/utils/test_rate_limiting_coverage.py tests/utils/test_streams_coverage.py --cov=src/provide/foundation/utils --cov-report=term-missing -q --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest --cov=src/provide/foundation --cov-report=term:skip-covered --cov-report=html -q --tb=no)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/utils/test_environment_getters_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes tests/utils/test_environment_getters_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_environment_getters_coverage.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/utils/test_environment_getters_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/utils/test_environment_getters_coverage.py --ignore-missing-imports)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_environment_getters_coverage.py --cov=src/provide/foundation/utils/environment/getters --cov-report=term-missing -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_environment_getters_coverage.py --cov=src/provide/foundation/utils --cov-report=term-missing -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_environment_parsers_coverage.py -v --tb=short)",
      "Bash(python3:*)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/utils/test_environment_parsers_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes tests/utils/test_environment_parsers_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/utils/test_environment_parsers_coverage.py --ignore-missing-imports)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_environment_parsers_coverage.py --cov=src/provide/foundation/utils/environment/parsers --cov-report=term-missing -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_environment_parsers_coverage.py --cov=src/provide/foundation/utils --cov-report=term-missing -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_environment_prefix_coverage.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/utils/test_environment_prefix_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes tests/utils/test_environment_prefix_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/utils/test_environment_prefix_coverage.py --ignore-missing-imports)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_environment_prefix_coverage.py --cov=src/provide/foundation/utils --cov-report=term-missing -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_environment_getters_coverage.py tests/utils/test_environment_parsers_coverage.py tests/utils/test_environment_prefix_coverage.py --cov=src/provide/foundation/utils --cov-report=term-missing -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/ --cov=src/provide/foundation/utils --cov-report=term-missing -q --tb=short --maxfail=3)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_config_manager_coverage.py --cov=src/provide/foundation/config/manager --cov-report=term-missing -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_config_manager_coverage.py --cov=src/provide/foundation/config --cov-report=term-missing -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/ --cov=src/provide/foundation --cov-report=term:skip-covered --tb=no -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils tests/config/test_config_manager_coverage.py --cov=src/provide/foundation --cov-report=term-missing --tb=no -q)",
      "Bash(sort:*)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils --cov=src/provide/foundation --cov-report=term-missing --tb=no -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest --cov=src/provide/foundation/utils --cov-report=term-missing -q --tb=no)",
      "Bash(PYTHONPATH=src .venv/bin/pytest --cov=src/provide/foundation/utils --cov-report=term --tb=no -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_formatting_coverage.py tests/utils/test_timing_coverage.py tests/utils/test_streams_coverage.py tests/utils/test_rate_limiting_coverage.py --cov=src/provide/foundation/utils --cov-report=term --tb=no -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/ --cov=src/provide/foundation/utils --cov-report=term-missing --tb=no -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/ --cov=src/provide/foundation/utils --cov-report=term --tb=no -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest --cov=src/provide/foundation --cov-report=term --tb=no -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest --cov=src/provide/foundation --cov-report=term:skip-covered --tb=no -x --maxfail=1 tests/config/ tests/file/ tests/transport/ tests/state/ tests/resilience/ tests/utils/ -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_environment_getters_coverage.py tests/utils/test_environment_parsers_coverage.py tests/utils/test_environment_prefix_coverage.py tests/utils/test_utils_deps_coverage.py tests/utils/test_formatting_coverage.py tests/utils/test_timing_coverage.py tests/utils/test_streams_coverage.py tests/utils/test_rate_limiting_coverage.py --cov=src/provide/foundation/utils --cov-report=term --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_environment_getters_coverage.py tests/utils/test_environment_parsers_coverage.py tests/utils/test_environment_prefix_coverage.py tests/utils/test_utils_deps_coverage.py --cov=src/provide/foundation/utils/environment --cov=src/provide/foundation/utils/deps.py --cov-report=term-missing -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_environment_getters_coverage.py --cov=src/provide/foundation/utils/environment/getters.py --cov-report=term-missing --tb=no -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_environment_getters_coverage.py --cov=src/provide/foundation/utils/environment/getters.py --cov-report=term --tb=no -q)",
      "Bash(echo $SHELL)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/formatting/test_grouping_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes tests/formatting/test_grouping_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/formatting/test_grouping_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/formatting/test_grouping_coverage.py --ignore-missing-imports)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/formatting/test_grouping_coverage.py --cov=src/provide/foundation/formatting/grouping.py --cov-report=term-missing -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/formatting/test_grouping_coverage.py --cov=src/provide/foundation/formatting/grouping.py --cov-report=term-missing --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/formatting/test_grouping_coverage.py --cov=src/provide/foundation/formatting --cov-report=term-missing --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/observability/test_observability_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes tests/observability/test_observability_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/observability/test_observability_coverage.py --ignore-missing-imports)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/formatting/test_grouping_coverage.py tests/observability/test_observability_coverage.py --cov=src/provide/foundation/formatting/grouping.py --cov=src/provide/foundation/observability/__init__.py --cov-report=term-missing --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/observability/test_observability_coverage.py --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/formatting/test_grouping_coverage.py --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/env/test_env_types_coverage.py tests/docs/test_docs_init_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes tests/env/test_env_types_coverage.py tests/docs/test_docs_init_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/env/test_env_types_coverage.py tests/docs/test_docs_init_coverage.py --ignore-missing-imports)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/process/test_lifecycle.py::TestManagedProcess::test_launch_twice_raises_error -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/context/test_context_core.py::TestContext::test_context_immutable_after_freeze -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/context/ -x)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/process/ -x)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/process/lifecycle.py src/provide/foundation/process/runner.py src/provide/foundation/hub/initialization.py src/provide/foundation/integrations/openobserve/streaming.py src/provide/foundation/resilience/decorators.py src/provide/foundation/context/core.py tests/context/test_context_core.py tests/process/test_lifecycle.py tests/process/test_lifecycle_comprehensive_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check:*)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/process/test_lifecycle.py tests/context/test_context_core.py::TestContext::test_context_immutable_after_freeze -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/observability/test_observability_coverage.py::TestObservabilityModule::test_has_otel_detection_with_otel -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/observability/test_observability_coverage.py -n auto --maxfail=1 -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/env/test_env_types_coverage.py::TestEnvTypes::test_env_parser_type_alias -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/env/test_env_types_coverage.py::TestEnvTypes::test_env_parser_type_alias tests/resilience/test_retry_decorator.py::TestRetryDecoratorParameterValidation::test_conflicting_parameters tests/hub/test_hub_context.py::TestContext::test_context_immutable_after_freeze -v)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/env/test_env_types_coverage.py tests/resilience/test_retry_decorator.py tests/hub/test_hub_context.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/env/test_env_types_coverage.py tests/hub/test_hub_context.py --ignore-missing-imports)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/env/test_env_types_coverage.py::TestEnvTypes::test_env_parser_type_alias tests/resilience/test_retry_decorator.py::TestRetryDecoratorParameterValidation::test_conflicting_parameters tests/hub/test_hub_context.py::TestContext::test_context_immutable_after_freeze -x --tb=short)",
      "Bash(PYTHONPATH=src pytest tests/config/test_config_env.py::TestRuntimeConfigClass::test_from_env_with_prefix -v --tb=short)",
      "Bash(PYTHONPATH=src pytest tests/cli/test_cli_integration.py::TestCompleteCliIntegration::test_json_output_with_errors -v --tb=short)",
      "Bash(PYTHONPATH=src pytest tests/cli/test_cli_integration.py -v --collect-only)",
      "Bash(PYTHONPATH=src pytest tests/cli/test_cli_integration.py --collect-only)",
      "Bash(PYTHONPATH=src pytest tests/cli/test_cli_integration.py::TestOutputFormatting::test_json_output_format -v --tb=short)",
      "Bash(PYTHONPATH=src pytest tests/resilience/test_retry_executor.py::TestRetryExecutorSync::test_delay_between_retries -v --tb=short)",
      "Bash(PYTHONPATH=src pytest tests/context/test_context_core.py::TestContext::test_context_initialization -v --tb=short)",
      "Bash(PYTHONPATH=src pytest tests/resilience/test_retry_executor.py::TestRetryExecutorSync::test_successful_first_attempt -v --tb=short)",
      "Bash(PYTHONPATH=src pytest tests/formatting/test_grouping_coverage.py::TestFormatGrouped::test_format_grouped_basic -v --tb=short)",
      "Bash(PYTHONPATH=src pytest tests/resilience/test_retry_executor.py::TestRetryExecutorAsync::test_delay_between_retries -v --tb=short)",
      "Bash(xargs dirname:*)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_environment.py -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_deps.py -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_environment_getters_coverage.py -v)",
      "Bash(PYTHONPATH=src .venv/bin/rg \"^class Test\" tests/utils/test_environment_prefix_coverage.py tests/utils/test_environment_parsers_coverage.py tests/utils/test_utils_deps_coverage.py -n)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_environment_prefix_coverage.py --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_environment_parsers_coverage.py tests/utils/test_utils_deps_coverage.py --tb=short -q)",
      "Bash(then echo \"$file\")",
      "Bash(fi)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_formatting.py --tb=short -q)",
      "Bash(then echo \"Need to update: $file\")",
      "Bash([ \"$file\" != \"tests/config/test_config_logger.py\" ])",
      "Bash(then echo \"=== $file ===\")",
      "Bash(head:*)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_config_manager_coverage.py tests/config/test_schema_validators.py tests/config/test_validators_coverage.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_config_manager_coverage.py -q --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_schema_config.py tests/config/test_schema_field.py tests/config/test_config_manager_coverage.py tests/config/test_schema_validators.py tests/config/test_validators_coverage.py -q --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_config_manager.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/ -q --tb=short --maxfail=5)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/ --collect-only -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_rate_limiting_coverage.py::TestTokenBucketRateLimiter::test_is_allowed_refill_over_time -xvs --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_rate_limiting_coverage.py -q --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/utils/test_rate_limiting_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/utils/test_rate_limiting_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_rate_limiting_coverage.py::TestTokenBucketRateLimiter::test_is_allowed_refill_over_time -n auto --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/state/test_state_management.py::TestCircuitBreaker -xvs --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/state/test_state_management.py::TestCircuitBreaker -q --tb=no)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/state/test_state_management.py::TestCircuitBreaker -q --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/state/test_state_management.py::TestCircuitBreaker::test_open_to_half_open_after_timeout -xvs --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/state/test_state_management.py::TestCircuitBreaker -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/process/test_lifecycle.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/state/test_state_management.py tests/process/test_lifecycle.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/state/test_state_management.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/state/test_state_management.py::TestCircuitBreaker::test_half_open_success_closes_circuit -xvs --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/process/test_lifecycle_comprehensive_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/process/test_lifecycle_comprehensive_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/process/test_lifecycle_comprehensive_coverage.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/errors/test_integration.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/state/test_transitions_coverage.py::TestCircuitBreakerStateMachineEdgeCases::test_guard_function_behavior -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/state/test_transitions_coverage.py::TestCircuitBreakerStateMachineEdgeCases::test_transitions_from_all_states_to_reset tests/state/test_transitions_coverage.py::TestCircuitBreakerStateMachineEdgeCases::test_attempt_reset_action_method -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/errors/test_integration.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/errors/test_integration.py::TestErrorSystemIntegration::test_retry_with_circuit_breaker -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/hub/test_hub_async_support.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/hub/test_hub_async_support.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/hub/test_hub_thread_safety.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/hub/test_hub_thread_safety.py::TestRegistryThreadSafety::test_concurrent_registration -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/hub/test_hub_thread_safety.py::TestRegistryThreadSafety::test_concurrent_registration -v --tb=short -m slow)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/state/test_state_management.py tests/process/test_lifecycle.py tests/errors/test_integration.py --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/state/test_transitions_coverage.py::TestCircuitBreakerStateEdgeCases::test_should_attempt_reset_conditions -xvs --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/state/test_transitions_coverage.py::TestCircuitBreakerStateEdgeCases::test_should_attempt_reset_conditions -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/state/test_transitions_coverage.py::TestCircuitBreakerStateEdgeCases::test_attempt_reset_conditions -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/testing/test_testing_fixtures.py tests/testing/test_testing_cli.py --collect-only -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/ --collect-only -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/process/test_lifecycle.py::TestManagedProcess::test_read_line_async_timeout -v --timeout=10)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/process/test_lifecycle.py::TestManagedProcess::test_read_line_async_timeout -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/process/test_lifecycle.py -v --tb=short -x)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/process/test_lifecycle.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/errors/test_safe_decorators_coverage.py::TestSafeDecoratorsCoverage::test_log_only_error_context_async_function_success -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/errors/test_safe_decorators_coverage.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/errors/test_safe_decorators_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/ -k \"async\" -v --tb=short -x)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/process/test_async_runner_coverage.py::TestAsyncContextualBehavior::test_async_cancel_during_execution -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/process/test_async_runner_coverage.py::TestAsyncContextualBehavior -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/process/test_async_runner_coverage.py::TestAsyncStreamCommandCoverage::test_async_stream_command_timeout -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/process/test_async_runner_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/process/test_async_runner_coverage.py -k \"async_cancel_during_execution or async_stream_command_timeout\" -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/ -k \"async\" -v --tb=short --maxfail=3 -x)",
      "Bash(PYTHONPATH=src grep -r \"asyncio.sleep\" tests/ --include=\"*.py\")",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/concurrency/test_async_core.py::TestAsyncSleep::test_async_sleep_cancellation -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/utils/test_rate_limiting.py tests/utils/test_rate_limiting_coverage.py tests/process/test_async_runner_comprehensive_coverage.py tests/process/test_async_runner_coverage.py tests/process/test_lifecycle.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_rate_limiting.py::TestTokenBucketRateLimiter::test_refill_over_time -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_rate_limiting.py --collect-only -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_rate_limiting.py::TestTokenBucketRateLimiter::test_refill_rate -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_rate_limiting.py -v --tb=short --maxfail=1)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_rate_limiting_coverage.py::TestTokenBucketRateLimiter::test_is_allowed_refill_over_time -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_rate_limiting.py::TestTokenBucketRateLimiter::test_token_refill_over_time -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_rate_limiting.py -v --tb=short --maxfail=3)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/file/test_lock.py::test_file_lock_invalid_lock_content -v --tb=short --timeout=10)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/file/test_lock.py::test_file_lock_invalid_lock_content -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/file/test_lock.py --collect-only -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/file/test_lock.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/file/test_lock.py tests/utils/test_rate_limiting.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/file/test_lock.py::test_file_lock_check_interval -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest -n auto --tb=no -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest -n auto --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest -n auto --tb=no -q --maxfail=5)",
      "Bash(PYTHONPATH=src .venv/bin/pytest -n auto --tb=no -q --durations=0)",
      "Bash(export PYTHONPATH=src)",
      "Bash(.venv/bin/pytest -n auto --tb=no -q)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/conftest.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/conftest.py --collect-only -q)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/logger/test_asyncio_suppression.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/logger/test_asyncio_suppression.py --ignore-missing-imports)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/logger/test_asyncio_suppression.py -v)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/logger/test_config_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/logger/test_config_coverage.py --ignore-missing-imports)",
      "Bash(awk:*)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/logger/core.py src/provide/foundation/setup/__init__.py src/provide/foundation/__init__.py src/provide/foundation/hub/manager.py src/provide/foundation/file/operations.py src/provide/foundation/file/operations/__init__.py src/provide/foundation/hub/commands.py src/provide/foundation/logger/config/logging.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/logger/test_config_coverage.py tests/logger/test_config_imports.py tests/logger/test_emoji_matrix_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/logger/test_config_coverage.py tests/logger/test_config_imports.py tests/logger/test_emoji_matrix_coverage.py --ignore-missing-imports)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/logger/test_emoji_matrix_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/logger/test_emoji_matrix_coverage.py --ignore-missing-imports)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/logger/test_config_coverage.py tests/logger/test_config_imports.py tests/logger/test_emoji_matrix_coverage.py -v)",
      "Bash(lsof:*)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/logger/test_config_module_coverage.py tests/logger/test_config_re_exports_coverage.py tests/logger/test_logger_context_binding.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/logger/test_config_module_coverage.py tests/logger/test_config_re_exports_coverage.py tests/logger/test_logger_context_binding.py --ignore-missing-imports)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/logger/test_config_module_coverage.py tests/logger/test_config_re_exports_coverage.py -v)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/integration/test_integration_core.py tests/integration/test_integration_coverage_100.py tests/integration/test_integration_edge_cases.py tests/integration/test_integration_error_handling.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/resilience/test_retry_executor.py tests/resilience/test_retry_decorator.py tests/resilience/test_integration.py)",
      "Bash(PYTHONPATH=src .venv/bin/rg \"patch.*time\\.sleep|patch.*asyncio\\.sleep\" tests/ --type py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/integration/test_integration_coverage_100.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest -n auto --tb=no -q --timeout=60)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/integration/test_integration_verification.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/integration/test_integration_verification.py::TestIntegrationVerification::test_basic_lazy_init -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest -n auto --tb=no -q -m \"not slow\")",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/integration/test_integration_final_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/integration/test_integration_final_coverage.py::TestIntegrationFinalCoverage::test_field_mapping_creation -v)",
      "Bash(PYTHONPATH=src grep -r \"reset_foundation_setup_for_testing\\|unittest\\.mock\" tests/config/ --include=\"*.py\")",
      "Bash(while read file)",
      "Bash(if grep -q \"unittest\\.mock\" \"$file\")",
      "Bash(then)",
      "Bash(echo \"Updating $file\")",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/config/ tests/integration/)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_config_loader.py -q --tb=short --maxfail=3)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/resilience/ -n auto --tb=no -q)",
      "Bash(if [ -f \"$file\" ])",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/resilience/test_retry_executor.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/crypto/ --tb=short -q --maxfail=3)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/logger/trace.py src/provide/foundation/streams/core.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/crypto/ -q --tb=short --maxfail=3)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/crypto/ -n auto --tb=short -q --timeout=60)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/hub/)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/hub/ --ignore-missing-imports)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/hub/ -q --tb=short --maxfail=3)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/crypto/ -n auto --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/logger/trace.py src/provide/foundation/streams/console.py src/provide/foundation/streams/core.py tests/conftest.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/logger/trace.py src/provide/foundation/streams/console.py src/provide/foundation/streams/core.py tests/conftest.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_rate_limiting_coverage.py -n auto --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/ -n auto --tb=no -q --maxfail=3)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/utils/test_formatting_coverage.py tests/utils/test_parsing_coverage.py tests/utils/test_rate_limiting_coverage.py tests/utils/test_streams_coverage.py tests/utils/test_timing_coverage.py tests/utils/test_utils_coverage.py tests/utils/test_utils_timing.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format /Users/tim/code/gh/provide-io/provide-foundation/tests/utils/test_rate_limiting_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/grep -n -A 10 \"test_write_to_console_with_exception_fallback\" tests/streams/test_console.py)",
      "Bash(PYTHONPATH=src grep -n -A 10 \"test_write_to_console_with_exception_fallback\" tests/streams/test_console.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/ -q --tb=short --maxfail=3)",
      "Bash(PYTHONPATH=src .venv/bin/pytest /Users/tim/code/gh/provide-io/provide-foundation/tests/utils/ -q --tb=short --maxfail=3)",
      "Bash(PYTHONPATH=src .venv/bin/pytest /Users/tim/code/gh/provide-io/provide-foundation/tests/utils/test_utils_coverage.py::TestParsingCoverage::test_auto_parse_with_string_type_hints -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/logger/test_logging.py::TestLoggingWithEmojiSets::test_llm_emoji_set_end_to_end -xvs --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest /Users/tim/code/gh/provide-io/provide-foundation/tests/cli/ -q --tb=short --maxfail=3)",
      "Bash(PYTHONPATH=src .venv/bin/pytest /Users/tim/code/gh/provide-io/provide-foundation/tests/cli/commands/logs/test_generate_coverage.py::TestTraceSpanGeneration::test_generate_trace_id -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/streams/test_console.py::TestWriteToConsole::test_write_to_console_with_exception_fallback -v)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/utils/ tests/hub/ tests/cli/ --ignore-missing-imports)",
      "Bash(PYTHONPATH=src .venv/bin/mypy /Users/tim/code/gh/provide-io/provide-foundation/tests/utils/ /Users/tim/code/gh/provide-io/provide-foundation/tests/hub/ /Users/tim/code/gh/provide-io/provide-foundation/tests/cli/ --ignore-missing-imports --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/mypy /Users/tim/code/gh/provide-io/provide-foundation/tests/utils/ /Users/tim/code/gh/provide-io/provide-foundation/tests/hub/ /Users/tim/code/gh/provide-io/provide-foundation/tests/cli/ --ignore-missing-imports)",
      "Bash(PYTHONPATH=src .venv/bin/pytest /Users/tim/code/gh/provide-io/provide-foundation/tests/utils/test_basic_coverage.py -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest /Users/tim/code/gh/provide-io/provide-foundation/tests/hub/test_hub_registry.py -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest /Users/tim/code/gh/provide-io/provide-foundation/tests/cli/test_decorators.py -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_rate_limiting_coverage.py::TestTokenBucketRateLimiter::test_extreme_time_precision -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_rate_limiting_coverage.py tests/streams/test_console.py -n auto --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/streams/test_console.py::TestWriteToConsole -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest /Users/tim/code/gh/provide-io/provide-foundation/tests/errors/test_types.py -q)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/logger/)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format /Users/tim/code/gh/provide-io/provide-foundation/tests/logger/)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format /Users/tim/code/gh/provide-io/provide-foundation/tests/logger/ratelimit/test_processor.py /Users/tim/code/gh/provide-io/provide-foundation/tests/logger/ratelimit/test_queue_limiter.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest /Users/tim/code/gh/provide-io/provide-foundation/tests/logger/test_logging.py::TestLoggingWithEmojiSets::test_llm_emoji_set_end_to_end -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest /Users/tim/code/gh/provide-io/provide-foundation/tests/logger/ratelimit/test_processor.py::TestRateLimiterProcessor::test_rate_limiter_processor_init -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest /Users/tim/code/gh/provide-io/provide-foundation/tests/logger/ -q --tb=short --maxfail=5)",
      "Bash(PYTHONPATH=src .venv/bin/pytest /Users/tim/code/gh/provide-io/provide-foundation/tests/logger/test_logger_production_compliance.py -q --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest /Users/tim/code/gh/provide-io/provide-foundation/tests/logger/ -q --tb=no --maxfail=10)",
      "Bash(PYTHONPATH=src .venv/bin/pytest /Users/tim/code/gh/provide-io/provide-foundation/tests/logger/ratelimit/test_queue_limiter.py::TestQueuedRateLimiter::test_queued_rate_limiter_enqueue_basic -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest /Users/tim/code/gh/provide-io/provide-foundation/tests/profiling/test_hooks.py::TestProfilingComponent::test_component_auto_register -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest /Users/tim/code/gh/provide-io/provide-foundation/tests/profiling/test_hooks.py -q --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest /Users/tim/code/gh/provide-io/provide-foundation/tests/cli/commands/logs/test_generate_coverage.py::TestGenerateLogEntry::test_generate_log_entry_basic -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest /Users/tim/code/gh/provide-io/provide-foundation/tests/cli/commands/logs/test_generate_coverage.py::TestGenerateLogEntry -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest /Users/tim/code/gh/provide-io/provide-foundation/tests/utils/test_rate_limiting.py::TestTokenBucketRateLimiter::test_extreme_time_precision -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest /Users/tim/code/gh/provide-io/provide-foundation/tests/profiling/test_hooks.py::TestProfilingComponent::test_component_auto_register /Users/tim/code/gh/provide-io/provide-foundation/tests/profiling/test_hooks.py::TestProfilingCLI::test_profile_command_with_profiler /Users/tim/code/gh/provide-io/provide-foundation/tests/profiling/test_hooks.py::TestProfilingCLI::test_profile_command_json_output /Users/tim/code/gh/provide-io/provide-foundation/tests/profiling/test_hooks.py::TestProfilingIntegration::test_end_to_end_profiling /Users/tim/code/gh/provide-io/provide-foundation/tests/profiling/test_hooks.py::TestProfilingIntegration::test_profiling_reset_integration -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest /Users/tim/code/gh/provide-io/provide-foundation/tests/cli/commands/logs/test_generate_coverage.py::TestGenerateLogEntry::test_generate_log_entry_basic /Users/tim/code/gh/provide-io/provide-foundation/tests/cli/commands/logs/test_generate_coverage.py::TestGenerateLogEntry::test_generate_log_entry_normal_style /Users/tim/code/gh/provide-io/provide-foundation/tests/cli/commands/logs/test_generate_coverage.py::TestGenerateLogEntry::test_generate_log_entry_burroughs_style /Users/tim/code/gh/provide-io/provide-foundation/tests/cli/commands/logs/test_generate_coverage.py::TestGenerateLogEntry::test_generate_log_entry_error_rate_zero /Users/tim/code/gh/provide-io/provide-foundation/tests/cli/commands/logs/test_generate_coverage.py::TestGenerateLogEntry::test_generate_log_entry_error_rate_one /Users/tim/code/gh/provide-io/provide-foundation/tests/cli/commands/logs/test_generate_coverage.py::TestGenerateLogEntry::test_generate_log_entry_domain_action_status /Users/tim/code/gh/provide-io/provide-foundation/tests/cli/commands/logs/test_generate_coverage.py::TestGenerateLogEntry::test_generate_log_entry_trace_id_logic /Users/tim/code/gh/provide-io/provide-foundation/tests/cli/commands/logs/test_generate_coverage.py::TestGenerateLogEntry::test_generate_log_entry_unique_span_ids -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/cli/commands/logs/test_generate_coverage.py::TestGenerateLogEntry::test_generate_log_entry_basic -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/logger/test_logging.py::TestLoggingWithEmojiSets::test_llm_emoji_set_end_to_end -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest /Users/tim/code/gh/provide-io/provide-foundation/tests/logger/test_logger_production_compliance.py::TestDocumentedBehaviorCompliance::test_documented_environment_variables -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest /Users/tim/code/gh/provide-io/provide-foundation/tests/logger/test_logger_production_compliance.py::TestLazyInitializationDocumentation::test_environment_config_example -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/logger/test_logging.py::TestLoggingWithEmojiSets tests/cli/commands/logs/test_generate_coverage.py::TestGenerateLogEntry -n auto --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest /Users/tim/code/gh/provide-io/provide-foundation/tests/logger/test_logger_real_world_scenarios.py::TestRealWorldScenarios::test_microservice_with_environment_config -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest /Users/tim/code/gh/provide-io/provide-foundation/tests/logger/test_logger_production_compliance.py::TestDocumentedBehaviorCompliance::test_documented_environment_variables /Users/tim/code/gh/provide-io/provide-foundation/tests/logger/test_logger_production_compliance.py::TestLazyInitializationDocumentation::test_environment_config_example /Users/tim/code/gh/provide-io/provide-foundation/tests/logger/test_logger_real_world_scenarios.py::TestRealWorldScenarios::test_microservice_with_environment_config -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/streams/test_console.py tests/utils/test_rate_limiting_coverage.py tests/logger/test_logging.py::TestLoggingWithEmojiSets tests/cli/commands/logs/test_generate_coverage.py::TestGenerateLogEntry -n auto --tb=no -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest /Users/tim/code/gh/provide-io/provide-foundation/tests/profiling/test_hooks.py::TestProfilingComponent::test_component_auto_register /Users/tim/code/gh/provide-io/provide-foundation/tests/profiling/test_hooks.py::TestProfilingCLI::test_profile_command_with_profiler /Users/tim/code/gh/provide-io/provide-foundation/tests/profiling/test_hooks.py::TestProfilingCLI::test_profile_command_json_output /Users/tim/code/gh/provide-io/provide-foundation/tests/profiling/test_hooks.py::TestProfilingIntegration::test_end_to_end_profiling /Users/tim/code/gh/provide-io/provide-foundation/tests/profiling/test_hooks.py::TestProfilingIntegration::test_profiling_reset_integration /Users/tim/code/gh/provide-io/provide-foundation/tests/utils/test_rate_limiting.py::TestTokenBucketRateLimiter::test_extreme_time_precision /Users/tim/code/gh/provide-io/provide-foundation/tests/cli/commands/logs/test_generate_coverage.py::TestGenerateLogEntry::test_generate_log_entry_basic /Users/tim/code/gh/provide-io/provide-foundation/tests/cli/commands/logs/test_generate_coverage.py::TestGenerateLogEntry::test_generate_log_entry_normal_style /Users/tim/code/gh/provide-io/provide-foundation/tests/cli/commands/logs/test_generate_coverage.py::TestGenerateLogEntry::test_generate_log_entry_burroughs_style /Users/tim/code/gh/provide-io/provide-foundation/tests/cli/commands/logs/test_generate_coverage.py::TestGenerateLogEntry::test_generate_log_entry_error_rate_zero /Users/tim/code/gh/provide-io/provide-foundation/tests/cli/commands/logs/test_generate_coverage.py::TestGenerateLogEntry::test_generate_log_entry_error_rate_one /Users/tim/code/gh/provide-io/provide-foundation/tests/cli/commands/logs/test_generate_coverage.py::TestGenerateLogEntry::test_generate_log_entry_domain_action_status /Users/tim/code/gh/provide-io/provide-foundation/tests/cli/commands/logs/test_generate_coverage.py::TestGenerateLogEntry::test_generate_log_entry_trace_id_logic /Users/tim/code/gh/provide-io/provide-foundation/tests/cli/commands/logs/test_generate_coverage.py::TestGenerateLogEntry::test_generate_log_entry_unique_span_ids /Users/tim/code/gh/provide-io/provide-foundation/tests/logger/test_logger_production_compliance.py::TestDocumentedBehaviorCompliance::test_documented_environment_variables /Users/tim/code/gh/provide-io/provide-foundation/tests/logger/test_logger_production_compliance.py::TestLazyInitializationDocumentation::test_environment_config_example /Users/tim/code/gh/provide-io/provide-foundation/tests/logger/test_logger_real_world_scenarios.py::TestRealWorldScenarios::test_microservice_with_environment_config -v --tb=short)",
      "Bash(xargs:*)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/streams/core.py tests/file/test_lock.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/streams/ tests/file/test_lock.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/errors/test_integration.py -v)",
      "Bash(timeout 10 bash -c \"PYTHONPATH=src .venv/bin/pytest tests/errors/test_integration.py::TestErrorSystemIntegration::test_async_error_handling -v --tb=short\")",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/errors/test_integration.py::TestErrorSystemIntegration::test_async_error_handling -xvs --tb=short)",
      "Bash(timeout 30 PYTHONPATH=src .venv/bin/pytest tests/errors/test_integration.py -v --tb=short)",
      "Bash(PYTHONPATH=src timeout 30 .venv/bin/pytest tests/errors/test_integration.py -v --tb=short)",
      "Bash(PYTHONPATH=src timeout 20 .venv/bin/pytest tests/errors/test_integration.py::TestErrorSystemIntegration::test_async_error_handling -xvs --tb=short)",
      "Bash(PYTHONPATH=src timeout 60 .venv/bin/pytest tests/errors/test_integration.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/errors/test_integration.py)",
      "Bash(PYTHONPATH=src timeout 120 .venv/bin/pytest tests/errors/test_integration.py tests/concurrency/test_async_core.py -n auto --tb=short -q)",
      "Bash(PYTHONPATH=src timeout 300 .venv/bin/pytest tests/errors/ tests/concurrency/ tests/hub/test_hub_thread_safety.py -n auto --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/crypto/test_checksums.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/crypto/test_checksums.py --ignore-missing-imports)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/crypto/test_certificate_loading.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/crypto/test_certificate_loading.py --ignore-missing-imports)",
      "Bash(PYTHONPATH=src timeout 20 .venv/bin/pytest tests/errors/test_safe_decorators_coverage.py::TestSafeDecoratorsCoverage::test_log_only_error_context_async_function_success -xvs --tb=short)",
      "Bash(PYTHONPATH=src timeout 60 .venv/bin/pytest tests/errors/test_safe_decorators_coverage.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/crypto/test_certificate_verify.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/crypto/test_certificate_verify.py --ignore-missing-imports)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/crypto/test_dependency_stubs.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/crypto/test_dependency_stubs.py --ignore-missing-imports)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/crypto/test_keys.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/crypto/test_keys.py --ignore-missing-imports)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/crypto/test_certificate_lifecycle.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/crypto/test_certificate_lifecycle.py --ignore-missing-imports)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/crypto/test_signatures.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/crypto/test_hash_utils.py tests/crypto/test_certificate_properties.py tests/crypto/test_certificate_create.py tests/crypto/test_certificate_credentials.py tests/crypto/test_certificate_chains.py tests/crypto/test_optional_crypto_dependency.py tests/crypto/test_certificate_loading.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/crypto/test_hash_utils.py tests/crypto/test_certificate_properties.py tests/crypto/test_certificate_create.py tests/crypto/test_certificate_credentials.py tests/crypto/test_certificate_chains.py tests/crypto/test_optional_crypto_dependency.py tests/crypto/test_certificate_loading.py --ignore-missing-imports)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/crypto/ --tb=no -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/crypto/test_certificate_lifecycle.py::TestCertificateLifecycle::test_certificate_trust_chain_validation -xvs --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/file/test_lock.py::test_file_lock_timeout -xvs --tb=short --timeout=10)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/file/test_atomic_permissions.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/file/test_atomic_permissions.py --ignore-missing-imports)",
      "Bash(if ! grep -q \"from pathlib import Path\" \"$file\")",
      "Bash(then sed -i '' '3i\\\nfrom pathlib import Path\n' \"$file\")",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/file/*.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/transport/test_base_edge_cases.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/transport/test_transport_registry.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/transport/test_middleware.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/transport/test_http_transport.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/transport/test_transport_basic.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/transport/test_client.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/transport/test_middleware.py --ignore-missing-imports)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/resilience/test_circuit_breaker.py)",
      "Read(//Users/tim/**)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/resilience/test_retry_policy.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/resilience/test_fallback.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/resilience/test_integration.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/resilience/)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/file/test_lock.py::TestFileLock::test_file_lock_acquire_release -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format /Users/tim/code/gh/provide-io/provide-foundation/tests/tracer/test_spans.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy /Users/tim/code/gh/provide-io/provide-foundation/tests/tracer/test_spans.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest /Users/tim/code/gh/provide-io/provide-foundation/tests/tracer/test_spans.py::TestSpan::test_span_creation_with_defaults -xvs --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/file/test_atomic.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/file/test_directory.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format /Users/tim/code/gh/provide-io/provide-foundation/tests/observability/test_openobserve_integration.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format \"$file\")",
      "Bash(PYTHONPATH=src .venv/bin/ruff format /Users/tim/code/gh/provide-io/provide-foundation/tests/env/)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/file/test_directory.py tests/file/test_formats.py tests/file/test_safe.py tests/file/test_utils.py tests/file/test_replacements.py)",
      "Bash(PYTHONPATH=src python3:*)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/file/test_directory.py tests/file/test_safe.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/file/ --collect-only -q)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/file/test_replacements.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/file/test_replacements.py tests/file/test_utils.py tests/file/test_formats.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/file/test_lock.py tests/file/test_safe.py tests/file/test_directory.py -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/file/test_formats.py tests/file/test_utils.py -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/file/ --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/file/test_replacements.py --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest /Users/tim/code/gh/provide-io/provide-foundation/tests/tools/test_cache.py::TestToolCache::test_basic_cache_operations -xvs --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest /Users/tim/code/gh/provide-io/provide-foundation/tests/tools/test_cache.py::TestToolCache::test_init_default_cache_dir -xvs --tb=short)",
      "Bash(while read f)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/transport/test_middleware.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/transport/test_middleware.py -v)",
      "Bash(PYTHONPATH=src pytest tests/file/test_lock.py::TestFileLock::test_file_lock_timeout -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/file/test_lock.py src/provide/foundation/file/temp.py)",
      "Bash(printf '\\e[?1000l\\e[?1002l\\e[?1003l\\e[?10061l')",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/file/test_lock.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/file/test_lock.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/file/test_lock.py::TestFileLock::test_file_lock_timeout -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/file/test_lock.py::TestFileLock::test_file_lock_concurrent_access -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/file/ -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/file/test_directory.py::TestDirectoryOperations::test_temp_dir_creates_and_cleans -v)",
      "Bash(PYTHONPATH=src timeout 10 .venv/bin/pytest tests/file/test_lock.py::TestFileLock::test_file_lock_timeout -xvs --tb=short)",
      "Bash(PYTHONPATH=src timeout 5 .venv/bin/pytest tests/file/test_lock.py::TestFileLock::test_file_lock_timeout -q --tb=no)",
      "Bash(PYTHONPATH=src timeout 30 .venv/bin/pytest tests/file/test_lock.py -v --tb=short)",
      "Bash(PYTHONPATH=src timeout 10 .venv/bin/pytest tests/file/test_lock.py::TestFileLock::test_file_lock_timeout --no-cov -o asyncio_default_fixture_loop_scope=session -v)",
      "Bash(PYTHONPATH=src timeout 30 .venv/bin/pytest tests/config/ tests/file/test_lock.py::TestFileLock::test_file_lock_timeout -v --tb=short)",
      "Bash(PYTHONPATH=src timeout 20 .venv/bin/pytest tests/config/ tests/file/ tests/utils/ -q --tb=no --maxfail=1 -x)",
      "Bash(PYTHONPATH=src timeout 15 .venv/bin/pytest tests/file/test_lock.py::TestFileLock::test_file_lock_timeout tests/hub/ tests/logger/ -v --tb=no --maxfail=1)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/file/lock.py)",
      "Bash(PYTHONPATH=src timeout 20 .venv/bin/pytest tests/config/ tests/file/test_lock.py::TestFileLock::test_file_lock_timeout tests/utils/ -q --tb=no --maxfail=1)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/testkit/test_file_operations_fixtures.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/testkit/test_file_operations_fixtures.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/testkit/test_file_operations_fixtures.py::TestFileOperationSimulator::test_simulator_initialization -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest -n auto --tb=short -q --maxfail=10)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/console/ tests/platform/ tests/transport/test_middleware.py tests/integration/ tests/core/test_foundation_log_output.py tests/serialization/test_serialization_core.py tests/time/test_time_core.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest -n auto --tb=no -q --ignore=tests/file/test_file_operations.py --ignore=tests/test_file_operations.py --ignore=tests/testkit/test_file_operations_fixtures.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest --collect-only -q)",
      "Bash(.venv/bin/pytest --collect-only -q)",
      "Bash(.venv/bin/pytest --collect-only)",
      "Bash(PYTHONPATH=src timeout 30 .venv/bin/pytest tests/file/test_lock.py::TestFileLock::test_file_lock_timeout tests/logger/ tests/hub/ -v --tb=no --maxfail=1)",
      "Bash(PYTHONPATH=src timeout 60 .venv/bin/pytest tests/file/test_lock.py::TestFileLock::test_file_lock_timeout tests/ -q --tb=no --maxfail=1)",
      "Bash(PYTHONPATH=src timeout 60 .venv/bin/pytest tests/file/ -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/file/test_file_operations.py::TestOperationDetector::test_detect_single_file_creation -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/file/operations/detector.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/file/operations/detector.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/file/test_file_operations.py::TestOperationDetector::test_detect_single_file_creation tests/file/test_file_operations.py::TestOperationDetector::test_detect_atomic_save_pattern tests/file/test_file_operations.py::TestUtilityFunctions::test_extract_original_path_function -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/file/ -q --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/hub/test_component_registry_core.py::TestComponentRegistryArchitecture::test_foundation_uses_global_component_registry -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/core/test_init_coverage.py::TestFoundationInit -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/file/test_file_operations.py --collect-only -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/file/test_file_operations.py::TestOperationDetector::test_atomic_save_detection_vscode_pattern -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/file/test_file_operations.py tests/test_file_operations.py -v --tb=no)",
      "Bash(.venv/bin/pytest tests/file/test_file_operations.py::TestOperationDetector::test_detect_single_file_creation -xvs --tb=short)",
      "Bash(.venv/bin/pytest tests/file/test_file_operations.py --collect-only -q)",
      "Bash(PYTHONPATH=src timeout 30 .venv/bin/pytest tests/file/test_lock.py::TestFileLock::test_file_lock_timeout -v --tb=short)",
      "Bash(PYTHONPATH=src timeout 60 .venv/bin/pytest tests/file/ -q --tb=no --maxfail=1)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/file/test_file_operations_fixtures_simple.py -v --tb=short)",
      "Bash(.venv/bin/pytest tests/file/test_file_operations.py -v --tb=no)",
      "Bash(.venv/bin/pytest tests/test_file_operations.py tests/test_file_operations_*.py -v --tb=no)",
      "Bash(.venv/bin/pytest -n auto --tb=no -q --maxfail=10)",
      "Bash(.venv/bin/pytest tests/file/test_file_operations_fixtures_simple.py --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/file/test_file_operations_fixtures_simple.py tests/testkit/test_file_operations_fixtures.py)",
      "Bash(.venv/bin/pytest tests/testkit/test_file_operations_fixtures.py --collect-only)",
      "Bash(.venv/bin/pytest tests/testkit/test_file_operations_fixtures.py -v)",
      "Bash(.venv/bin/pytest tests/resilience/test_circuit_breaker.py -v --tb=no)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/file/test_file_operations_fixtures_simple.py --ignore-missing-imports)",
      "Bash(.venv/bin/pytest --tb=no -q)",
      "Bash(.venv/bin/python:*)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/testkit/test_file_operations_fixtures.py --ignore-missing-imports)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/file/test_file_operations_fixtures_simple.py tests/testkit/test_file_operations_fixtures.py --collect-only -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/file/test_lock.py::TestFileLock::test_file_lock_timeout -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/file/test_file_operations_fixtures_simple.py tests/testkit/test_file_operations_fixtures.py -v --tb=short)",
      "Bash(PYTHONPATH=src timeout 30 .venv/bin/pytest tests/config/ tests/file/ -q --tb=short --maxfail=3)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/file/test_file_operations_patterns.py -v --tb=short)",
      "Bash(PYTHONPATH=src timeout 20 .venv/bin/pytest tests/file/test_lock.py::TestFileLock::test_file_lock_timeout --cov=src/provide/foundation/file --cov-report=term-missing -v)",
      "Bash(PYTHONPATH=src timeout 60 .venv/bin/pytest tests/file/ tests/testkit/ -q --tb=short --maxfail=5)",
      "Bash(echo \"Exit code: $?\")",
      "Bash(.venv/bin/pytest tests/file/test_file_operations_patterns.py tests/file/test_file_operations.py tests/testkit/test_file_operations_fixtures.py -v --tb=no)",
      "Bash(.venv/bin/pytest tests/console/ tests/config/ tests/integration/ --tb=no -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/time/test_time_core.py::TestProvideTime::test_provide_time_advances -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/time/test_time_core.py::TestProvideSleep::test_provide_sleep_actually_sleeps -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/tools/test_installer.py::TestToolInstaller::test_extract_zip_success -xvs)",
      "Bash(.venv/bin/pytest --co -q)",
      "Bash(.venv/bin/pytest tests/time/test_time_core.py -v --tb=no)",
      "Bash(.venv/bin/pytest tests/time/test_time_core.py::TestProvideTime -xvs --tb=short)",
      "Bash(.venv/bin/pytest tests/time/test_time_core.py -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/time/test_time_core.py::TestProvideSleep::test_provide_sleep_actually_sleeps -xvs --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format /Users/tim/code/gh/provide-io/provide-testkit/src/provide/testkit/base/minimal.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format /Users/tim/code/gh/provide-io/provide-testkit/src/provide/testkit/base/foundation.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format /Users/tim/code/gh/provide-io/provide-foundation/src/provide/foundation/time/core.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/file/test_file_quality.py::TestQualityAnalyzer::test_run_analysis_without_scenarios tests/file/test_file_quality.py::TestQualityAnalyzer::test_generate_report -xvs --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/time/test_time_core.py tests/file/test_lock.py::TestFileLock::test_file_lock_timeout -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/time/test_time_core.py::TestProvideSleep tests/file/test_lock.py::TestFileLock::test_file_lock_timeout tests/concurrency/test_async_core.py::TestAsyncSleep::test_async_sleep_actually_sleeps -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/time/ tests/file/test_lock.py tests/concurrency/ --cov=src/provide/foundation --cov-report=term-missing -q --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/time/test_time_core.py::TestProvideTime::test_provide_time_advances -xvs --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/time/test_time_core.py::TestProvideTime::test_provide_time_advances tests/time/test_time_core.py::TestProvideSleep::test_provide_sleep_actually_sleeps -xvs --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/time/test_time_core.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/time/test_time_core.py::TestProvideTime::test_provide_time_advances tests/state/test_state_management.py::TestCircuitBreakerStateMachine::test_half_open_success_closes_circuit -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/state/test_state_management.py --collect-only -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/time/test_time_core.py::TestProvideTime::test_provide_time_advances tests/state/test_state_management.py::TestCircuitBreaker::test_half_open_success_closes_circuit -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/time/test_time_core.py::TestProvideTime::test_provide_time_advances tests/time/test_time_core.py::TestProvideSleep::test_provide_sleep_actually_sleeps -v --tb=short -n 0)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/time/test_time_core.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/time/test_time_core.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest -m \"time_sensitive\" -v --tb=short -n 0)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/time/ tests/file/test_file_quality.py tests/tools/test_installer.py::TestToolInstaller::test_extract_zip_success -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/time/test_time_core.py tests/process/test_runner_coverage.py tests/profiling/test_hooks.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/time/ tests/file/test_file_quality.py tests/tools/test_installer.py::TestToolInstaller::test_extract_zip_success tests/process/test_runner_coverage.py::TestStreamCommandCoverage::test_stream_command_standard_success tests/profiling/test_hooks.py::TestProfilingComponent::test_component_initialization -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format /Users/tim/code/gh/provide-io/provide-foundation/tests/tools/test_tools_integration.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/tools/test_tools_integration.py::TestDownloaderIntegration::test_download_small_file_success -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/tools/test_tools_integration.py -k test_download_small_file_success -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/tools/test_tools_integration.py::TestDownloaderIntegration::test_download_small_file_success -v --no-markers)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/tools/test_tools_integration.py -m integration -v --tb=short -k test_download_small_file_success)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/tools/test_tools_integration.py -m integration -v --tb=short -k \"test_parallel_downloads or test_mirror_fallback_success or test_redirect_handling\" --maxfail=3)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/tools/test_tools_integration.py::TestFullWorkflowIntegration::test_resolve_version_integration -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/tools/test_tools_integration.py -m integration -k test_resolve_version_integration -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/tools/test_tools_integration.py -m integration -k test_exponential_backoff_timing -v --tb=short -n 0)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/tools/test_downloader.py::TestToolDownloader::test_download_with_progress_success -xvs --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/docs/test_docs_generator.py --collect-only)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/docs/test_docs_generator.py::TestAPIDocGenerator::test_init_default_values -v)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format /Users/tim/code/gh/provide-io/provide-testkit/src/provide/testkit/mocking/fixtures.py /Users/tim/code/gh/provide-io/provide-testkit/src/provide/testkit/mocking/__init__.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/tools/test_downloader.py::TestToolDownloader::test_download_with_progress_success -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/tools/test_downloader.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/tools/test_downloader.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/tools/test_downloader.py --ignore-missing-imports)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/tools/test_tools_integration.py::TestDownloaderIntegration::test_download_small_file_success -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/tools/test_tools_integration.py::TestDownloaderIntegration::test_download_small_file_success -v --tb=short -m integration)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/tools/test_downloader.py::TestToolDownloader::test_download_http_error_status tests/tools/test_downloader.py::TestToolDownloader::test_download_http_server_error -v)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/tools/downloader.py tests/tools/test_downloader.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/tools/ -v --tb=short -k \"httpx or client\" --collect-only)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/tools/ -v --tb=short -x)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/tools/test_tools_base.py::TestBaseToolManager::test_install_download_and_verify -v --tb=long)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/tools/test_tools_base.py::TestBaseToolManager::test_install_download_and_verify -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/tools/test_tools_base.py::TestBaseToolManager -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/tools/base.py tests/tools/test_tools_base.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/tools/downloader.py src/provide/foundation/tools/base.py tests/tools/test_downloader.py tests/tools/test_tools_base.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/tools/test_tools_base.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/tools/test_tools_base.py --ignore-missing-imports)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/tools/test_tools_base.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/tools/ -q --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/tools/test_tools_integration.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/tools/test_tools_integration.py::TestDownloaderIntegration::test_download_with_checksum_success -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/tools/test_tools_integration.py::TestDownloaderIntegration::test_download_with_checksum_success -v --tb=short -m integration)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/tools/test_tools_integration.py::TestFullWorkflowIntegration::test_complete_tool_installation_workflow -v --tb=short -m integration)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/tools/test_tools_integration.py -v --tb=short -m integration -x --maxfail=3)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/tools/test_tools_integration.py::TestDownloaderIntegration::test_download_timeout_handling -v --tb=short -m integration)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/tools/test_tools_integration.py::TestBackoffRetryIntegration::test_eventual_success_after_retries -v --tb=short -m integration)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/tools/test_tools_integration.py -v --tb=short -m integration --maxfail=5)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/resilience/test_circuit_breaker.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/resilience/test_circuit_breaker.py --ignore-missing-imports)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/resilience/test_circuit_breaker.py::TestCircuitBreaker::test_circuit_recovery_after_timeout tests/resilience/test_circuit_breaker.py::TestCircuitBreaker::test_half_open_failure_reopens_circuit tests/resilience/test_circuit_breaker.py::TestCircuitBreaker::test_custom_recovery_timeout -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/resilience/test_circuit_breaker.py::TestCircuitBreaker::test_circuit_recovery_after_timeout tests/resilience/test_circuit_breaker.py::TestCircuitBreaker::test_half_open_failure_reopens_circuit tests/resilience/test_circuit_breaker.py::TestCircuitBreaker::test_custom_recovery_timeout -n auto --tb=short -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/resilience/test_circuit_breaker.py -n auto --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/resilience/test_circuit_breaker.py::TestCircuitBreaker::test_circuit_recovery_after_timeout tests/resilience/test_circuit_breaker.py::TestCircuitBreaker::test_half_open_failure_reopens_circuit tests/resilience/test_circuit_breaker.py::TestCircuitBreaker::test_custom_recovery_timeout -m \"time_sensitive\" -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/resilience/test_circuit_breaker.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/resilience/test_circuit_breaker.py -m \"not time_sensitive or time_sensitive\" -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/cli/commands/test_deps_coverage.py::TestDepsCommandModuleImport::test_click_import_handling -xvs --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/cli/commands/test_deps_coverage.py -n auto --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/cli/commands/test_deps_coverage.py::TestDepsCommandWithoutClick::test_deps_command_without_click tests/cli/commands/test_deps_coverage.py::TestDepsCommandWithoutClick::test_deps_command_stub_with_args -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/cli/commands/test_deps_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/cli/commands/test_deps_coverage.py --ignore-missing-imports)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format /Users/tim/code/gh/provide-io/provide-foundation/tests/cli/commands/test_deps_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/cli/commands/test_deps_coverage.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/resilience/test_circuit_breaker.py tests/cli/commands/test_deps_coverage.py -n auto --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/resilience/test_circuit_breaker.py -m time_sensitive -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/tools/test_tools_base.py tests/tools/test_downloader.py -v --tb=short)",
      "Bash(PYTHONPATH=src timeout 5 .venv/bin/pytest tests/file/test_lock.py::TestFileLock::test_file_lock_acquire_release -xvs --tb=short)",
      "Bash(PYTHONPATH=src timeout 5 .venv/bin/pytest tests/file/test_lock.py::TestFileLock::test_file_lock_timeout -xvs --tb=short)",
      "Bash(PYTHONPATH=src timeout 10 .venv/bin/pytest tests/file/test_lock.py -v --tb=short)",
      "Bash(PYTHONPATH=src timeout 10 .venv/bin/pytest tests/file/test_lock.py -n 2 --tb=short -q)",
      "Bash(PYTHONPATH=src timeout 30 .venv/bin/pytest tests/ -n auto --tb=no -q --maxfail=1)",
      "Bash(env PYTHONPATH=src timeout 30 .venv/bin/pytest tests/ -n auto --tb=no -q --maxfail=1)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/file/lock.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/file/test_lock.py -n auto --tb=short -q)",
      "Bash(PYTHONPATH=src timeout 60 .venv/bin/pytest tests/ -n auto --tb=no -q --maxfail=3)",
      "Bash(PYTHONPATH=src timeout 30 .venv/bin/pytest tests/file/ -n auto --tb=no -q)",
      "Bash(kill:*)",
      "Bash(env PYTHONPATH=src .venv/bin/pytest tests/ --collect-only -q)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/crypto/test_optional_crypto_dependency.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/crypto/test_optional_crypto_dependency.py::TestCryptoFallbackBehavior::test_crypto_module_resilience -v)"
    ],
    "deny": [],
    "ask": [],
    "additionalDirectories": [
      "/Users/tim/code/gh/provide-io"
    ]
  }
}