{
  "permissions": {
    "allow": [
      "Bash(uv sync:*)",
      "Bash(source:*)",
      "Bash(pytest:*)",
      "Bash(find:*)",
      "Bash(sed:*)",
      "Bash(mkdocs serve:*)",
      "Bash(timeout 30s pytest tests/core/test_core_lazy_init_edge_cases.py::TestExtremeEdgeCases::test_recursive_logging_during_setup -v)",
      "WebSearch",
      "Bash(python:*)",
      "Bash(mkdocs build:*)",
      "Bash(timeout 30s pytest --tb=no -q)",
      "Bash(curl:*)",
      "Bash(grep:*)",
      "Bash(tree:*)",
      "Bash(timeout 10s pytest tests/utils/test_utils_coverage.py --tb=no -q)",
      "Bash(timeout 15s pytest tests/platform/test_platform_coverage.py --tb=no -q)",
      "Bash(timeout 10s pytest tests/streams/test_console_coverage.py::TestFileStreams -x --tb=no)",
      "Bash(timeout 10s pytest tests/logger/test_config_coverage.py::TestLoggingConfigCoverage -v)",
      "Bash(timeout 15s pytest tests/process/test_lifecycle.py --tb=short -v)",
      "Bash(timeout 15s pytest tests/process/ --tb=no -q)",
      "Bash(timeout 10s pytest tests/platform/test_platform_coverage.py --tb=no -q)",
      "Bash(timeout 10s pytest tests/streams/test_console_coverage.py --tb=no -q)",
      "Bash(timeout 30s pytest tests/logger/test_config_coverage.py::TestLoggingConfigCoverage tests/platform/test_platform_coverage.py tests/streams/test_console_coverage.py tests/utils/test_utils_coverage.py tests/process/test_lifecycle.py --tb=no -q)",
      "Bash(timeout 60s pytest -vvv -n auto --cov=provide.foundation --cov-branch --cov-report=term-missing)",
      "Bash(timeout 10s pytest tests/process/test_lifecycle.py::TestWaitForProcessOutput::test_wait_for_simple_output -vvv)",
      "Bash(timeout 10s pytest tests/process/test_lifecycle.py::TestWaitForProcessOutput::test_wait_for_output_empty_pattern -vvv)",
      "Bash(timeout 10s pytest tests/logger/test_config_coverage.py::TestTelemetryConfigCoverage::test_telemetry_config_from_env_strict_mode -vvv)",
      "Bash(timeout 10s pytest tests/logger/test_config_coverage.py::TestTelemetryConfigCoverage::test_telemetry_config_from_env_strict_mode -v)",
      "Bash(timeout 90s pytest -n auto --cov=provide.foundation --cov-branch --cov-report=term-missing --tb=short)",
      "Bash(timeout 10s pytest tests/process/test_lifecycle.py::TestWaitForProcessOutput::test_wait_for_simple_output -vvv --tb=long)",
      "Bash(timeout 10s pytest tests/test_component_registry.py::TestFoundationBootstrapIntegration::test_foundation_bootstraps_with_registry -vvv --tb=long)",
      "Bash(timeout 30s pytest tests/process/test_lifecycle.py::TestWaitForProcessOutput::test_wait_for_simple_output tests/process/test_lifecycle.py::TestWaitForProcessOutput::test_wait_for_output_empty_pattern tests/process/test_lifecycle.py::TestWaitForProcessOutput::test_wait_for_complex_pattern tests/test_component_registry.py::TestFoundationBootstrapIntegration::test_foundation_bootstraps_with_registry -v)",
      "Bash(timeout 10s pytest --cov=src/provide/foundation/hub/manager.py --cov-report=term-missing tests/ -k \"hub\" --tb=no -q)",
      "Bash(timeout 15s pytest tests/hub/test_hub_manager_coverage.py -v)",
      "Bash(timeout 10s pytest tests/hub/test_hub_manager_coverage.py -v)",
      "Bash(timeout 20s pytest tests/process/test_process_runner_coverage.py -v)",
      "Bash(timeout 10s pytest tests/process/test_process_runner_coverage.py -v)",
      "Bash(timeout 10s pytest tests/utils/test_parsing_coverage.py -v)",
      "Bash(timeout 10s pytest tests/testing/test_hub_fixtures_coverage.py -v)",
      "Bash(timeout 10s pytest tests/utils/test_streams_coverage.py -v)",
      "Bash(timeout 15s pytest tests/utils/test_streams_coverage.py -v)",
      "Bash(timeout 90s pytest -n auto --cov=provide.foundation --cov-branch --cov-report=term-missing --tb=no -q)",
      "Bash(timeout 10s pytest tests/logger/test_config_module_coverage.py -v)",
      "Bash(timeout 10s pytest tests/config/test_validators_coverage.py -v)",
      "Bash(timeout 15s pytest tests/errors/test_safe_decorators_coverage.py -v)",
      "Bash(timeout 10s pytest tests/crypto/test_constants_coverage.py -v)",
      "Bash(timeout 15s pytest tests/cli/test_cli_testing_coverage.py -v)",
      "Bash(timeout 20s pytest tests/config/test_schema_coverage.py -v)",
      "Bash(timeout 15s pytest tests/config/test_schema_simple_coverage.py -v)",
      "Bash(timeout 10s pytest tests/logger/test_logger_config_module_coverage.py -v)",
      "Bash(timeout 10s pytest tests/logger/test_setup_init_coverage.py -v)",
      "Bash(timeout 60s pytest -n auto --cov=provide.foundation --cov-branch --cov-report=term-missing --tb=no -q)",
      "Bash(timeout 10s pytest tests/logger/test_logger_config_module_coverage.py --cov=src/provide/foundation/logger/config.py --cov-report=term-missing -v)",
      "Bash(timeout 15s pytest tests/logger/test_emoji_matrix_coverage.py -v)",
      "Bash(timeout 20s pytest tests/hub/test_components_advanced_coverage.py -v)",
      "Bash(timeout 20s pytest tests/config/test_config_env_coverage.py -v)",
      "Bash(timeout 15s pytest tests/config/test_config_env_coverage.py -v --tb=short)",
      "Bash(timeout 20s pytest tests/config/test_config_manager_coverage.py -v)",
      "Bash(timeout 30s pytest tests/config/test_schema_coverage.py -v)",
      "Bash(timeout 20s pytest tests/config/test_schema_coverage.py::TestSchemaFieldComprehensive::test_validate_all_constraints_combined -v)",
      "Bash(timeout 60s pytest --cov=provide.foundation --cov-branch --cov-report=term-missing --tb=no -q)",
      "Bash(timeout 15s pytest tests/logger/test_config_imports.py -v)",
      "Bash(timeout 10s pytest tests/logger/test_config_imports.py -v)",
      "Bash(timeout 30s pytest tests/config/test_config_sync_coverage.py -v)",
      "Bash(timeout 20s pytest tests/config/test_config_sync_simple.py -v)",
      "Bash(timeout 15s pytest tests/config/test_config_sync_simple.py -v --tb=no)",
      "Bash(timeout 20s pytest tests/test_init_coverage.py -v --tb=short)",
      "Bash(timeout 10s pytest tests/test_version_simple.py -v)",
      "Bash(timeout 90s pytest --cov=provide.foundation --cov-branch --cov-report=term-missing --tb=no -q --ignore=tests/test_version_coverage.py --ignore=tests/config/test_config_sync_simple.py --ignore=tests/test_init_coverage.py)",
      "Bash(timeout 90s pytest -n auto --cov=provide.foundation --cov-branch --cov-report=term-missing --tb=no -q --ignore=tests/test_version_coverage.py --ignore=tests/config/test_config_sync_simple.py --ignore=tests/test_init_coverage.py)",
      "Bash(timeout 90s pytest -n auto --cov=provide.foundation --cov-branch --cov-report=term --tb=no -q --ignore=tests/test_version_coverage.py --ignore=tests/config/test_config_sync_simple.py --ignore=tests/test_init_coverage.py)",
      "Bash(timeout 15s pytest tests/errors/test_process_coverage.py -v)",
      "Bash(timeout 10s pytest tests/errors/test_process_coverage.py -v)",
      "Bash(timeout 10s pytest tests/errors/test_process_coverage.py --cov=src/provide/foundation/errors/process --cov-report=term-missing --tb=no -q)",
      "Bash(timeout 15s pytest tests/hub/test_hub_init_coverage.py -v)",
      "Bash(timeout 10s pytest tests/hub/test_hub_init_coverage.py -v)",
      "Bash(timeout 60s pytest -n auto --cov=provide.foundation --cov-branch --cov-report=term --tb=no -q --ignore=tests/test_version_coverage.py --ignore=tests/config/test_config_sync_simple.py --ignore=tests/test_init_coverage.py)",
      "Bash(timeout:*)",
      "Bash(for page in \"\" \"getting-started/\" \"getting-started/installation/\" \"getting-started/quick-start/\" \"guide/\" \"api/\")",
      "Bash(do)",
      "Bash(echo:*)",
      "Bash(done)",
      "Bash(for bad_page in \"cookbook/\" \"troubleshooting/\" \"architecture/semantic-layers/\")",
      "Bash(uv pip install:*)",
      "Read(//private/tmp/**)",
      "Bash(kill:*)",
      "Bash(for file in \"guide/concepts/emoji-sets.md\" \"guide/config/runtime.md\" \"architecture/emoji-system.md\" \"architecture/performance.md\" \"architecture/telemetry-format.md\")",
      "Bash(if [ -f \"docs/$file\" ])",
      "Bash(then)",
      "Bash(else)",
      "Bash(fi)",
      "Bash(uv pip:*)",
      "Bash(ruff check:*)",
      "Bash(mypy:*)",
      "Bash(uv build:*)",
      "Bash(echo:*)",
      "Bash(pkill:*)",
      "Bash(for file in *.md)",
      "Bash(do mv \"$file\" \"api-$file\")"
    ],
    "deny": [],
    "ask": [],
    "additionalDirectories": [
      "/Users/tim/code/gh/provide-io"
    ]
  }
}