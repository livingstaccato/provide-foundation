{
  "permissions": {
    "allow": [
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/hub/initialization.py src/provide/foundation/hub/foundation.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/hub/initialization.py src/provide/foundation/hub/foundation.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/hub/initialization.py src/provide/foundation/hub/foundation.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/testmode/internal.py src/provide/foundation/testmode/__init__.py src/provide/foundation/hub/initialization.py src/provide/foundation/hub/foundation.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/testmode/internal.py src/provide/foundation/testmode/__init__.py src/provide/foundation/hub/initialization.py src/provide/foundation/hub/foundation.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/testmode/internal.py src/provide/foundation/testmode/__init__.py src/provide/foundation/hub/initialization.py src/provide/foundation/hub/foundation.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/hub/ -x --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/hub/test_hub_initialization.py::TestHubInitialization::test_hub_idempotent_initialization -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/cli/ -x --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/hub/protocols.py src/provide/foundation/hub/registry.py src/provide/foundation/hub/manager.py src/provide/foundation/hub/__init__.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/hub/protocols.py src/provide/foundation/hub/registry.py src/provide/foundation/hub/manager.py src/provide/foundation/hub/__init__.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/hub/protocols.py src/provide/foundation/hub/registry.py src/provide/foundation/hub/manager.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/resilience/bulkhead.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/resilience/bulkhead.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/resilience/bulkhead.py)",
      "Bash(PYTHONPATH=src .venv/bin/python:*)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/hub/ -x --tb=short -q --maxfail=3)",
      "Bash(PYTHONPATH=src .venv/bin/pytest --tb=short -q --maxfail=5)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/integration/ -x --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/logger/ -x --tb=short -q --maxfail=3)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format examples/architecture_improvements.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes examples/architecture_improvements.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/logger/setup/coordinator.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/logger/setup/coordinator.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/logger/setup/coordinator.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/testmode/internal.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/testmode/internal.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/testmode/internal.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/logger/test_logger_production_compliance.py::TestProductionReadinessScenarios::test_graceful_shutdown_scenario -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/hub/manager.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/hub/manager.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/hub/manager.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/hub/components.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/hub/components.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/hub/components.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/logger/core.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/logger/core.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/logger/setup/coordinator.py src/provide/foundation/setup/__init__.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/logger/setup/coordinator.py src/provide/foundation/setup/__init__.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/logger/setup/coordinator.py src/provide/foundation/setup/__init__.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/ -x --tb=short -q --maxfail=5)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/hub/test_components_cleanup_misc.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check tests/hub/test_components_cleanup_misc.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/hub/test_components_cleanup_misc.py -v)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/hub/lifecycle.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/hub/lifecycle.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/hub/lifecycle.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/hub/test_components_cleanup_misc.py::TestAdvancedCleanup::test_cleanup_all_components_with_async_cleanup -v)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/hub/config.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/hub/config.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/hub/config.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/hub/discovery.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/hub/discovery.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/hub/discovery.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/hub/test_components_cleanup_misc.py::TestMiscellaneousFunctionality::test_discover_components_stub -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/hub/test_components_coverage.py tests/hub/test_components_config_pipeline.py -v)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/hub/processors.py src/provide/foundation/hub/handlers.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/hub/processors.py src/provide/foundation/hub/handlers.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/hub/processors.py src/provide/foundation/hub/handlers.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/hub/test_components_config_pipeline.py::TestProcessorPipeline::test_get_processor_pipeline tests/hub/test_components_config_pipeline.py::TestProcessorPipeline::test_get_processors_for_stage -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/hub/test_hub_initialization.py::TestHubInitialization::test_hub_config_precedence -v)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/logger/setup/coordinator.py src/provide/foundation/concurrency/locks.py src/provide/foundation/hub/initialization.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/logger/setup/coordinator.py src/provide/foundation/concurrency/locks.py src/provide/foundation/hub/initialization.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/logger/setup/coordinator.py src/provide/foundation/concurrency/locks.py src/provide/foundation/hub/initialization.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/hub/test_hub_initialization.py::TestHubInitialization::test_hub_idempotent_initialization -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/hub/test_hub_initialization.py::TestHubInitialization::test_hub_config_precedence tests/hub/test_hub_initialization.py::TestHubInitialization::test_hub_idempotent_initialization -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/hub/test_hub_initialization.py -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/hub/test_components_cleanup_misc.py::TestMiscellaneousFunctionality::test_bootstrap_foundation_creates_default_components -v -s)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/integration/test_integration_coverage_100.py::test_logger_base_error_while_waiting_for_lock -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/core/test_core_fixes.py::test_lazy_setup_flags -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/integration/test_integration_verification.py::test_lazy_setup_flags -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/logger/test_logger_production_compliance.py::TestDocumentedBehaviorCompliance::test_documented_environment_variables -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/logger/test_logger_production_compliance.py::TestDocumentedBehaviorCompliance::test_documented_environment_variables -xvs --tb=long)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/logger/test_logger_production_compliance.py::TestLazyInitializationDocumentation::test_environment_config_example -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/logger/test_logger_real_world_scenarios.py::TestRealWorldScenarios::test_microservice_with_environment_config -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/core/test_core_service_name_fix.py::test_key_value_still_has_emojis -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/test_predictable_initialization.py::TestPredictableInitialization::test_configuration_precedence_predictable -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/errors/test_integration.py::TestErrorSystemIntegration::test_retry_with_circuit_breaker -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/test_predictable_initialization.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/core/test_core_service_name_fix.py::test_key_value_still_has_emojis tests/errors/test_integration.py::TestErrorSystemIntegration::test_retry_with_circuit_breaker -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/cli/commands/test_deps_coverage.py::TestDepsCommandWithClick::test_deps_command_with_click -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/pytest --tb=line -q --maxfail=5)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/resilience/test_circuit_breaker.py::TestCircuitBreaker::test_half_open_failure_reopens_circuit -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/pytest --tb=short -q --maxfail=2)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/resilience/decorators.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/resilience/decorators.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/resilience/decorators.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/testmode/internal.py src/provide/foundation/testmode/__init__.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/testmode/internal.py src/provide/foundation/testmode/__init__.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/resilience/decorators.py src/provide/foundation/testmode/internal.py src/provide/foundation/testmode/__init__.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/resilience/decorators.py src/provide/foundation/testmode/internal.py src/provide/foundation/testmode/__init__.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/errors/test_integration.py::TestErrorSystemIntegration::test_retry_with_circuit_breaker tests/resilience/test_circuit_breaker.py::TestCircuitBreaker::test_half_open_failure_reopens_circuit -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/cli/commands/test_deps_coverage.py::TestDepsCommandWithClick::test_deps_command_with_click -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/errors/ tests/resilience/ tests/cli/commands/test_deps_coverage.py --tb=short -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/errors/test_integration.py::TestErrorSystemIntegration::test_retry_with_circuit_breaker tests/resilience/test_circuit_breaker.py::TestCircuitBreaker::test_half_open_failure_reopens_circuit -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/errors/test_integration.py::TestErrorSystemIntegration::test_retry_with_circuit_breaker -xvs --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/errors/ tests/resilience/ --tb=short -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/errors/test_integration.py::TestErrorSystemIntegration::test_retry_with_circuit_breaker tests/resilience/test_circuit_breaker.py::TestCircuitBreaker::test_half_open_failure_reopens_circuit tests/cli/commands/test_deps_coverage.py::TestDepsCommandWithClick::test_deps_command_with_click -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/errors/test_integration.py::TestErrorSystemIntegration::test_retry_with_circuit_breaker tests/resilience/test_circuit_breaker.py::TestCircuitBreaker::test_half_open_failure_reopens_circuit -n auto -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/errors/test_integration.py::TestErrorSystemIntegration::test_retry_with_circuit_breaker tests/resilience/test_circuit_breaker.py::TestCircuitBreaker::test_half_open_failure_reopens_circuit -n auto --tb=short -q --maxfail=1)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/errors/test_integration.py::TestErrorSystemIntegration::test_retry_with_circuit_breaker -xvs --tb=long)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/errors/test_integration.py::TestErrorSystemIntegration::test_retry_with_circuit_breaker tests/resilience/test_circuit_breaker.py::TestCircuitBreaker::test_half_open_failure_reopens_circuit tests/core/test_core_service_name_fix.py::test_key_value_still_has_emojis -v --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/errors/test_integration.py::TestErrorSystemIntegration::test_retry_with_circuit_breaker tests/resilience/test_circuit_breaker.py::TestCircuitBreaker::test_half_open_failure_reopens_circuit tests/core/test_core_service_name_fix.py::test_key_value_still_has_emojis tests/errors/test_integration.py::TestErrorSystemIntegration::test_retry_with_circuit_breaker -v --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/errors/ tests/resilience/ --tb=short -q --maxfail=1)",
      "Bash(PYTHONPATH=src .venv/bin/pytest -vvv --cov=provide.foundation --cov-branch --cov-report=term-missing -n auto)",
      "Bash(export PYTHONPATH=src)",
      "Bash(.venv/bin/pytest -vvv --cov=provide.foundation --cov-branch --cov-report=term-missing -n auto)",
      "Bash(.venv/bin/pytest tests/errors/test_integration.py::TestErrorSystemIntegration::test_retry_with_circuit_breaker tests/resilience/test_circuit_breaker.py::TestCircuitBreaker::test_half_open_failure_reopens_circuit -n auto -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/errors/test_integration.py::TestErrorSystemIntegration::test_retry_with_circuit_breaker -xvs --capture=no -s --tb=short)",
      "Bash(.venv/bin/pytest tests/errors/test_integration.py::TestErrorSystemIntegration::test_retry_with_circuit_breaker -xvs --capture=no -s --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/resilience/test_circuit_breaker.py::TestCircuitBreaker::test_custom_recovery_timeout -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/errors/ tests/resilience/ --tb=short -q --maxfail=3)",
      "Bash(.venv/bin/python:*)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/resilience/decorators.py src/provide/foundation/testmode/internal.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/resilience/decorators.py src/provide/foundation/testmode/internal.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/resilience/decorators.py src/provide/foundation/testmode/internal.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format /Users/tim/code/gh/provide-io/provide-testkit/src/provide/testkit/logger/reset.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes /Users/tim/code/gh/provide-io/provide-testkit/src/provide/testkit/logger/reset.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/logger/test_logger_production_compliance.py::TestLazyInitializationDocumentation::test_basic_usage_example tests/errors/test_integration.py::TestErrorSystemIntegration::test_retry_with_circuit_breaker -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/errors/test_integration.py::TestErrorSystemIntegration::test_retry_with_circuit_breaker tests/resilience/test_circuit_breaker.py::TestCircuitBreaker::test_half_open_failure_reopens_circuit tests/logger/test_logger_production_compliance.py::TestLazyInitializationDocumentation::test_basic_usage_example -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/errors/ tests/resilience/ tests/logger/test_logger_production_compliance.py --tb=short -q --maxfail=3)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/logger/test_logger_production_compliance.py::TestLazyInitializationDocumentation::test_environment_config_example tests/logger/test_logger_real_world_scenarios.py::TestRealWorldScenarios::test_microservice_with_environment_config -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/logger/test_logger_production_compliance.py::TestDocumentedBehaviorCompliance::test_documented_environment_variables tests/logger/test_logger_production_compliance.py::TestLazyInitializationDocumentation::test_environment_config_example tests/logger/test_logger_real_world_scenarios.py::TestRealWorldScenarios::test_microservice_with_environment_config -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/errors/test_integration.py::TestErrorSystemIntegration::test_retry_with_circuit_breaker tests/resilience/test_circuit_breaker.py::TestCircuitBreaker::test_half_open_failure_reopens_circuit tests/logger/test_logger_production_compliance.py::TestDocumentedBehaviorCompliance::test_documented_environment_variables tests/logger/test_logger_production_compliance.py::TestLazyInitializationDocumentation::test_environment_config_example tests/logger/test_logger_real_world_scenarios.py::TestRealWorldScenarios::test_microservice_with_environment_config -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/errors/ tests/resilience/ tests/logger/test_logger_production_compliance.py tests/logger/test_logger_real_world_scenarios.py --tb=short -q --maxfail=1)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/state/base.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/state/base.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/state/base.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/state/config.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/state/config.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/state/config.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/state/base.py src/provide/foundation/state/config.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/state/transitions.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/state/transitions.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/state/transitions.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/state/managers.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/state/managers.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/state/managers.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/state/test_state_management.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes tests/state/test_state_management.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/state/test_state_management.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/state/test_state_management.py -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/state/test_state_management.py::TestImmutableState::test_with_changes_increments_generation -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/state/test_state_management.py::TestCircuitBreakerStateMachine::test_failure_transitions -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/state/test_state_management.py::TestCircuitBreakerStateMachine::test_failure_transitions -v -s)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/state/test_state_management.py --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/state/test_state_management.py::TestStreamManager::test_reset_to_default -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/state/test_state_management.py::TestStreamManager::test_stream_manager_creation -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/state/test_state_management.py::TestCircuitBreakerStateMachine -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/state/test_state_management.py -k \"not StreamManager\" -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/resilience/test_circuit_breaker.py::TestCircuitBreaker::test_half_open_failure_reopens_circuit -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/resilience/test_circuit_breaker.py -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/errors/test_integration.py::TestErrorSystemIntegration::test_retry_with_circuit_breaker -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/tracer/test_otel.py::TestSetupOpentelemetryTracing::test_setup_otel_not_available -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/resilience/ tests/errors/ --tb=short -q --maxfail=3)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/state/ tests/resilience/test_circuit_breaker.py tests/errors/test_integration.py::TestErrorSystemIntegration::test_retry_with_circuit_breaker --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/state/ src/provide/foundation/resilience/circuit.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/state/ src/provide/foundation/resilience/circuit.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/state/ src/provide/foundation/resilience/circuit.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/resilience/test_circuit_breaker.py::TestCircuitBreaker::test_half_open_failure_reopens_circuit -v --count=5)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check src/provide/foundation/state/ --select F401)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/state/test_state_management.py -v -k \"not StreamManager\")",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/test_file_operations_integration.py::TestFileOperationIntegration::test_size_delta_calculation -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/test_file_operations_integration.py --tb=short -q --maxfail=3)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/state/test_state_management.py src/provide/foundation/testmode/internal.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes tests/state/test_state_management.py src/provide/foundation/testmode/internal.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest --tb=no -q --maxfail=5)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/tracer/test_otel.py::TestSetupOpentelemetryTracing::test_setup_otel_not_available -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/pytest -n auto --tb=line -q --maxfail=10)",
      "Bash(.venv/bin/pytest -n auto --tb=line -q --maxfail=10)",
      "Bash(.venv/bin/pytest tests/logger/test_logger_production_compliance.py::TestProductionReadinessScenarios::test_memory_stability_scenario -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/streams/core.py src/provide/foundation/utils/streams.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/streams/core.py src/provide/foundation/utils/streams.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/streams/core.py src/provide/foundation/utils/streams.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/test_file_operations_integration.py -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/test_file_operations_integration.py::TestFileOperationIntegration::test_size_delta_calculation -n 2 -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/test_file_operations_integration.py -n 4 --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/errors/ tests/resilience/ -n auto --tb=short -q --maxfail=3)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/streams/core.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/streams/core.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/streams/test_console.py::TestIsTTY::test_is_tty_with_non_tty_stream -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/streams/test_console.py --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/test_predictable_initialization.py::TestPredictableInitialization::test_error_recovery_predictable -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/cli/commands/logs/test_send_comprehensive.py::TestSendLogEntry::test_send_http_api_exception_handling -v)",
      "Bash(PYTHONPATH=src python -c \"from provide.foundation.integrations.openobserve.otlp import send_log; print(''Import successful'')\")",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/cli/commands/logs/test_send_comprehensive.py::TestSendLogEntry::test_send_http_api_exception_handling -v -s)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/integrations/openobserve/__init__.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/integrations/openobserve/__init__.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/integrations/openobserve/__init__.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/cli/commands/logs/test_send_comprehensive.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check tests/cli/commands/logs/test_send_comprehensive.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/cli/commands/logs/test_send_comprehensive.py -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/ -k \"openobserve\" --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/resilience/test_circuit_breaker.py::TestCircuitBreaker::test_half_open_failure_reopens_circuit tests/errors/test_integration.py::TestErrorSystemIntegration::test_retry_with_circuit_breaker -v)",
      "Bash(PYTHONPATH=src python -c \"import provide.testkit; help(provide.testkit)\")",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/logger/core.py src/provide/foundation/hub/foundation.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/logger/core.py src/provide/foundation/hub/foundation.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/logger/core.py src/provide/foundation/hub/foundation.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/test_predictable_initialization.py::TestPredictableInitialization::test_deterministic_state_across_restarts -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/hub/test_hub_initialization.py::TestHubInitialization::test_hub_error_recovery tests/hub/test_hub_initialization.py::TestHubInitialization::test_hub_deterministic_state -v)",
      "Bash(.venv/bin/pip:*)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/testmode/orchestration.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/testmode/orchestration.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/testmode/orchestration.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format /Users/tim/code/gh/provide-io/provide-testkit/src/provide/testkit/logger/mocks.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes /Users/tim/code/gh/provide-io/provide-testkit/src/provide/testkit/logger/mocks.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/testmode/__init__.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/testmode/__init__.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/ --tb=short -q --maxfail=5)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/errors/test_integration.py::TestErrorSystemIntegration::test_retry_with_circuit_breaker tests/resilience/test_circuit_breaker.py::TestCircuitBreaker::test_half_open_failure_reopens_circuit tests/cli/commands/logs/test_send_comprehensive.py::TestSendLogEntry::test_send_http_api_exception_handling tests/streams/test_console.py -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/resilience/test_circuit_breaker.py::TestCircuitBreaker::test_half_open_failure_reopens_circuit tests/errors/test_integration.py::TestErrorSystemIntegration::test_retry_with_circuit_breaker -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/resilience/test_circuit_breaker.py tests/errors/test_integration.py::TestErrorSystemIntegration::test_retry_with_circuit_breaker -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/resilience/test_circuit_breaker.py::TestCircuitBreaker::test_half_open_failure_reopens_circuit tests/errors/test_integration.py::TestErrorSystemIntegration::test_retry_with_circuit_breaker -v --count=3)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/resilience/test_circuit_breaker.py::TestCircuitBreaker::test_half_open_failure_reopens_circuit tests/errors/test_integration.py::TestErrorSystemIntegration::test_retry_with_circuit_breaker -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/resilience/test_circuit_breaker.py::TestCircuitBreaker::test_half_open_failure_reopens_circuit tests/errors/test_integration.py::TestErrorSystemIntegration::test_retry_with_circuit_breaker --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/resilience/test_circuit_breaker.py tests/errors/test_integration.py::TestErrorSystemIntegration::test_retry_with_circuit_breaker --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/resilience/ tests/errors/test_integration.py::TestErrorSystemIntegration::test_retry_with_circuit_breaker --tb=short -q --maxfail=1)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/test_predictable_initialization.py tests/resilience/test_circuit_breaker.py::TestCircuitBreaker::test_half_open_failure_reopens_circuit tests/errors/test_integration.py::TestErrorSystemIntegration::test_retry_with_circuit_breaker tests/cli/commands/test_deps_coverage.py::TestDepsCommandWithClick::test_deps_command_with_click --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/resilience/test_circuit_breaker.py::TestCircuitBreaker::test_half_open_failure_reopens_circuit tests/errors/test_integration.py::TestErrorSystemIntegration::test_retry_with_circuit_breaker tests/logger/test_logger_production_compliance.py::TestLazyInitializationDocumentation::test_basic_usage_example -q)",
      "Bash(PYTHONPATH=src .venv/bin/grep -n \"def test_retry_with_circuit_breaker\" -A 50 tests/errors/test_integration.py)",
      "Bash(PYTHONPATH=src grep -n \"def test_retry_with_circuit_breaker\" -A 50 tests/errors/test_integration.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/resilience/test_circuit_breaker.py::TestCircuitBreaker::test_half_open_failure_reopens_circuit tests/errors/test_integration.py::TestErrorSystemIntegration::test_retry_with_circuit_breaker -s)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/testmode/internal.py src/provide/foundation/integrations/openobserve/__init__.py)"
    ],
    "deny": [],
    "ask": [],
    "additionalDirectories": [
      "/Users/tim/code/gh/provide-io"
    ]
  }
}