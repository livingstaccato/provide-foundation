{
  "permissions": {
    "allow": [
      "Bash(PYTHONPATH=src .venv/bin/ruff format /Users/tim/code/gh/provide-io/provide-testkit/src/provide/testkit/streams.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes /Users/tim/code/gh/provide-io/provide-testkit/src/provide/testkit/streams.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/integration/test_integration_coverage_100.py::test_log_file_redirection -xvs --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_config_sync_simple.py::TestSyncModuleCoverage::test_load_config_from_env_parameters -xvs)",
      "Bash(PYTHONPATH=src python:*)",
      "Bash(PYTHONPATH=src grep -n -A 50 \"async def from_env_async\" /Users/tim/code/gh/provide-io/provide-foundation/src/provide/foundation/config/env.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/config/env.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/config/env.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/config/env.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_config_sync_simple.py::TestSyncModuleCoverage::test_load_config_from_env_parameters tests/integration/test_integration_coverage_100.py::test_log_file_redirection -v)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/streams/core.py src/provide/foundation/streams/file.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/streams/core.py src/provide/foundation/streams/file.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/streams/core.py src/provide/foundation/streams/file.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/integration/test_integration_coverage_100.py::test_log_file_redirection -v)",
      "Bash(PYTHONPATH=src grep -n \"is_in_click_testing\" src/provide/foundation/streams/file.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/integration/test_integration_coverage_100.py::test_log_file_redirection -v -s)",
      "Bash(PYTHONPATH=src grep -r \"configure_file_logging\" src/provide/foundation/ --include=\"*.py\")",
      "Bash(PYTHONPATH=src grep -n -A 10 -B 5 \"configure_file_logging\" src/provide/foundation/logger/setup/coordinator.py)",
      "Bash(PYTHONPATH=src grep -n -A 15 \"def configure_structlog_output\" src/provide/foundation/logger/setup/)",
      "Bash(PYTHONPATH=src grep -r -n -A 15 \"def configure_structlog_output\" src/provide/foundation/logger/setup/)",
      "Bash(PYTHONPATH=src grep -r -n -A 10 \"def apply_structlog_configuration\" src/provide/foundation/logger/setup/)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/streams/file.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/streams/file.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/streams/file.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/streams/ --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_config_env.py::TestRuntimeConfigClass::test_from_env_with_prefix -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_config_env.py::TestRuntimeConfigClass -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/ --tb=short -q --maxfail=5)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_config_sync_simple.py::TestSyncModuleCoverage::test_load_config_from_env_parameters -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_config_env.py::TestRuntimeConfigClass -v)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/config/test_config_sync_simple.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes tests/config/test_config_sync_simple.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_config_env.py tests/config/test_config_sync_simple.py::TestSyncModuleCoverage::test_load_config_from_env_parameters --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/integration/test_integration_core.py::test_configuration_from_environment -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/integration/test_integration_core.py::test_explicit_configuration_override tests/integration/test_integration_core.py::test_foundation_testbed_integration tests/integration/test_integration_coverage_100.py::test_log_level_case_insensitivity tests/integration/test_integration_coverage_100.py::test_no_color_env_var --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/integration/test_integration_coverage_100.py::test_shutdown_and_reinit tests/integration/test_integration_coverage_100.py::test_json_formatter_from_env tests/logger/test_logger_production_compliance.py::TestProductionReadinessScenarios::test_high_throughput_scenario --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/logger/test_logger_production_compliance.py::TestProductionReadinessScenarios::test_high_throughput_scenario tests/integration/test_integration_core.py::test_configuration_from_environment tests/integration/test_integration_core.py::test_explicit_configuration_override tests/integration/test_integration_core.py::test_foundation_testbed_integration tests/integration/test_integration_coverage_100.py::test_log_level_case_insensitivity tests/integration/test_integration_coverage_100.py::test_shutdown_and_reinit tests/integration/test_integration_coverage_100.py::test_json_formatter_from_env tests/integration/test_integration_coverage_100.py::test_no_color_env_var -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/integration/test_integration_core.py::test_foundation_testbed_integration -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/logger/test_logger_production_compliance.py::TestProductionReadinessScenarios::test_high_throughput_scenario tests/integration/test_integration_core.py::test_configuration_from_environment tests/integration/test_integration_core.py::test_explicit_configuration_override tests/integration/test_integration_core.py::test_foundation_testbed_integration tests/integration/test_integration_coverage_100.py::test_log_level_case_insensitivity tests/integration/test_integration_coverage_100.py::test_shutdown_and_reinit tests/integration/test_integration_coverage_100.py::test_json_formatter_from_env tests/integration/test_integration_coverage_100.py::test_no_color_env_var --tb=short -q)",
      "Read(//private/tmp/**)",
      "Bash(env)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/integration/test_integration_core.py::test_basic_initialization_and_logging -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/integration/test_integration_core.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes tests/integration/test_integration_core.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/integration/test_integration_core.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_config_env.py -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_config_loader.py -v)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check tests/config/test_config_loader.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/ --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/python:*)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_config_manager_coverage.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_config_manager_coverage.py -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/ -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/config/ tests/config/)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/config/)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/config/ tests/config/)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/config/ --ignore-missing-imports)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/config/)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/config/)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_schema_field.py::TestSchemaFieldEdgeCases::test_validate_complex_nested_validation -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_schema_simple_coverage.py::TestValidators::test_validate_url_accessible tests/config/test_schema_validators.py::TestBuiltinValidators::test_validate_url_accessible tests/config/test_schema_config.py::TestConfigSchemaComprehensive::test_validate_all_required_fields_present -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_schema_simple_coverage.py::TestValidators::test_validate_url_accessible tests/config/test_schema_validators.py::TestBuiltinValidators::test_validate_url_accessible tests/config/test_schema_config.py -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_schema_field.py::TestSchemaFieldComprehensive::test_validate_sync_validator_fail_2 -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_schema_field.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_config_env.py tests/config/test_config_manager_coverage.py -q --tb=line)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_schema*.py -q)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/config/test_schema_field.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/config/defaults.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/resilience/retry.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/resilience/retry.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/crypto/certificates/certificate.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/tracer/spans.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/tracer/spans.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/transport/middleware.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/transport/middleware.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/state/_internal/transitions.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/state/_internal/transitions.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/conftest.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/config/defaults.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/ -q --tb=short --maxfail=5)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/crypto/certificates/generator.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/crypto/certificates/generator.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/crypto/certificates/generator.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/logger/types.py src/provide/foundation/config/types.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/crypto/ -v --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/ -v --tb=short -q --maxfail=5)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/logger/types.py src/provide/foundation/config/types.py src/provide/foundation/crypto/certificates/generator.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_rate_limiting.py::TestTokenBucketRateLimiter::test_extreme_time_precision -xvs --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_rate_limiting.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_rate_limiting.py::TestTokenBucketRateLimiter::test_extreme_time_precision -n auto --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/ -n auto --tb=short --maxfail=1)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_rate_limiting.py::TestTokenBucketRateLimiter::test_extreme_time_precision tests/config/ tests/integration/ -n auto --tb=short --maxfail=1)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/ -k \"concurrency or timing or precision or thread\" --collect-only -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_rate_limiting.py::TestTokenBucketRateLimiter::test_extreme_time_precision tests/concurrency/ tests/hub/test_hub_thread_safety.py tests/logger/ratelimit/ tests/utils/test_utils_timing.py -n auto --tb=short --maxfail=1)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes /Users/tim/code/gh/provide-io/provide-foundation/src/provide/foundation/hub/foundation.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/process/test_process_runner_coverage.py::TestProcessRunnerCoverage::test_stream_command_timeout_handling -xvs --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/config/test_config_loader.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes tests/config/test_config_loader.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/config/test_config_loader.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_config_loader.py::TestFileConfigLoader::test_load_resilient_decorator -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_config_loader.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_config_loader.py::TestMultiSourceLoader::test_load_merge_sources -v)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/crypto/test_crypto_stubs.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes tests/crypto/test_crypto_stubs.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/crypto/test_crypto_stubs.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/crypto/test_crypto_stubs.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/file/test_file_operations.py -v)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/file/test_file_operations.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes tests/file/test_file_operations.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/file/test_file_operations.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/file/test_file_operations.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/transport/test_middleware_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes tests/transport/test_middleware_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/transport/test_middleware_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/transport/test_middleware_coverage.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/state/test_transitions_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes tests/state/test_transitions_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/state/test_transitions_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/state/test_transitions_coverage.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/state/test_transitions_coverage.py::TestCircuitBreakerStateMachineEdgeCases::test_transitions_from_all_states_to_reset -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/resilience/test_retry_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes tests/resilience/test_retry_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/resilience/test_retry_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/resilience/test_retry_coverage.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/resilience/test_retry_coverage.py::TestRetryPolicyEdgeCases::test_unknown_backoff_strategy_fallback -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest -x --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/crypto/ -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/crypto/ -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest --cov=src/provide/foundation --cov-report=term-missing --cov-report=html -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest --cov=src/provide/foundation --cov-report=term-missing --tb=no -x --maxfail=1 tests/config/ tests/file/ tests/transport/ tests/state/ tests/resilience/ -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/archive/test_operations.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_formatting_coverage.py -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_formatting_coverage.py -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_parsing_coverage.py -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_parsing_coverage.py -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_timing_coverage.py -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_rate_limiting_coverage.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_rate_limiting_coverage.py -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/ --cov=src/provide/foundation/utils --cov-report=term-missing -q --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/resilience/test_retry_coverage.py tests/file/test_file_operations.py tests/transport/test_middleware_coverage.py --cov=src/provide/foundation --cov-report=term-missing -q --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_formatting_coverage.py tests/utils/test_parsing_coverage.py tests/utils/test_timing_coverage.py tests/utils/test_rate_limiting_coverage.py --cov=src/provide/foundation/utils --cov-report=term-missing -v)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/utils/test_deps_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes tests/utils/test_deps_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/utils/test_deps_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_deps_coverage.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_deps_coverage.py::TestCheckClick::test_check_click_version_exception -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_deps_coverage.py::TestCheckOpenTelemetry -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_deps_coverage.py -q --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_deps_coverage.py --cov=src/provide/foundation/utils/deps --cov-report=term-missing -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_deps_coverage.py tests/utils/test_formatting_coverage.py tests/utils/test_parsing_coverage.py tests/utils/test_timing_coverage.py tests/utils/test_rate_limiting_coverage.py --cov=src/provide/foundation/utils --cov-report=term-missing -q --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_streams_coverage.py --cov=src/provide/foundation/utils/streams --cov-report=term-missing -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_deps_coverage.py tests/utils/test_formatting_coverage.py tests/utils/test_parsing_coverage.py tests/utils/test_timing_coverage.py tests/utils/test_rate_limiting_coverage.py tests/utils/test_streams_coverage.py --cov=src/provide/foundation/utils --cov-report=term-missing -q --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest --cov=src/provide/foundation --cov-report=term-missing --cov-report=html -q --maxfail=5 tests/config/ tests/file/ tests/transport/ tests/state/ tests/resilience/ tests/utils/test_deps_coverage.py tests/utils/test_formatting_coverage.py tests/utils/test_parsing_coverage.py tests/utils/test_timing_coverage.py tests/utils/test_rate_limiting_coverage.py tests/utils/test_streams_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_utils_deps_coverage.py -q --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_utils_deps_coverage.py tests/utils/test_formatting_coverage.py tests/utils/test_parsing_coverage.py tests/utils/test_timing_coverage.py tests/utils/test_rate_limiting_coverage.py tests/utils/test_streams_coverage.py --cov=src/provide/foundation/utils --cov-report=term-missing -q --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest --cov=src/provide/foundation --cov-report=term:skip-covered --cov-report=html -q --tb=no)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/utils/test_environment_getters_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes tests/utils/test_environment_getters_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_environment_getters_coverage.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/utils/test_environment_getters_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/utils/test_environment_getters_coverage.py --ignore-missing-imports)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_environment_getters_coverage.py --cov=src/provide/foundation/utils/environment/getters --cov-report=term-missing -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_environment_getters_coverage.py --cov=src/provide/foundation/utils --cov-report=term-missing -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_environment_parsers_coverage.py -v --tb=short)",
      "Bash(python3:*)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/utils/test_environment_parsers_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes tests/utils/test_environment_parsers_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/utils/test_environment_parsers_coverage.py --ignore-missing-imports)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_environment_parsers_coverage.py --cov=src/provide/foundation/utils/environment/parsers --cov-report=term-missing -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_environment_parsers_coverage.py --cov=src/provide/foundation/utils --cov-report=term-missing -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_environment_prefix_coverage.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/utils/test_environment_prefix_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes tests/utils/test_environment_prefix_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/utils/test_environment_prefix_coverage.py --ignore-missing-imports)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_environment_prefix_coverage.py --cov=src/provide/foundation/utils --cov-report=term-missing -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_environment_getters_coverage.py tests/utils/test_environment_parsers_coverage.py tests/utils/test_environment_prefix_coverage.py --cov=src/provide/foundation/utils --cov-report=term-missing -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/ --cov=src/provide/foundation/utils --cov-report=term-missing -q --tb=short --maxfail=3)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_config_manager_coverage.py --cov=src/provide/foundation/config/manager --cov-report=term-missing -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_config_manager_coverage.py --cov=src/provide/foundation/config --cov-report=term-missing -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/ --cov=src/provide/foundation --cov-report=term:skip-covered --tb=no -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils tests/config/test_config_manager_coverage.py --cov=src/provide/foundation --cov-report=term-missing --tb=no -q)",
      "Bash(sort:*)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils --cov=src/provide/foundation --cov-report=term-missing --tb=no -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest --cov=src/provide/foundation/utils --cov-report=term-missing -q --tb=no)",
      "Bash(PYTHONPATH=src .venv/bin/pytest --cov=src/provide/foundation/utils --cov-report=term --tb=no -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_formatting_coverage.py tests/utils/test_timing_coverage.py tests/utils/test_streams_coverage.py tests/utils/test_rate_limiting_coverage.py --cov=src/provide/foundation/utils --cov-report=term --tb=no -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/ --cov=src/provide/foundation/utils --cov-report=term-missing --tb=no -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/ --cov=src/provide/foundation/utils --cov-report=term --tb=no -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest --cov=src/provide/foundation --cov-report=term --tb=no -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest --cov=src/provide/foundation --cov-report=term:skip-covered --tb=no -x --maxfail=1 tests/config/ tests/file/ tests/transport/ tests/state/ tests/resilience/ tests/utils/ -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_environment_getters_coverage.py tests/utils/test_environment_parsers_coverage.py tests/utils/test_environment_prefix_coverage.py tests/utils/test_utils_deps_coverage.py tests/utils/test_formatting_coverage.py tests/utils/test_timing_coverage.py tests/utils/test_streams_coverage.py tests/utils/test_rate_limiting_coverage.py --cov=src/provide/foundation/utils --cov-report=term --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_environment_getters_coverage.py tests/utils/test_environment_parsers_coverage.py tests/utils/test_environment_prefix_coverage.py tests/utils/test_utils_deps_coverage.py --cov=src/provide/foundation/utils/environment --cov=src/provide/foundation/utils/deps.py --cov-report=term-missing -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_environment_getters_coverage.py --cov=src/provide/foundation/utils/environment/getters.py --cov-report=term-missing --tb=no -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_environment_getters_coverage.py --cov=src/provide/foundation/utils/environment/getters.py --cov-report=term --tb=no -q)",
      "Bash(echo $SHELL)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/formatting/test_grouping_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes tests/formatting/test_grouping_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/formatting/test_grouping_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/formatting/test_grouping_coverage.py --ignore-missing-imports)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/formatting/test_grouping_coverage.py --cov=src/provide/foundation/formatting/grouping.py --cov-report=term-missing -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/formatting/test_grouping_coverage.py --cov=src/provide/foundation/formatting/grouping.py --cov-report=term-missing --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/formatting/test_grouping_coverage.py --cov=src/provide/foundation/formatting --cov-report=term-missing --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/observability/test_observability_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes tests/observability/test_observability_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/observability/test_observability_coverage.py --ignore-missing-imports)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/formatting/test_grouping_coverage.py tests/observability/test_observability_coverage.py --cov=src/provide/foundation/formatting/grouping.py --cov=src/provide/foundation/observability/__init__.py --cov-report=term-missing --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/observability/test_observability_coverage.py --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/formatting/test_grouping_coverage.py --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/env/test_env_types_coverage.py tests/docs/test_docs_init_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes tests/env/test_env_types_coverage.py tests/docs/test_docs_init_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/env/test_env_types_coverage.py tests/docs/test_docs_init_coverage.py --ignore-missing-imports)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/process/test_lifecycle.py::TestManagedProcess::test_launch_twice_raises_error -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/context/test_context_core.py::TestContext::test_context_immutable_after_freeze -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/context/ -x)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/process/ -x)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/process/lifecycle.py src/provide/foundation/process/runner.py src/provide/foundation/hub/initialization.py src/provide/foundation/integrations/openobserve/streaming.py src/provide/foundation/resilience/decorators.py src/provide/foundation/context/core.py tests/context/test_context_core.py tests/process/test_lifecycle.py tests/process/test_lifecycle_comprehensive_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check:*)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/process/test_lifecycle.py tests/context/test_context_core.py::TestContext::test_context_immutable_after_freeze -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/observability/test_observability_coverage.py::TestObservabilityModule::test_has_otel_detection_with_otel -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/observability/test_observability_coverage.py -n auto --maxfail=1 -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/env/test_env_types_coverage.py::TestEnvTypes::test_env_parser_type_alias -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/env/test_env_types_coverage.py::TestEnvTypes::test_env_parser_type_alias tests/resilience/test_retry_decorator.py::TestRetryDecoratorParameterValidation::test_conflicting_parameters tests/hub/test_hub_context.py::TestContext::test_context_immutable_after_freeze -v)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/env/test_env_types_coverage.py tests/resilience/test_retry_decorator.py tests/hub/test_hub_context.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/env/test_env_types_coverage.py tests/hub/test_hub_context.py --ignore-missing-imports)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/env/test_env_types_coverage.py::TestEnvTypes::test_env_parser_type_alias tests/resilience/test_retry_decorator.py::TestRetryDecoratorParameterValidation::test_conflicting_parameters tests/hub/test_hub_context.py::TestContext::test_context_immutable_after_freeze -x --tb=short)",
      "Bash(PYTHONPATH=src pytest tests/config/test_config_env.py::TestRuntimeConfigClass::test_from_env_with_prefix -v --tb=short)",
      "Bash(PYTHONPATH=src pytest tests/cli/test_cli_integration.py::TestCompleteCliIntegration::test_json_output_with_errors -v --tb=short)",
      "Bash(PYTHONPATH=src pytest tests/cli/test_cli_integration.py -v --collect-only)",
      "Bash(PYTHONPATH=src pytest tests/cli/test_cli_integration.py --collect-only)",
      "Bash(PYTHONPATH=src pytest tests/cli/test_cli_integration.py::TestOutputFormatting::test_json_output_format -v --tb=short)",
      "Bash(PYTHONPATH=src pytest tests/resilience/test_retry_executor.py::TestRetryExecutorSync::test_delay_between_retries -v --tb=short)",
      "Bash(PYTHONPATH=src pytest tests/context/test_context_core.py::TestContext::test_context_initialization -v --tb=short)",
      "Bash(PYTHONPATH=src pytest tests/resilience/test_retry_executor.py::TestRetryExecutorSync::test_successful_first_attempt -v --tb=short)",
      "Bash(PYTHONPATH=src pytest tests/formatting/test_grouping_coverage.py::TestFormatGrouped::test_format_grouped_basic -v --tb=short)",
      "Bash(PYTHONPATH=src pytest tests/resilience/test_retry_executor.py::TestRetryExecutorAsync::test_delay_between_retries -v --tb=short)",
      "Bash(xargs dirname:*)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_environment.py -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_deps.py -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_environment_getters_coverage.py -v)",
      "Bash(PYTHONPATH=src .venv/bin/rg \"^class Test\" tests/utils/test_environment_prefix_coverage.py tests/utils/test_environment_parsers_coverage.py tests/utils/test_utils_deps_coverage.py -n)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_environment_prefix_coverage.py --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_environment_parsers_coverage.py tests/utils/test_utils_deps_coverage.py --tb=short -q)",
      "Bash(then echo \"$file\")",
      "Bash(fi)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_formatting.py --tb=short -q)",
      "Bash(then echo \"Need to update: $file\")",
      "Bash([ \"$file\" != \"tests/config/test_config_logger.py\" ])",
      "Bash(then echo \"=== $file ===\")",
      "Bash(head:*)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_config_manager_coverage.py tests/config/test_schema_validators.py tests/config/test_validators_coverage.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_config_manager_coverage.py -q --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_schema_config.py tests/config/test_schema_field.py tests/config/test_config_manager_coverage.py tests/config/test_schema_validators.py tests/config/test_validators_coverage.py -q --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/test_config_manager.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/ -q --tb=short --maxfail=5)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/config/ --collect-only -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_rate_limiting_coverage.py::TestTokenBucketRateLimiter::test_is_allowed_refill_over_time -xvs --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_rate_limiting_coverage.py -q --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/utils/test_rate_limiting_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/utils/test_rate_limiting_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/utils/test_rate_limiting_coverage.py::TestTokenBucketRateLimiter::test_is_allowed_refill_over_time -n auto --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/state/test_state_management.py::TestCircuitBreaker -xvs --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/state/test_state_management.py::TestCircuitBreaker -q --tb=no)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/state/test_state_management.py::TestCircuitBreaker -q --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/state/test_state_management.py::TestCircuitBreaker::test_open_to_half_open_after_timeout -xvs --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/state/test_state_management.py::TestCircuitBreaker -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/process/test_lifecycle.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/state/test_state_management.py tests/process/test_lifecycle.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/state/test_state_management.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/state/test_state_management.py::TestCircuitBreaker::test_half_open_success_closes_circuit -xvs --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/process/test_lifecycle_comprehensive_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy tests/process/test_lifecycle_comprehensive_coverage.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/process/test_lifecycle_comprehensive_coverage.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/errors/test_integration.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/state/test_transitions_coverage.py::TestCircuitBreakerStateMachineEdgeCases::test_guard_function_behavior -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/state/test_transitions_coverage.py::TestCircuitBreakerStateMachineEdgeCases::test_transitions_from_all_states_to_reset tests/state/test_transitions_coverage.py::TestCircuitBreakerStateMachineEdgeCases::test_attempt_reset_action_method -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/errors/test_integration.py -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/errors/test_integration.py::TestErrorSystemIntegration::test_retry_with_circuit_breaker -v --tb=short)"
    ],
    "deny": [],
    "ask": [],
    "additionalDirectories": [
      "/Users/tim/code/gh/provide-io"
    ]
  }
}