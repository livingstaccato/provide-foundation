{
  "permissions": {
    "allow": [
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/hub/initialization.py src/provide/foundation/hub/foundation.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/hub/initialization.py src/provide/foundation/hub/foundation.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/hub/initialization.py src/provide/foundation/hub/foundation.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/testmode/internal.py src/provide/foundation/testmode/__init__.py src/provide/foundation/hub/initialization.py src/provide/foundation/hub/foundation.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/testmode/internal.py src/provide/foundation/testmode/__init__.py src/provide/foundation/hub/initialization.py src/provide/foundation/hub/foundation.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/testmode/internal.py src/provide/foundation/testmode/__init__.py src/provide/foundation/hub/initialization.py src/provide/foundation/hub/foundation.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/hub/ -x --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/hub/test_hub_initialization.py::TestHubInitialization::test_hub_idempotent_initialization -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/cli/ -x --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/hub/protocols.py src/provide/foundation/hub/registry.py src/provide/foundation/hub/manager.py src/provide/foundation/hub/__init__.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/hub/protocols.py src/provide/foundation/hub/registry.py src/provide/foundation/hub/manager.py src/provide/foundation/hub/__init__.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/hub/protocols.py src/provide/foundation/hub/registry.py src/provide/foundation/hub/manager.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/resilience/bulkhead.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/resilience/bulkhead.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/resilience/bulkhead.py)",
      "Bash(PYTHONPATH=src .venv/bin/python:*)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/hub/ -x --tb=short -q --maxfail=3)",
      "Bash(PYTHONPATH=src .venv/bin/pytest --tb=short -q --maxfail=5)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/integration/ -x --tb=short -q)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/logger/ -x --tb=short -q --maxfail=3)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format examples/architecture_improvements.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes examples/architecture_improvements.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/logger/setup/coordinator.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/logger/setup/coordinator.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/logger/setup/coordinator.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/testmode/internal.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/testmode/internal.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/testmode/internal.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/logger/test_logger_production_compliance.py::TestProductionReadinessScenarios::test_graceful_shutdown_scenario -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/hub/manager.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/hub/manager.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/hub/manager.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/hub/components.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/hub/components.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/hub/components.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/logger/core.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/logger/core.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/logger/setup/coordinator.py src/provide/foundation/setup/__init__.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/logger/setup/coordinator.py src/provide/foundation/setup/__init__.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/logger/setup/coordinator.py src/provide/foundation/setup/__init__.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/ -x --tb=short -q --maxfail=5)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/hub/test_components_cleanup_misc.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check tests/hub/test_components_cleanup_misc.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/hub/test_components_cleanup_misc.py -v)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/hub/lifecycle.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/hub/lifecycle.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/hub/lifecycle.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/hub/test_components_cleanup_misc.py::TestAdvancedCleanup::test_cleanup_all_components_with_async_cleanup -v)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/hub/config.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/hub/config.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/hub/config.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/hub/discovery.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/hub/discovery.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/hub/discovery.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/hub/test_components_cleanup_misc.py::TestMiscellaneousFunctionality::test_discover_components_stub -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/hub/test_components_coverage.py tests/hub/test_components_config_pipeline.py -v)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/hub/processors.py src/provide/foundation/hub/handlers.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/hub/processors.py src/provide/foundation/hub/handlers.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/hub/processors.py src/provide/foundation/hub/handlers.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/hub/test_components_config_pipeline.py::TestProcessorPipeline::test_get_processor_pipeline tests/hub/test_components_config_pipeline.py::TestProcessorPipeline::test_get_processors_for_stage -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/hub/test_hub_initialization.py::TestHubInitialization::test_hub_config_precedence -v)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/logger/setup/coordinator.py src/provide/foundation/concurrency/locks.py src/provide/foundation/hub/initialization.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/logger/setup/coordinator.py src/provide/foundation/concurrency/locks.py src/provide/foundation/hub/initialization.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/logger/setup/coordinator.py src/provide/foundation/concurrency/locks.py src/provide/foundation/hub/initialization.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/hub/test_hub_initialization.py::TestHubInitialization::test_hub_idempotent_initialization -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/hub/test_hub_initialization.py::TestHubInitialization::test_hub_config_precedence tests/hub/test_hub_initialization.py::TestHubInitialization::test_hub_idempotent_initialization -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/hub/test_hub_initialization.py -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/hub/test_components_cleanup_misc.py::TestMiscellaneousFunctionality::test_bootstrap_foundation_creates_default_components -v -s)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/integration/test_integration_coverage_100.py::test_logger_base_error_while_waiting_for_lock -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/core/test_core_fixes.py::test_lazy_setup_flags -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/integration/test_integration_verification.py::test_lazy_setup_flags -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/logger/test_logger_production_compliance.py::TestDocumentedBehaviorCompliance::test_documented_environment_variables -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/logger/test_logger_production_compliance.py::TestDocumentedBehaviorCompliance::test_documented_environment_variables -xvs --tb=long)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/logger/test_logger_production_compliance.py::TestLazyInitializationDocumentation::test_environment_config_example -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/logger/test_logger_real_world_scenarios.py::TestRealWorldScenarios::test_microservice_with_environment_config -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/core/test_core_service_name_fix.py::test_key_value_still_has_emojis -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/test_predictable_initialization.py::TestPredictableInitialization::test_configuration_precedence_predictable -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/errors/test_integration.py::TestErrorSystemIntegration::test_retry_with_circuit_breaker -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format tests/test_predictable_initialization.py)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/core/test_core_service_name_fix.py::test_key_value_still_has_emojis tests/errors/test_integration.py::TestErrorSystemIntegration::test_retry_with_circuit_breaker -v)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/cli/commands/test_deps_coverage.py::TestDepsCommandWithClick::test_deps_command_with_click -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/pytest --tb=line -q --maxfail=5)",
      "Bash(PYTHONPATH=src .venv/bin/pytest tests/resilience/test_circuit_breaker.py::TestCircuitBreaker::test_half_open_failure_reopens_circuit -xvs)",
      "Bash(PYTHONPATH=src .venv/bin/pytest --tb=short -q --maxfail=2)",
      "Bash(PYTHONPATH=src .venv/bin/ruff format src/provide/foundation/resilience/decorators.py)",
      "Bash(PYTHONPATH=src .venv/bin/ruff check --fix --unsafe-fixes src/provide/foundation/resilience/decorators.py)",
      "Bash(PYTHONPATH=src .venv/bin/mypy src/provide/foundation/resilience/decorators.py)"
    ],
    "deny": [],
    "ask": [],
    "additionalDirectories": [
      "/Users/tim/code/gh/provide-io"
    ]
  }
}