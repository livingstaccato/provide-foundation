{
  "permissions": {
    "allow": [
      "Bash(PYTHONPATH=src pytest tests/logger/test_asyncio_suppression.py tests/config/test_defaults.py -v -q)",
      "Bash(PYTHONPATH=src pytest tests/conversion/test_inference_concurrency_safety.py::TestInferenceConcurrencySafety::test_concurrent_inference_is_isolated -xvs)",
      "Bash(PYTHONPATH=src pytest tests/validation/test_enterprise_recursion.py::TestAdvancedRecursionDetection::test_handles_legitimate_deep_nesting -xvs)",
      "Bash(PYTHONPATH=src pytest -x --tb=short)",
      "Bash(PYTHONPATH=src pytest tests/conversion/test_inference_cache_context.py::TestInferenceCacheContext::test_nested_context_reuses_existing_cache -xvs)",
      "Bash(PYTHONPATH=src pytest tests/conversion/test_inference_concurrency_safety.py::TestInferenceConcurrencySafety::test_concurrent_inference_is_isolated tests/validation/test_enterprise_recursion.py::TestAdvancedRecursionDetection::test_handles_legitimate_deep_nesting -v)",
      "Bash(PYTHONPATH=src pytest --tb=no -q)",
      "Bash(PYTHONPATH=src mypy src/ --show-error-codes --no-error-summary)",
      "Bash(PYTHONPATH=src mypy src/)",
      "Bash(PYTHONPATH=src pytest --run-benchmarks -v)",
      "Bash(PYTHONPATH=src pytest tests/logger/test_asyncio_suppression.py -v -q)",
      "Bash(PYTHONPATH=src pytest tests/utils/test_formatting.py -v)",
      "Bash(PYTHONPATH=src pytest tests/utils/test_utils_coverage.py -v)",
      "Bash(PYTHONPATH=src pytest tests/utils/test_formatting.py tests/utils/test_utils_coverage.py --tb=no -q)",
      "Bash(PYTHONPATH=src python -c \"from provide.foundation.utils.text_utils import format_table; print(''Text utils import works'')\")",
      "Bash(PYTHONPATH=src pytest tests/utils/test_formatting.py::TestSizeFormatting::test_format_size_bytes -v)",
      "Bash(PYTHONPATH=src pytest -xvs tests/conversion/test_inference_concurrency_safety.py::TestInferenceConcurrencySafety::test_concurrent_inference_is_isolated)",
      "Bash(PYTHONPATH=src python:*)",
      "Bash(PYTHONPATH=src pytest tests/logger/ -v -q --tb=short)",
      "Bash(PYTHONPATH=src pytest tests/logger/test_asyncio_suppression.py::TestAsyncioDebugSuppression::test_asyncio_module_hierarchy_filtering -v)",
      "Bash(PYTHONPATH=src pytest tests/hub/test_hub_init_coverage.py::TestHubModuleBehavior::test_module_docstring_present -v -s)",
      "Bash(PYTHONPATH=src pytest tests/hub/test_hub_init_coverage.py::TestHubModuleBehavior::test_module_docstring_present -v)",
      "Bash(PYTHONPATH=src pytest tests/hub/ tests/logger/ -q --tb=no)",
      "Bash(PYTHONPATH=src mypy src/provide/foundation/logger/ --show-error-codes --no-error-summary)",
      "Bash(PYTHONPATH=src grep -n \"otel_trace\" src/provide/foundation/logger/processors/trace.py)",
      "Bash(PYTHONPATH=src mypy src/provide/foundation/hub/foundation.py src/provide/foundation/observability/__init__.py src/provide/foundation/cli/main.py --show-error-codes --no-error-summary)",
      "Bash(PYTHONPATH=src mypy --version)",
      "Bash(PYTHONPATH=src mypy src/provide/foundation/hub/foundation.py src/provide/foundation/observability/__init__.py src/provide/foundation/cli/ --show-error-codes --no-error-summary)",
      "Bash(PYTHONPATH=src pytest --co -q)",
      "Bash(PYTHONPATH=src pytest tests/logger/processors/test_trace_coverage.py::TestTraceProcessorWithOtel::test_inject_trace_context_with_otel_span -xvs)",
      "Bash(PYTHONPATH=src pytest -x --tb=short -q)",
      "Bash(PYTHONPATH=src pytest tests/logger/processors/test_trace_coverage.py::TestTraceProcessorImports::test_otel_import_handling -xvs)",
      "Bash(PYTHONPATH=src pytest tests/test_docs_generator.py::TestAPIDocGenerator::test_should_skip_small_init_files -xvs)",
      "Bash(PYTHONPATH=src pytest tests/test_docs_generator.py::TestAPIDocGenerator::test_should_skip_private_modules -xvs)",
      "Bash(PYTHONPATH=src pytest tests/test_docs_generator.py::TestAPIDocGenerator::test_should_skip_skip_patterns -xvs)",
      "Bash(PYTHONPATH=src pytest tests/test_docs_generator.py --collect-only)",
      "Bash(PYTHONPATH=src pytest tests/test_docs_generator.py -v)",
      "Bash(PYTHONPATH=src pytest tests/test_docs_generator.py::TestAPIDocGenerator::test_generate_full_workflow -xvs)",
      "Bash(PYTHONPATH=src pytest tests/test_docs_generator.py::TestAPIDocGeneratorIntegration::test_real_file_processing -xvs)",
      "Bash(PYTHONPATH=src ty)",
      "Bash(PYTHONPATH=src pytest tests/test_docs_generator.py -v -q)",
      "Bash(PYTHONPATH=src pytest tests/test_docs_generator.py::TestAPIDocGenerator::test_init_default_values -v -q)",
      "Bash(while read dir)",
      "WebSearch",
      "Bash(xargs dirname:*)",
      "Bash(PYTHONPATH=src mypy src/pyvider/rpcplugin/client/ --show-error-codes --no-error-summary)",
      "Bash(PYTHONPATH=src mypy src/pyvider/rpcplugin/client/core.py --show-error-codes --no-error-summary)",
      "Bash(PYTHONPATH=src rg \"self: ClientProtocol\" src/pyvider/rpcplugin/client/handshake.py)",
      "Bash(PYTHONPATH=src rg \"self: ClientProtocol\" src/pyvider/rpcplugin/client/process.py)",
      "Bash(PYTHONPATH=src rg \"def.*address.*:.*str[^|]\" src/pyvider/rpcplugin/client/)",
      "Bash(PYTHONPATH=src mypy src/pyvider/rpcplugin/client/handshake.py --show-error-codes --no-error-summary)",
      "Bash(echo \"Exit code: $?\")",
      "Bash(PYTHONPATH=src pytest tests/handshake/test_handshake_process_io.py::test_read_handshake_response_timeout -xvs)",
      "Bash(PYTHONPATH=src pytest tests/handshake/test_handshake_process_io.py::test_read_handshake_response_timeout tests/handshake/test_handshake_process_io.py::test_read_handshake_response_timeout_stderr_read_error -xvs)",
      "Bash(PYTHONPATH=src pytest tests/handshake/test_handshake_process_io.py -x)",
      "Bash(PYTHONPATH=src pytest tests/handshake/test_handshake_process_io.py::test_read_handshake_response_timeout tests/handshake/test_handshake_process_io.py::test_read_handshake_response_timeout_stderr_read_error -v)",
      "Bash(PYTHONPATH=src pytest tests/ -x --tb=short -q)",
      "Bash(PYTHONPATH=src pytest tests/handshake/test_handshake_process_io.py -v)",
      "Bash(PYTHONPATH=src pytest tests/ --tb=short -q)",
      "Bash(PYTHONPATH=src pytest tests/handshake/test_handshake_process_io.py::test_read_handshake_response_timeout tests/handshake/test_handshake_process_io.py::test_read_handshake_stdout_becomes_none -v)",
      "Bash(PYTHONPATH=src pytest tests/handshake/test_handshake_process_io.py --tb=short -q)",
      "Bash(PYTHONPATH=src pytest tests/ --tb=short -q --maxfail=3)",
      "Bash(PYTHONPATH=src pytest tests/client/test_client_retry_logic.py::test_connect_handshake_total_timeout_exceeded -xvs)",
      "Bash(PYTHONPATH=src pytest tests/client/test_client_integration.py::test_client_integration -xvs)",
      "Bash(PYTHONPATH=src pytest tests/client/test_client_integration.py -k test_client_integration -xvs)",
      "Bash(PYTHONPATH=src pytest tests/client/test_client_retry_logic.py::test_connect_handshake_total_timeout_exceeded tests/client/test_client_integration.py::test_client_integration -xvs)",
      "Bash(PYTHONPATH=src pytest tests/ --tb=short -q --maxfail=10)",
      "Bash(PYTHONPATH=src pytest tests/core/test_types.py::test_is_valid_handler_true -xvs)",
      "Bash(PYTHONPATH=src pytest tests/core/test_types.py -v)",
      "Bash(PYTHONPATH=src pytest tests/transport/unix/test_transport_unix.py::test_check_socket_in_use_stat_oserror -xvs)",
      "Bash(PYTHONPATH=src pytest tests/transport/unix/test_transport_unix_connect.py::test_unix_connect_stat_fails -xvs)",
      "Bash(PYTHONPATH=src pytest tests/transport/unix/ --tb=short -q)",
      "Bash(PYTHONPATH=src ty check src/)",
      "Bash(PYTHONPATH=src ruff check src/)",
      "Bash(/bin/ls:*)",
      "Bash(PYTHONPATH=src mypy src/provide/foundation/config/loader.py --show-error-codes --no-error-summary)",
      "Bash(export PYTHONPATH=src)",
      "Bash(PYTHONPATH=src ruff format src/ tests/)",
      "Bash(PYTHONPATH=src ruff check --fix --unsafe-fixes src/ tests/)",
      "Bash(timeout 60 pytest --tb=no -q)",
      "Bash(PYTHONPATH=src bandit -r src/ -f json)",
      "Bash(PYTHONPATH=src ruff format src/provide/foundation/__init__.py)",
      "Bash(PYTHONPATH=src ruff check src/provide/foundation/__init__.py)",
      "Bash(PYTHONPATH=src ruff check src/provide/foundation/__init__.py --no-cache)",
      "Bash(timeout 30 pytest tests/logger/test_config.py -v)",
      "Bash(timeout 10 pytest tests/logger/test_config_coverage.py -v -k \"TelemetryConfig\" --tb=short)",
      "Bash(timeout 45 pytest --tb=short -q)",
      "Bash(timeout 45 pytest tests/logger/test_config_coverage.py::TestTelemetryConfigCoverage::test_telemetry_config_from_env_otel_service_name -v)",
      "Bash(PYTHONPATH=src ruff check src/ tests/ --statistics)",
      "Bash(PYTHONPATH=src ruff check --fix src/ tests/ --select F401,SIM117,PTH101,PTH108,PTH123 --unsafe-fixes)",
      "Bash(PYTHONPATH=src ruff check src/ --select ANN001)",
      "Bash(PYTHONPATH=src pytest tests/client/test_client_retry_logic.py::test_connect_handshake_total_timeout_immediately -xvs)",
      "Bash(PYTHONPATH=src pytest tests/client/test_client_retry_logic.py::test_connect_handshake_total_timeout_immediately -x)",
      "Bash(PYTHONPATH=src pytest tests/client/test_client_retry_logic.py::test_connect_handshake_total_timeout_exceeded -x)",
      "Bash(PYTHONPATH=src pytest tests/client/test_client_grpc.py::test_create_grpc_channel_with_mtls tests/client/test_client_init.py::test_setup_client_certificates_mtls_missing_key tests/client/test_client_retry_logic.py::test_connect_handshake_total_timeout_immediately -v)",
      "Bash(PYTHONPATH=src pytest tests/client/ --tb=short -q)",
      "Bash(PYTHONPATH=src pytest tests/core/ --tb=short -q)",
      "Bash(PYTHONPATH=src pytest tests/ --tb=short -q --maxfail=5)",
      "Bash(timeout 45 pytest --tb=no -q)",
      "Bash(xargs ruff check:*)",
      "Bash(timeout 30 pytest tests/cli/test_decorators.py::TestLoggingOptions::test_adds_log_file_option -v)",
      "Bash(awk:*)",
      "Bash(PYTHONPATH=src pytest tests/crypto/test_dependency_stubs.py -xvs)",
      "Bash(PYTHONPATH=src ruff format tests/crypto/test_dependency_stubs.py)",
      "Bash(PYTHONPATH=src ruff check tests/crypto/test_dependency_stubs.py)",
      "Bash(PYTHONPATH=src ruff check --fix --unsafe-fixes tests/crypto/test_dependency_stubs.py)",
      "Bash(PYTHONPATH=src pytest tests/crypto/test_dependency_stubs.py -v)",
      "Bash(PYTHONPATH=src pytest tests/crypto/test_dependency_stubs.py -v -s)",
      "Bash(PYTHONPATH=src pytest tests/crypto/test_dependency_stubs.py -v -s --tb=no)",
      "Bash(PYTHONPATH=src ruff format src/provide/foundation/errors/dependencies.py)",
      "Bash(PYTHONPATH=src ruff check src/provide/foundation/errors/dependencies.py)",
      "Bash(PYTHONPATH=src ruff check --select ANN001 --output-format=json)",
      "Bash(PYTHONPATH=src ruff check . --select E402 --output-format=json)",
      "Bash(PYTHONPATH=src ruff check . --select E402)",
      "Bash(PYTHONPATH=src ruff check --select SIM117 .)",
      "Bash(cut:*)",
      "Bash(PYTHONPATH=src ruff check --select PTH108 .)",
      "Bash(PYTHONPATH=src ruff check --select PTH108 . --statistics)",
      "Bash(PYTHONPATH=src ruff check tests/cli/test_decorators.py tests/config/test_config_env_coverage.py tests/context/test_context_core.py tests/hub/test_hub_context.py)",
      "Bash(PYTHONPATH=src ruff check --select PTH110 tests/config/test_config_env_coverage.py)",
      "Bash(PYTHONPATH=src ruff check --select RUF009)",
      "Bash(PYTHONPATH=src ruff format src/provide/foundation/tracer/spans.py src/provide/foundation/integrations/openobserve/models.py tests/crypto/test_certificate_credentials.py tests/hub/test_hub_async_support.py examples/configuration/03_config_management.py)",
      "Bash(PYTHONPATH=src ruff check --fix src/provide/foundation/tracer/spans.py src/provide/foundation/integrations/openobserve/models.py tests/crypto/test_certificate_credentials.py tests/hub/test_hub_async_support.py examples/configuration/03_config_management.py)",
      "Bash(PYTHONPATH=src ruff format src/provide/foundation/tracer/spans.py src/provide/foundation/integrations/openobserve/models.py)",
      "Bash(PYTHONPATH=src ruff check --select RUF009 . --statistics)",
      "Bash(PYTHONPATH=src ruff check --select RUF009 .)",
      "Bash(export PYTHONPATH=../../src)",
      "Bash(timeout 45 pytest tests/crypto/test_certificate_credentials.py -q)",
      "Bash(timeout 30 pytest tests/crypto/test_certificate_credentials.py -q)",
      "Bash(timeout 30 pytest tests/hub/test_hub_async_support.py -q)",
      "Bash(~/code/gh/provide-io/messometer/.venv/bin/messometer extract --since=\"6 hours ago\" --output=pyvider_commits.json)",
      "Bash(~/code/gh/provide-io/messometer/.venv/bin/messometer extract --since=\"3 days ago\" --output=pyvider_commits.json)",
      "Bash(~/code/gh/provide-io/messometer/.venv/bin/messometer extract --since=\"2025-08-31\" --output=pyvider_commits.json)",
      "Bash(~/code/gh/provide-io/messometer/.venv/bin/messometer extract --since=\"729ac095^\" --until=\"729ac095\" --output=pyvider_commits.json)",
      "Bash(~/code/gh/provide-io/messometer/.venv/bin/messometer extract --since=\"10 minutes ago\" --output=pyvider_commits.json)",
      "Bash(~/code/gh/provide-io/messometer/.venv/bin/messometer prepare improved_consolidation_plan.json --noop)",
      "Bash(~/code/gh/provide-io/messometer/.venv/bin/messometer prepare improved_consolidation_plan.json)",
      "Bash(~/code/gh/provide-io/messometer/.venv/bin/messometer apply --noop)",
      "Bash(~/code/gh/provide-io/messometer/.venv/bin/messometer apply)",
      "Bash(~/code/gh/provide-io/messometer/.venv/bin/messometer extract --since=\"3 days ago\" --cadence=daily --output=pyvider_daily_commits.json)",
      "Bash(~/code/gh/provide-io/messometer/.venv/bin/messometer extract --since=\"2024-01-01\" --cadence=daily --output=pyvider_daily_history.json)",
      "Bash(~/code/gh/provide-io/messometer/.venv/bin/messometer prepare pyvider_daily_history_cadence_plan.json --noop)",
      "Bash(~/code/gh/provide-io/messometer/.venv/bin/messometer prepare pyvider_daily_history_cadence_plan.json)",
      "Bash(~/code/gh/provide-io/messometer/.venv/bin/messometer extract --since=\"1 week ago\" --cadence=daily --output=pyvider_recent_daily.json)",
      "Bash(~/code/gh/provide-io/messometer/.venv/bin/messometer extract --since=\"2025-09-15\" --cadence=daily --output=test_recent_daily.json)",
      "Bash(~/code/gh/provide-io/messometer/.venv/bin/messometer extract --since=\"2025-08-08\" --cadence=daily --output=test_august_daily.json)",
      "Bash(timeout 30 pytest tests/tracer/test_spans.py::TestSpanOpenTelemetryIntegration::test_span_creation_with_otel_available -v)",
      "Bash(timeout 30 pytest tests/tracer/test_spans.py::TestSpanOpenTelemetryIntegration -v)",
      "Bash(~/code/gh/provide-io/messometer/.venv/bin/messometer prepare test_august_daily_cadence_plan.json)",
      "Bash(timeout 30 pytest tests/tracer/test_spans.py -v)",
      "Bash(/Users/tim/code/gh/provide-io/.venv/bin/ruff check --select E402 examples/configuration/03_config_management.py)",
      "Bash(xargs:*)",
      "Bash(~/code/gh/provide-io/messometer/.venv/bin/messometer extract --help)",
      "Bash(~/code/gh/provide-io/messometer/.venv/bin/messometer extract --since=\"2025-06-01\" --cadence=weekly --output=pyvider_weekly_commits.json)",
      "Bash(~/code/gh/provide-io/messometer/.venv/bin/messometer prepare pyvider_weekly_commits_cadence_plan.json)",
      "Bash(PYTHONPATH=src ruff format src/provide/foundation/hub/click_builder.py)",
      "Bash(PYTHONPATH=src ruff check src/provide/foundation/hub/click_builder.py --no-cache)",
      "Bash(PYTHONPATH=src ruff check src/ --select C901 --output-format=json)",
      "Bash(PYTHONPATH=src ruff check src/ --select C901)",
      "Bash(PYTHONPATH=src ruff check src/provide/foundation/hub/click_builder.py --select C901)",
      "Bash(PYTHONPATH=src ruff format src/provide/foundation/integrations/openobserve/formatters.py)",
      "Bash(PYTHONPATH=src ruff check src/provide/foundation/integrations/openobserve/formatters.py --select C901)",
      "Bash(PYTHONPATH=src ruff format src/provide/foundation/process/async_runner.py)",
      "Bash(PYTHONPATH=src ruff check src/provide/foundation/process/async_runner.py --select C901)",
      "Bash(PYTHONPATH=src ruff format src/provide/foundation/cli/decorators.py)",
      "Bash(PYTHONPATH=src ruff check src/provide/foundation/cli/decorators.py --select C901)",
      "Bash(command -v:*)",
      "Read(///**)",
      "Bash(PYTHONPATH=src ruff check --fix --unsafe-fixes src/provide/foundation/env/__init__.py)",
      "Bash(PYTHONPATH=src mypy src/provide/foundation/env/__init__.py --show-error-codes --no-error-summary)",
      "Bash(PYTHONPATH=/Users/tim/code/gh/provide-io/provide-foundation/src mypy /Users/tim/code/gh/provide-io/provide-foundation/src/provide/foundation/env/__init__.py --show-error-codes --no-error-summary)",
      "Bash(PYTHONPATH=/Users/tim/code/gh/provide-io/provide-foundation/src mypy /Users/tim/code/gh/provide-io/provide-foundation/src/provide/foundation/cli/commands/logs/generate.py --show-error-codes --no-error-summary)",
      "Bash(PYTHONPATH:*)",
      "Bash(timeout 120 pytest --tb=short -x)",
      "Bash(timeout 120 pytest -x --tb=short -q)",
      "Bash(/Users/tim/code/gh/provide-io/.venv/bin/python -m pytest tests/test_init_coverage.py -v)",
      "Bash(.venv/bin/ruff check src/ --statistics)",
      "Bash(.venv/bin/ruff check src/ --select E402 --output-format=concise)",
      "Bash(.venv/bin/ruff check src/ --select C901 --output-format=concise)",
      "Bash(.venv/bin/ruff check src/ --select RUF,ANN,PTH,SIM,F --output-format=concise)",
      "Bash(.venv/bin/ruff check src/ --select ANN001 --output-format=concise)",
      "Bash(.venv/bin/mypy src/ --show-error-codes --no-error-summary)",
      "Bash(.venv/bin/pytest --tb=short -q --maxfail=5)",
      "Bash(.venv/bin/ruff check src/ --select RUF012 --output-format=concise)",
      "Bash(.venv/bin/ruff check src/ --select RUF012)",
      "Bash(.venv/bin/ruff check src/ --select RUF001 --output-format=concise)",
      "Bash(.venv/bin/ruff check src/ --select RUF001)",
      "Bash(.venv/bin/ruff check src/ --select SIM102 --output-format=concise)",
      "Bash(.venv/bin/ruff check src/ --select SIM102)",
      "Bash(.venv/bin/ruff check src/ --select ANN001)",
      "Bash(.venv/bin/ruff check --fix src/)",
      "Bash(timeout 120 pytest tests/ --tb=short -x)",
      "Bash(/Users/tim/code/gh/provide-io/.venv/bin/mypy /Users/tim/code/gh/provide-io/provide-foundation/src/provide/foundation)",
      "Bash(MYPYPATH=src mypy --config-file pyproject.toml src/provide/foundation/__init__.py)",
      "Bash(export MYPYPATH=src)",
      "Bash(.venv/bin/ruff check src/ --select F822,F403 --output-format=concise)",
      "Bash(.venv/bin/ruff check src/provide/foundation/hub/commands.py --select F822 --output-format=concise)",
      "Bash(.venv/bin/ruff check --fix --unsafe-fixes src/ --select E402)",
      "Bash(.venv/bin/ruff check src/ --select E402 --statistics)",
      "Bash(.venv/bin/ruff check src/ --select RUF009 --output-format=concise)",
      "Bash(.venv/bin/ruff check src/ --select PTH101,PTH105 --output-format=concise)",
      "Bash(.venv/bin/ruff check src/ --select RUF006 --output-format=concise)",
      "Bash(timeout 30 pytest tests/errors/test_decorators.py -v)",
      "Bash(timeout 60 pytest tests/errors/ -q)",
      "Bash(.venv/bin/ruff check --fix --unsafe-fixes src/)",
      "Bash(.venv/bin/ruff format src/provide/foundation/errors/decorators.py)",
      "Bash(.venv/bin/ruff check src/provide/foundation/errors/decorators.py --select C901)",
      "Bash(timeout 30 pytest tests/errors/ -q)",
      "Bash(timeout 30 pytest tests/hub/test_hub_commands_coverage.py::TestHubCommandsImports::test_all_exports_defined -xvs)",
      "Bash(timeout 30 pytest --tb=short -x --maxfail=5)",
      "Bash(exit 1)",
      "Bash(PYVIDER_CTY_ENABLE_TYPE_INFERENCE_CACHE=false PYTHONPATH=src pytest tests/conversion/test_inference_concurrency_safety.py::TestInferenceConcurrencySafety::test_concurrent_inference_is_isolated -xvs)",
      "Bash(.venv/bin/ruff format:*)",
      "Bash(/Users/tim/code/gh/provide-io/provide-foundation/.venv/bin/ruff format src/provide/foundation/__init__.py)",
      "Bash(.venv/bin/ruff check:*)",
      "Bash(timeout 30 pytest tests/logger/ratelimit/test_queue_limiter.py::TestQueuedRateLimiter::test_queued_rate_limiter_memory_limit -v)",
      "Bash(timeout 30 pytest tests/logger/ratelimit/test_queue_limiter.py -v)",
      "Bash(timeout 30 pytest tests/logger/ratelimit/ -v)",
      "Bash(timeout 30 pytest tests/logger/ --tb=short -q --maxfail=3)",
      "Bash(timeout 30 pytest tests/crypto/test_optional_crypto_dependency.py::TestCryptoFallbackBehavior::test_crypto_module_resilience -xvs)",
      "Bash(timeout 30 pytest tests/config/test_config_logger.py::TestBuildCoreProcessorsList::test_default_config -xvs)",
      "Bash(timeout 30 pytest tests/cli/commands/test_deps_coverage.py::TestDepsCommandModuleImport::test_module_imports_successfully -xvs)",
      "Bash(timeout 30 pytest tests/tracer/test_otel.py -v)",
      "Bash(timeout 30 pytest tests/test_init_coverage.py -v)",
      "Bash(timeout 30 pytest tests/cli/commands/logs/test_query_simplified.py tests/cli/commands/logs/test_send_comprehensive.py tests/cli/test_cli_testing_coverage.py -v)",
      "Bash(timeout 120 pytest -n auto --tb=short -q)",
      "Bash(gh repo view:*)",
      "Bash(gh run list:*)",
      "Bash(gh run view:*)",
      "Bash(gh workflow list:*)",
      "Bash(pip index versions:*)",
      "Bash(gh api:*)",
      "Bash(gh workflow run:*)",
      "Bash(gh run watch:*)",
      "Bash(gh run logs:*)",
      "Bash(gh run download:*)",
      "Bash(.venv/bin/python:*)",
      "Bash(.venv/bin/pytest tests/profiling/test_hooks.py::TestProfilingComponent::test_component_auto_register -xvs)"
    ],
    "deny": [],
    "ask": [],
    "additionalDirectories": [
      "/Users/tim/code/gh/provide-io"
    ]
  }
}