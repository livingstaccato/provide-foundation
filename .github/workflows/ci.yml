name: 🧪 CI - Build, Test & Package

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      extended-matrix:
        description: 'Run extended platform matrix (all OS/arch combinations)'
        type: boolean
        default: false

permissions:
  contents: read
  id-token: write  # For trusted publishing

env:
  UV_VERSION: "0.7.8"
  FORCE_COLOR: "1"

jobs:
  # ==================================================================================
  # 🔧 Code Quality & Type Checking
  # ==================================================================================
  quality:
    name: 🔧 Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔐 Setup GitHub Auth
        uses: provide-io/ci-tooling/actions/setup-github-auth@main
        env:
          GH_ORG_HELPERS: ${{ secrets.GH_ORG_HELPERS }}

      - name: 🐍 Setup Python Environment
        uses: provide-io/ci-tooling/actions/setup-python-env@main
        with:
          python-version: '3.11'
          uv-version: ${{ env.UV_VERSION }}
          workenv-path: '.venv'
          install-extras: 'dev'

      - name: 📦 Install provide-testkit
        run: |
          source .venv/bin/activate
          uv pip install "provide-testkit[standard,advanced-testing,typecheck,utils,build] @ git+https://github.com/livingstaccato/provide-testkit.git@main"
          uv sync --all-groups --dev --prerelease=allow

      - name: 🎨 Run Ruff Linting
        run: |
          source .venv/bin/activate
          ruff check src/ examples/ --output-format=github
        continue-on-error: true

      - name: 📏 Run Ruff Formatting Check
        run: |
          source .venv/bin/activate
          ruff format --check src/ examples/
        continue-on-error: true

      - name: 🏷️ Run MyPy Type Checking
        run: |
          source .venv/bin/activate
          mypy src/ --show-error-codes --pretty
        continue-on-error: true

  # ==================================================================================
  # 🧪 Testing Matrix - Multi-Platform Support
  # ==================================================================================
  test:
    name: 🧪 Tests (${{ matrix.os }}, Python ${{ matrix.python-version }})
    needs: quality
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # Core platform matrix (Python 3.11 only)
        include:
          # Ubuntu x86_64
          - os: ubuntu-latest
            python-version: "3.11"
            arch: "x64"
            platform: "linux/amd64"

          # Ubuntu ARM64 (via QEMU emulation)
          - os: ubuntu-latest
            python-version: "3.11"
            arch: "arm64"
            platform: "linux/arm64"
            use_qemu: true

          # macOS ARM64 (M1/M2)
          - os: macos-14
            python-version: "3.11"
            arch: "arm64"
            platform: "darwin/arm64"

          # macOS Intel x86_64
          - os: macos-13
            python-version: "3.11"
            arch: "x64"
            platform: "darwin/amd64"

          # Windows x86_64
          - os: windows-2022
            python-version: "3.11"
            arch: "x64"
            platform: "windows/amd64"

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup QEMU for ARM64 Emulation
        if: matrix.use_qemu == true
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/arm64

      - name: 🔐 Setup GitHub Auth
        if: runner.os != 'Windows'  # Git config approach doesn't work well on Windows
        uses: provide-io/ci-tooling/actions/setup-github-auth@main
        env:
          GH_ORG_HELPERS: ${{ secrets.GH_ORG_HELPERS }}

      - name: 🐍 Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.arch }}

      - name: ⚡ Install UV
        uses: astral-sh/setup-uv@v4
        with:
          version: ${{ env.UV_VERSION }}

      - name: 📦 Setup Environment (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          uv venv .venv
          source .venv/bin/activate
          uv pip install -e .
          uv pip install "provide-testkit[standard,advanced-testing,typecheck,utils,build] @ git+https://github.com/livingstaccato/provide-testkit.git@main"
          uv sync --all-groups --dev --prerelease=allow

      - name: 📦 Setup Environment (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          uv venv .venv
          .venv\Scripts\Activate.ps1
          uv pip install -e .
          uv pip install "provide-testkit[standard,advanced-testing,typecheck,utils,build] @ git+https://github.com/livingstaccato/provide-testkit.git@main"
          uv sync --all-groups --dev --prerelease=allow

      - name: 🧪 Run Tests with Coverage (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          source .venv/bin/activate
          pytest tests/ -n auto \
            --cov=provide.foundation \
            --cov-report=xml \
            --cov-branch \
            --junitxml=junit.xml -o junit_family=legacy
        continue-on-error: true

      - name: 🧪 Run Tests with Coverage (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          .venv\Scripts\Activate.ps1
          pytest tests/ -n auto `
            --cov=provide.foundation `
            --cov-report=xml `
            --cov-branch `
            --junitxml=junit.xml -o junit_family=legacy
        continue-on-error: true

      - name: 📊 Upload Coverage to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/codecov-action@v5
        with:
          name: codecov-${{ matrix.os }}-py${{ matrix.python-version }}-${{ matrix.arch }}
          files: ./coverage.xml
          flags: unittests,${{ matrix.os }},${{ matrix.arch }}
          token: ${{ secrets.CODECOV_TOKEN }}
        continue-on-error: true

      - name: 📊 Upload Test Results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
        continue-on-error: true

      - name: 📈 Upload Test Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}-${{ matrix.arch }}
          path: |
            junit.xml
            coverage.xml
          retention-days: 30

  # ==================================================================================
  # 📦 Package Building & Testing
  # ==================================================================================
  package:
    name: 📦 Package Build & Test
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for version detection

      - name: 🔐 Setup GitHub Auth
        uses: provide-io/ci-tooling/actions/setup-github-auth@main
        env:
          GH_ORG_HELPERS: ${{ secrets.GH_ORG_HELPERS }}

      - name: 🐍 Setup Python Environment
        uses: provide-io/ci-tooling/actions/setup-python-env@main
        with:
          python-version: '3.11'
          uv-version: ${{ env.UV_VERSION }}
          workenv-path: '.venv'
          install-extras: 'dev'

      - name: 📦 Install provide-testkit
        run: |
          source .venv/bin/activate
          uv pip install "provide-testkit[standard,advanced-testing,typecheck,utils,build] @ git+https://github.com/livingstaccato/provide-testkit.git@main"
          uv sync --all-groups --dev --prerelease=allow

      - name: 🔍 Version Consistency Check
        run: |
          source .venv/bin/activate
          python scripts/version_checker.py
        continue-on-error: true

      - name: 🏗️ Build Package
        run: |
          source .venv/bin/activate
          uv build

      - name: 🧪 Test Package Installation
        run: |
          # Create clean environment for package testing
          uv venv .venv_test
          source .venv_test/bin/activate
          # List what was built
          ls -la dist/ || echo "No dist directory found"
          # Install the wheel if it exists, otherwise install the tar.gz
          if ls dist/*.whl 1> /dev/null 2>&1; then
            uv pip install dist/*.whl
          elif ls dist/*.tar.gz 1> /dev/null 2>&1; then
            uv pip install dist/*.tar.gz
          else
            echo "Warning: No built packages found in dist/"
            exit 1
          fi
          # Test the installation
          python -c "from provide.foundation import logger; logger.info('Package test successful')"

      - name: 📈 Upload Package Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: package-dist
          path: dist/
          retention-days: 90
          if-no-files-found: warn

  # ==================================================================================
  # 🏁 Integration Tests
  # ==================================================================================
  integration:
    name: 🏁 Integration Tests
    runs-on: ubuntu-latest
    needs: [quality, test]
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔐 Setup GitHub Auth
        uses: provide-io/ci-tooling/actions/setup-github-auth@main
        env:
          GH_ORG_HELPERS: ${{ secrets.GH_ORG_HELPERS }}

      - name: 🐍 Setup Python Environment
        uses: provide-io/ci-tooling/actions/setup-python-env@main
        with:
          python-version: '3.11'
          uv-version: ${{ env.UV_VERSION }}
          workenv-path: '.venv'
          install-extras: 'dev'

      - name: 📦 Install provide-testkit
        run: |
          source .venv/bin/activate
          uv pip install "provide-testkit[standard,advanced-testing,typecheck,utils,build] @ git+https://github.com/livingstaccato/provide-testkit.git@main"
          uv sync --all-groups --dev --prerelease=allow

      - name: 🧪 Run Integration Tests
        run: |
          source .venv/bin/activate
          # Run all integration tests from various modules
          pytest tests/errors/test_integration.py -n auto -v --tb=short || true
          pytest tests/test_component_registry_*.py -n auto -v --tb=short || true
          pytest tests/test_init_coverage.py -n auto -v --tb=short || true
        continue-on-error: true

  # ==================================================================================
  # 📋 Summary Job
  # ==================================================================================
  summary:
    name: 📋 CI Summary
    runs-on: ubuntu-latest
    needs: [quality, test, package, integration]
    if: always()
    steps:
      - name: 📊 Report Results
        run: |
          echo "## 🧪 provide-foundation CI Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Platform Coverage" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Ubuntu x86_64 (Python 3.11)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ macOS ARM64 / M1 (Python 3.11)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ macOS Intel x86_64 (Python 3.11)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Windows x86_64 (Python 3.11)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Job Results" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔧 Code Quality | ${{ needs.quality.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🧪 Multi-Platform Tests | ${{ needs.test.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 📦 Package Build | ${{ needs.package.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🏁 Integration | ${{ needs.integration.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.quality.result }}" == "success" && "${{ needs.test.result }}" == "success" ]]; then
            echo "🎉 **All critical checks passed!** Ready for release." >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Some checks failed.** Review results before proceeding." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "**Note:** Ubuntu ARM64 support requires self-hosted runners. Currently testing x86_64 only." >> $GITHUB_STEP_SUMMARY
